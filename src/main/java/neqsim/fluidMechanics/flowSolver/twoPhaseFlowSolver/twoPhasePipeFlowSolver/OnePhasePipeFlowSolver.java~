/*
 * OnePhasePipeFlowSolver.java
 *
 * Created on 17. januar 2001, 21:05
 */

package fluidMechanics.flowSolver.onePhaseFlowSolver.onePhasePipeFlowSolver;


import javax.swing.JOptionPane;
import MathLib.JamaLinAlg.*;
import MathLib.nonLinearSolver.*;
import java.io.*;
import thermo.system.*;
import thermo.component.*;
import MathLib.generalMath.*;
import fluidMechanics.flowSystem.onePhaseFlowSystem.pipeFlowSystem.*;

/**
 *
 * @author  Even Solbraa
 * @version
 */
public class OnePhasePipeFlowSolver extends fluidMechanics.flowSolver.onePhaseFlowSolver.OnePhaseFlowSolver {
    
    
    protected double[] PbArray; // = new double[100];
    protected Matrix solMatrix;
    protected Matrix sol2Matrix;
    protected Matrix sol3Matrix;
    protected double a[];
    protected double b[];
    protected double c[];
    protected double r[];
    protected double length;
    protected PipeFlowSystem pipe;
    protected int numberOfNodes;
    
    
    /** Creates new OnePhasePipeFlowSolver */
    public OnePhasePipeFlowSolver() {
    }
    
    public OnePhasePipeFlowSolver(PipeFlowSystem pipe, double length, int nodes) {
        this.pipe = pipe;
        this.length = length;
        this.numberOfNodes=nodes;
        PbArray = new double[nodes];
        solMatrix = new Matrix(PbArray,1).transpose();
        sol2Matrix = new Matrix(PbArray,1).transpose();
        sol3Matrix = new Matrix(PbArray,1).transpose();
        a = new double[nodes];
        b = new double[nodes];
        c = new double[nodes];
        r = new double[nodes];
    }
    
        public Object clone(){
         OnePhasePipeFlowSolver clonedSystem = null;
        try{
            clonedSystem = (OnePhasePipeFlowSolver) super.clone();
        }
        catch(Exception e)
        {
            e.printStackTrace(System.err);
        }
        
        return clonedSystem;
    }
    
}
