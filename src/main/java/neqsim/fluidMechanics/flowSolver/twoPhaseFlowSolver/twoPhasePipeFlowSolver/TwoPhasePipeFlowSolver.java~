/*
 * OnePhasePipeFlowSolver.java
 *
 * Created on 17. januar 2001, 21:05
 */

package fluidMechanics.flowSolver.twoPhaseFlowSolver.twoPhasePipeFlowSolver;


import javax.swing.JOptionPane;
import MathLib.JamaLinAlg.*;
import MathLib.nonLinearSolver.*;
import java.io.*;
import thermo.system.*;
import fluidMechanics.flowSystem.*;
import thermo.component.*;
import MathLib.generalMath.*;
import fluidMechanics.flowSystem.twoPhaseFlowSystem.twoPhasePipeFlowSystem.*;

/**
 *
 * @author  Even Solbraa
 * @version
 */
public class TwoPhasePipeFlowSolver extends fluidMechanics.flowSolver.onePhaseFlowSolver.OnePhaseFlowSolver {
    
    
    protected double[] PbArray; // = new double[100];
    protected Matrix[] solMatrix;
    protected Matrix[][] solMolFracMatrix;
    protected Matrix[] solPhaseConsMatrix;
    protected Matrix sol2Matrix;
    protected Matrix[] sol3Matrix;
    protected Matrix[] sol4Matrix;
    
    protected double a[];
    protected double b[];
    protected double c[];
    protected double r[];
    protected double length;
    protected TwoPhasePipeFlowSystem pipe;
    protected int numberOfNodes;
    
    
    /** Creates new OnePhasePipeFlowSolver */
    public TwoPhasePipeFlowSolver() {
    }
    
    public TwoPhasePipeFlowSolver(FlowSystemInterface pipe, double length, int nodes) {
        this.pipe = pipe;
        this.length = length;
        this.numberOfNodes=nodes;
        PbArray = new double[nodes];
        solMatrix = new Matrix[2];
        sol3Matrix = new Matrix[2];
        solPhaseConsMatrix = new Matrix[2];
        solMolFracMatrix = new Matrix[2][pipe.getNode(0).getBulkSystem().getPhases()[0].getNumberOfComponents()];
        solMatrix[0] = new Matrix(PbArray,1).transpose();
        solMatrix[1] = new Matrix(PbArray,1).transpose();
        for(int phase=0;phase<2;phase++){
            for(int i=0;i<pipe.getNode(0).getBulkSystem().getPhases()[0].getNumberOfComponents();i++){
                solMolFracMatrix[phase][i] = new Matrix(PbArray,1).transpose();
            }
        }
        sol3Matrix[0] = new Matrix(PbArray,1).transpose();
        sol3Matrix[1] = new Matrix(PbArray,1).transpose();
        solPhaseConsMatrix[0] = new Matrix(PbArray,1).transpose();
        solPhaseConsMatrix[1] = new Matrix(PbArray,1).transpose();
        sol2Matrix = new Matrix(PbArray,1).transpose();
        a = new double[nodes];
        b = new double[nodes];
        c = new double[nodes];
        r = new double[nodes];
    }
    
    public Object clone(){
        TwoPhasePipeFlowSolver clonedSystem = null;
        try{
            clonedSystem = (TwoPhasePipeFlowSolver) super.clone();
        }
        catch(Exception e) {
            e.printStackTrace(System.err);
        }
        
        return clonedSystem;
    }
    
}
