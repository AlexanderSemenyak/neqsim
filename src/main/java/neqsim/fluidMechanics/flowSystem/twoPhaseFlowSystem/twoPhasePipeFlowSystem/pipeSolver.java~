package fluidMechanics.flowSystem.twoPhaseFlowSystem.twoPhasePipeFlowSystem;

import javax.swing.JOptionPane;
import MathLib.JamaLinAlg.*;
import MathLib.nonLinearSolver.*;
import java.io.*;
import thermo.system.*;
import thermo.component.*;
import MathLib.generalMath.*;


public class pipeSolver extends Object implements Cloneable {
    
    double[][] PArray; //; = new double[100][100];
    double[] PbArray; // = new double[100];
    Matrix PMatrix;
    Matrix PbMatrix;
    Matrix solMatrix;
    double[][] P2Array; //; = new double[100][100];
    double[] Pb2Array; // = new double[100];
    Matrix P2Matrix;
    Matrix Pb2Matrix;
    Matrix sol2Matrix;
    double a[];
    double b[];
    double c[];
    double r[];
    double a2[];
    double b2[];
    double c2[];
    double r2[];
    double length;
    TwoPhasePipeFlowSystem pipe;
    int numberOfNodes;
    
    public pipeSolver() {
    }
    
 /** Creates new nonlin */
    public pipeSolver(TwoPhasePipeFlowSystem pipe, double length, int nodes) {
        this.pipe = pipe;
        this.length = length;
        this.numberOfNodes=nodes;
        PArray = new double[nodes][nodes];
        PbArray = new double[nodes];
        PMatrix = new Matrix(PArray);
        PbMatrix = new Matrix(PbArray,1);
        solMatrix = new Matrix(PbArray,1).transpose();
        a = new double[nodes+1];
        b = new double[nodes+1];
        c = new double[nodes+1];
        r = new double[nodes+1];
        a2 = new double[nodes];
        b2 = new double[nodes];
        c2 = new double[nodes];
        r2 = new double[nodes];
        P2Array = new double[nodes+1][nodes+1];
        Pb2Array = new double[nodes+1];
        P2Matrix = new Matrix(P2Array);
        Pb2Matrix = new Matrix(Pb2Array,1);
        sol2Matrix = new Matrix(Pb2Array,1).transpose();
    }
    
    public Object clone(){
        pipeSolver clonedSystem = null;
        try{
            clonedSystem = (pipeSolver) super.clone();
        }
        catch(Exception e)
        {
            e.printStackTrace(System.err);
        }
        
        return clonedSystem;
    }
    
    
    
    public void init(){
        
        //   pipe.velocity[0] =  pipe.velocity[i] * (pipe.getNode(numberOfNodes-1).getBulkSystem().getPressure()/solMatrix.get(numberOfNodes-1,0));
        for(int i = 0;i<numberOfNodes-1;i++){
            pipe.getNode(i+1).getBulkSystem().setPressure(0*(pipe.getNode(i+1).getBulkSystem().getPhases()[0].calcR()/1000*pipe.getNode(i+1).getBulkSystem().getPhases()[0].getZ()*pipe.getNode(i+1).getBulkSystem().getPhases()[0].getTemperature()/1e5)*(solMatrix.get(i+1,0)-pipe.getNode(i+1).getBulkSystem().getPhases()[0].getDensity()) + pipe.getNode(i+1).getBulkSystem().getPressure());
            pipe.getNode(i+1).init();
            
        }
        
    }
    
    
    public void init2(){
        for(int i = 1;i<(numberOfNodes+1);i++){
            pipe.velocity[i] = sol2Matrix.get(i,0);
        }
        
    }
    
    public void initProfiles(){
        double err=0, old=0;
        do{
            err=0;
            for(int i = 0;i<numberOfNodes-1;i++){
                old =  pipe.getNode(i+1).getBulkSystem().getPressure();
                pipe.getNode(i+1).getBulkSystem().setPressure(-pipe.getNode(i).getWallFrictionFactor()* pipe.getNode(i).getBulkSystem().getPhases()[0].getDensity()*pipe.velocity[i]*pipe.velocity[i]/pipe.getNode(i).getGeometry().getDiameter()/2.0*(pipe.getNode(i).getGeometry().getNodeLength())/1e5 + pipe.getNode(i).getBulkSystem().getPressure());
                //    System.out.println("trykk : " + pipe.getNode(i+1).getBulkSystem().getPressure()+ "  hastighet : " + pipe.velocity[i+1]);
                err = err+(old-pipe.getNode(i+1).getBulkSystem().getPressure());
                //pipe.velocity[i] = sol2Matrix.get(i,0);
                pipe.getNode(i+1).init();
                pipe.velocity[i+1] = pipe.getNode(i+1).getVelocity();
            }
        }
        while(Math.abs(err)>1e-3);
        
    }
    /*
     public void setPArray(){
     
            for(int i=0;i<100;i++){
                for(int j=0;j<100;j++){
                    PArray[i][j] = 0;
                }
            }
     
              double SU=0;
              PArray[0][0] = 0;
              PArray[0][1] = 1;
              SU = pipe.getNode(0).getBulkSystem().getPressure()*1e5-(0.5*pipe.pipeNode[1].getBulkSystem().getPhases()[0].getDensity()*(Math.pow(pipe.pipeNode[2].getVelocity(),2)-Math.pow(pipe.getNode(0).getVelocity(),2)))-
              (1.0*pipe.pipeNode[1].getBulkSystem().getPhases()[0].getDensity()*pipe.pipeNode[1].getFrictionFactor()*Math.pow(pipe.pipeNode[1].getVelocity(),2)*pipe.pipeNode[1].pipe.getNodeLength()/pipe.pipeNode[1].pipe.getDiameter());
              PbArray[0] = SU;
     
            for(int i=1;i<99;i++){
                SU = (0.5*pipe.getNode(i+1).getBulkSystem().getPhases()[0].getDensity()*(Math.pow(pipe.pipeNode[i+2].getVelocity(),2)-Math.pow(pipe.getNode(i).getVelocity(),2)))+(1.0*pipe.getNode(i).getBulkSystem().getPhases()[0].getDensity()*pipe.getNode(i).getFrictionFactor()*Math.pow(pipe.getNode(i).getVelocity(),2)*pipe.getNode(i).pipe.getNodeLength()/pipe.getNode(i).pipe.getDiameter());
                PArray[i][i-1] = 1;
                PArray[i][i] = 0;
                PArray[i][i+1] = -1;
                PbArray[i] = SU;
            }
     
              PArray[99][99-1] = 1;
              PArray[99][99] = -1;
              SU = (0.5*pipe.pipeNode[100].getBulkSystem().getPhases()[0].getDensity()*(Math.pow(pipe.pipeNode[100].getVelocity(),2)-Math.pow(pipe.pipeNode[99].getVelocity(),2)))+(0.5*pipe.pipeNode[100].getBulkSystem().getPhases()[0].getDensity()*pipe.pipeNode[100].getFrictionFactor()*Math.pow(pipe.pipeNode[100].getVelocity(),2)*pipe.pipeNode[99].pipe.getNodeLength()/pipe.pipeNode[100].pipe.getDiameter());
              PbArray[99] = SU;
     
     
        }*/
    
    public void setPArray(){
        
        for(int i=0;i<numberOfNodes;i++){
            for(int j=0;j<numberOfNodes;j++){
                PArray[i][j] = 0;
            }
        }
        
        double SU=0;
        PArray[0][0] = 1.0;
        PArray[0][1] = 0;
        PArray[0][2] = 0;
        SU = pipe.getNode(0).getBulkSystem().getPhases()[0].getDensity();
        //   pipe.getNode(0).getBulkSystem().getPressure()*1e5-(0.5*pipe.pipeNode[1].getBulkSystem().getPhases()[0].getDensity()*(Math.pow(pipe.pipeNode[2].getVelocity(),2)-Math.pow(pipe.getNode(0).getVelocity(),2)))-
        //  (1.0*pipe.pipeNode[1].getBulkSystem().getPhases()[0].getDensity()*pipe.pipeNode[1].getFrictionFactor()*Math.pow(pipe.pipeNode[1].getVelocity(),2)*pipe.pipeNode[1].pipe.getNodeLength()/pipe.pipeNode[1].pipe.getDiameter());
        PbArray[0] = SU;
        
        for(int i=1;i<numberOfNodes-1;i++){
            SU = 0;
            PArray[i][i-1] =  pipe.velocity[i]/2.0;
            PArray[i][i] = (pipe.velocity[i]-pipe.velocity[i+1])/2.0;
            PArray[i][i+1] = -pipe.velocity[i+1]/2.0;
            PbArray[i] = 0;
        }
        
        PArray[numberOfNodes-1][numberOfNodes-2] =  0;
        PArray[numberOfNodes-1][numberOfNodes-1] = 1.0;
        SU = pipe.getNode(0).getBulkSystem().getPhases()[0].getDensity()*pipe.velocity[0]/pipe.velocity[numberOfNodes];
        PbArray[numberOfNodes-1] = SU;
        
        
    }
    
    public void setPArrayTDMA(){
        
        
        double SU=0;
        a2[0] = 0;
        b2[0] = 1.0;
        c2[0] = 0;
        SU = pipe.getNode(0).getBulkSystem().getPhases()[0].getDensity();
        //   pipe.getNode(0).getBulkSystem().getPressure()*1e5-(0.5*pipe.pipeNode[1].getBulkSystem().getPhases()[0].getDensity()*(Math.pow(pipe.pipeNode[2].getVelocity(),2)-Math.pow(pipe.getNode(0).getVelocity(),2)))-
        //  (1.0*pipe.pipeNode[1].getBulkSystem().getPhases()[0].getDensity()*pipe.pipeNode[1].getFrictionFactor()*Math.pow(pipe.pipeNode[1].getVelocity(),2)*pipe.pipeNode[1].pipe.getNodeLength()/pipe.pipeNode[1].pipe.getDiameter());
        r2[0] = SU;
        
        for(int i=1;i<numberOfNodes-1;i++){
            SU = 0;
            a2[i] =  pipe.velocity[i]/2.0;
            b2[i] = (pipe.velocity[i]-pipe.velocity[i+1])/2.0;
            c2[i] = -pipe.velocity[i+1]/2.0;
            r2[i] = 0;
        }
        
        a2[numberOfNodes-1] =  0;
        b2[numberOfNodes-1] = 1.0;
        c2[numberOfNodes-1] = 0;
        SU = pipe.getNode(0).getBulkSystem().getPhases()[0].getDensity()*pipe.velocity[0]/pipe.velocity[numberOfNodes];
        r2[numberOfNodes-1] = SU;
        
        
    }
    
    
    public void setP2Array(){
        
        for(int i=0;i<numberOfNodes+1;i++){
            for(int j=0;j<numberOfNodes+1;j++){
                P2Array[i][j] = 0;
            }
        }
        
        double SU=0;
        double Fw=0;
        
        P2Array[0][0] = 1.0;
        P2Array[0][1] = 0;
        P2Array[0][2] = 0;
        SU = pipe.velocity[0];
        //   pipe.getNode(0).getBulkSystem().getPressure()*1e5-(0.5*pipe.pipeNode[1].getBulkSystem().getPhases()[0].getDensity()*(Math.pow(pipe.pipeNode[2].getVelocity(),2)-Math.pow(pipe.getNode(0).getVelocity(),2)))-
        //  (1.0*pipe.pipeNode[1].getBulkSystem().getPhases()[0].getDensity()*pipe.pipeNode[1].getFrictionFactor()*Math.pow(pipe.pipeNode[1].getVelocity(),2)*pipe.pipeNode[1].pipe.getNodeLength()/pipe.pipeNode[1].pipe.getDiameter());
        
        Pb2Array[0] = SU;
        System.out.println("velocity : " + pipe.velocity[0]);
        
        for(int i=1;i<numberOfNodes;i++){
            SU =  1e5*(pipe.getNode(i).getBulkSystem().getPressure() - pipe.getNode(i-1).getBulkSystem().getPressure());
            
            if(i==1){
                Fw = pipe.getNode(0).getBulkSystem().getPhases()[0].getDensity()*pipe.velocity[i-1];
            }
            else {
                Fw = 0.5 *(((pipe.getNode(i).getBulkSystem().getPhases()[0].getDensity()+pipe.getNode(i-1).getBulkSystem().getPhases()[0].getDensity())/2.0) * pipe.velocity[i] + ((pipe.getNode(i-2).getBulkSystem().getPhases()[0].getDensity()+pipe.getNode(i-1).getBulkSystem().getPhases()[0].getDensity())/2.0) * pipe.velocity[i-1]) ;
            }
            // double Fw = 1.0/4.0 *(((pipe.getNode(i).getBulkSystem().getPhases()[0].getDensity()+pipe.getNode(i-1).getBulkSystem().getPhases()[0].getDensity())/2.0) * pipe.velocity[i] + ((pipe.getNode(i-2).getBulkSystem().getPhases()[0].getDensity()+pipe.getNode(i-1).getBulkSystem().getPhases()[0].getDensity())/2.0) * pipe.velocity[i-1]) ;
            double Fe = 0.5 *(((pipe.getNode(i).getBulkSystem().getPhases()[0].getDensity()+pipe.getNode(i).getBulkSystem().getPhases()[0].getDensity())/2.0) * pipe.velocity[i+1] + ((pipe.getNode(i).getBulkSystem().getPhases()[0].getDensity()+pipe.getNode(i-1).getBulkSystem().getPhases()[0].getDensity())/2.0) * pipe.velocity[i]) ;
            P2Array[i][i-1] =  -Fw/2.0;
            P2Array[i][i+1] =  Fe/2.0;
            // P2Array[i][i] = +pipe.pipe.getNodeLength()*(pipe.getNode(i).getBulkSystem().getPhases()[0].getDensity()+pipe.getNode(i-1).getBulkSystem().getPhases()[0].getDensity())/2.0*(pipe.getNode(i).getFrictionFactor()+pipe.getNode(i-1).getFrictionFactor())/2.0/pipe.getNode(i).pipe.getDiameter()*pipe.velocity[i]/2.0;
            P2Array[i][i] = -P2Array[i][i-1] - P2Array[i][i+1] + (Fe - Fw) + pipe.getNode(i).getGeometry().getNodeLength()*(pipe.getNode(i).getBulkSystem().getPhases()[0].getDensity()+pipe.getNode(i-1).getBulkSystem().getPhases()[0].getDensity())/2.0*(pipe.getNode(i).getWallFrictionFactor()+pipe.getNode(i-1).getWallFrictionFactor())/2.0/pipe.getNode(i).getGeometry().getDiameter()*pipe.velocity[i]/2.0;
            Pb2Array[i] =  -SU;
            
            //   System.out.println("SU := " + SU + "  Fb " + P2Array[i][i] + "Fw " + P2Array[i][i-1]);
        }
        
        P2Array[numberOfNodes][numberOfNodes-1] =0;// -1.0;
        P2Array[numberOfNodes][numberOfNodes] = 1.0;
        SU = pipe.velocity[0] *(pipe.getNode(0).getBulkSystem().getPhases()[0].getDensity()/pipe.getNode(numberOfNodes-1).getBulkSystem().getPhases()[0].getDensity());
        Pb2Array[numberOfNodes] = SU;
        
    }
    
    
    public void setP2ArrayTDMA(){
        
        
        double SU=0;
        double Fw=0, Fe=0;
        
        a[0] = 0;
        b[0] = 1.0;
        c[0] = 0;
        
        r[0] = pipe.velocity[0];
        
        
        a[1] = 0;
        b[1] = 1.0;
        c[1] = 0;
        
        r[1] = pipe.velocity[0]*pipe.getNode(0).getBulkSystem().getPhases()[0].getDensity()/pipe.getNode(1).getBulkSystem().getPhases()[0].getDensity();
        
        for(int i=2;i<numberOfNodes;i++){
            SU =  1e5*(pipe.getNode(i).getBulkSystem().getPressure() - pipe.getNode(i-1).getBulkSystem().getPressure());
            
            if(i==1){
                Fw = 2.0*pipe.getNode(0).getBulkSystem().getPhases()[0].getDensity()*pipe.velocity[0];
                Fe = 0;
            }
            else {
                Fw = 0.5 *(((pipe.getNode(i).getBulkSystem().getPhases()[0].getDensity()+pipe.getNode(i-1).getBulkSystem().getPhases()[0].getDensity())/2.0) * pipe.velocity[i] + ((pipe.getNode(i-2).getBulkSystem().getPhases()[0].getDensity()+pipe.getNode(i-1).getBulkSystem().getPhases()[0].getDensity())/2.0) * pipe.velocity[i-1]) ;
                Fe = 0.5 *(((pipe.getNode(i).getBulkSystem().getPhases()[0].getDensity()+pipe.getNode(i).getBulkSystem().getPhases()[0].getDensity())/2.0) * pipe.velocity[i+1] + ((pipe.getNode(i).getBulkSystem().getPhases()[0].getDensity()+pipe.getNode(i-1).getBulkSystem().getPhases()[0].getDensity())/2.0) * pipe.velocity[i]) ;
            }
            // double Fw = 1.0/4.0 *(((pipe.getNode(i).getBulkSystem().getPhases()[0].getDensity()+pipe.getNode(i-1).getBulkSystem().getPhases()[0].getDensity())/2.0) * pipe.velocity[i] + ((pipe.getNode(i-2).getBulkSystem().getPhases()[0].getDensity()+pipe.getNode(i-1).getBulkSystem().getPhases()[0].getDensity())/2.0) * pipe.velocity[i-1]) ;
           
            a[i] = -Fw/2.0;
            c[i] = Fe/2.0;
            // P2Array[i][i] = +pipe.pipe.getNodeLength()*(pipe.getNode(i).getBulkSystem().getPhases()[0].getDensity()+pipe.getNode(i-1).getBulkSystem().getPhases()[0].getDensity())/2.0*(pipe.getNode(i).getFrictionFactor()+pipe.getNode(i-1).getFrictionFactor())/2.0/pipe.getNode(i).pipe.getDiameter()*pipe.velocity[i]/2.0;
            b[i] = -a[i] - c[i] + (Fe - Fw) + pipe.getNode(i).getGeometry().getNodeLength()*(pipe.getNode(i).getBulkSystem().getPhases()[0].getDensity()+pipe.getNode(i-1).getBulkSystem().getPhases()[0].getDensity())/2.0*(pipe.getNode(i).getWallFrictionFactor()+pipe.getNode(i-1).getWallFrictionFactor())/2.0/pipe.getNode(i).getGeometry().getDiameter()*pipe.velocity[i]/2.0;
            r[i] =  -SU;
       //     System.out.println("A: "+ a[i] + " B: "+ b[i] +" C: "+ c[i] );
                      
        }
        
        a[numberOfNodes] =0;// -1.0;
        b[numberOfNodes] = 1.0;
        c[numberOfNodes] = 0;
        SU = pipe.velocity[0] *(pipe.getNode(0).getBulkSystem().getPhases()[0].getDensity()/pipe.getNode(numberOfNodes-1).getBulkSystem().getPhases()[0].getDensity());
        r[numberOfNodes] = SU;
        
    }
    
    
    
    
    public void solve()
    {
        int iter=0;
        Matrix diffMatrix;
        initProfiles();
        do
        {
            
            iter++;
            
            setP2Array();
            P2Matrix = new Matrix(P2Array);
            P2Matrix.print(10,3);
            Pb2Matrix = new Matrix(Pb2Array,1);
            Pb2Matrix.print(10,3);
            Matrix sol2Old = sol2Matrix.copy();
            sol2Matrix=P2Matrix.solve(Pb2Matrix.transpose());
            sol2Matrix.print(10,3);
            diffMatrix = sol2Old.minus(sol2Matrix);
            init2();
            
            setPArray();
            PMatrix = new Matrix(PArray);
            PbMatrix = new Matrix(PbArray,1);
            Matrix solOld = solMatrix.copy();
            solMatrix=PMatrix.solve(PbMatrix.transpose());
          //  solMatrix.print(10,3);
            diffMatrix = solOld.minus(solMatrix);
            init();
            //  pipe.print();
            //    initProfiles();*/
            
        System.out.println("iter: "+diffMatrix.norm2());
        }
        while (diffMatrix.norm2()>5);
        
        //    solMatrix.print(10,3);
        
        System.out.println("iter: "+iter);
    }
    
    
    
    
    public void solveTDMA()
    {
        Matrix diffMatrix;
        double d[], d2[];
        int iter=0;
        initProfiles();
        
        do
        {
            
            iter++;
            
            System.out.println("iter: " );
            setP2ArrayTDMA();
            d = TDMAsolve.solve(a,b,c,r);
            Matrix sol2Old = sol2Matrix.copy();
            sol2Matrix= new Matrix(d,1).transpose();
            diffMatrix = sol2Old.minus(sol2Matrix);
            System.out.println("diff: "+diffMatrix.norm2());
            init2();
            
            setPArrayTDMA();
            Matrix solOld = solMatrix.copy();
            d2 = TDMAsolve.solve(a2,b2,c2,r2);
            solMatrix= new Matrix(d2,1).transpose();
            diffMatrix = solOld.minus(solMatrix);
            System.out.println("diff2: "+diffMatrix.norm2());
            init();
            
            //  pipe.print();
            //    initProfiles();
        }
        while (iter<3);
       
/*      for(int i=0;i<numberOfNodes;i++){
    //    solMatrix.print(10,3);
 
       System.out.println("iter: " + d[i] + " tetthet "  + d2[i]);
    }*/
    }
    
    
    
    
    
    
    public static void main( String args[] )
    {
/*	  sysNewtonRhapson test=new sysNewtonRhapson();
          double[] constants = new double[]{0.4,0.4};
        test.setx(constants);
            while (test.nonsol()>1.0e-8)
                {
                  constants=test.getx();
                  System.out.println(constants[0]+" "+constants[1]);
                }
                test.nonsol();
                constants=test.getf();
                System.out.println(constants[0]+" "+constants[1]);
        System.exit(0);
 */ }
}