package fluidMechanics.flowSystem.twoPhaseFlowSystem.twoPhasePipeFlowSystem;

import thermo.system.*;
import fluidMechanics.*;
import fluidMechanics.geometryDefinitions.pipe.*;
import fluidMechanics.flowSystem.*;
import thermodynamicOperations.*;
import fluidMechanics.flowSystem.twoPhaseFlowSystem.*;
import fluidMechanics.flowNode.onePhaseNode.onePhasePipeFlowNode.*;
import MathLib.JamaLinAlg.*;
import fluidMechanics.flowNode.*;
import fluidMechanics.geometryDefinitions.*;
import fluidMechanics.flowLeg.pipeLeg.*;
import fluidMechanics.flowNode.twoPhaseNode.twoPhasePipeFlowNode.annularFlow.*;
import fluidMechanics.flowNode.twoPhaseNode.twoPhasePipeFlowNode.stratifiedFlow.*;
//import guiAuto.*;
import util.util.*;
import dataPresentation.*;
import dataPresentation.JFreeChart.*;

public class TwoPhasePipeFlowSystemReactive extends TwoPhaseFlowSystem {
    
    public TwoPhasePipeFlowSystemReactive(){
    }
    
    public void createSystem(){
        //  thermoSystem.init(1);
        thermoSystem.setTemperature(this.getInletTemperature());
        thermoSystem.setPressure(this.getInletPressure());
        
        flowLeg = new PipeLeg[this.getNumberOfLegs()];
        
        for(int i=0;i<getNumberOfLegs();i++){
            flowLeg[i] = new PipeLeg();
        }
        
        flowNode = new FlowNodeInterface[totalNumberOfNodes];
        flowNode[0] = new StratifiedFlowNode(thermoSystem, equipmentGeometry[0]);
        flowNode[totalNumberOfNodes-1] =  flowNode[0].getNextNode();
        
        super.createSystem();
        this.setNodes();
    }
    
    
    public void init(){
        for(int j = 0;j<getTotalNumberOfNodes();j++){
            flowNode[j].setInterphaseModelType(1);
            flowNode[j].initFlowCalc();
            flowNode[j].init();
        }
        
        for(int j = 0;j<getTotalNumberOfNodes();j++){
            for(int phase=0; phase<2; phase++){
                flowNode[j].setVelocityOut(phase, this.flowNode[j].getVelocity(phase));
            }
        }
        
        for(int k = 1;k<getTotalNumberOfNodes();k++){
            for(int phase=0; phase<2; phase++){
                this.flowNode[k].setVelocityIn(phase, ((DoubleCloneable) this.flowNode[k-1].getVelocityOut(phase)));
            }
        }
    }
    
    public void solveSteadyState(int solverType){
         double[] times = {0.0};
        getTimeSeries().setTimes(times);
        SystemInterface[] systems = {flowNode[0].getBulkSystem()};
        getTimeSeries().setInletThermoSystems(systems);
        getTimeSeries().setNumberOfTimeStepsInInterval(1);
        double[] outletFlowRates = {0.0, 0.0};
        getTimeSeries().setOutletMolarFlowRate(outletFlowRates);
        
        fluidMechanics.flowSolver.twoPhaseFlowSolver.twoPhasePipeFlowSolver.steadyStateTwoPhasePipeFlowSolver.SteadyStateTwoPhasePipeFlowSolver pipeSolve = new fluidMechanics.flowSolver.twoPhaseFlowSolver.twoPhasePipeFlowSolver.steadyStateTwoPhasePipeFlowSolver.SteadyStateTwoPhasePipeFlowSolver(this, getSystemLength(), this.getTotalNumberOfNodes(), false);
        pipeSolve.setSolverType(solverType);
        
        pipeSolve.solveTDMA();
    }
    
    public void solveTransient(int type){
        //   pipeSolver pipeSolve = new pipeSolver(this, getSystemLength(), getTotalNumberOfNodes());
        //   pipeSolve.solveTDMA();
    }
    
    
    /*
    public double calcdn(){
        for(int i=0;i<bulkSystem.getPhases()[0].getNumberOfComponents();i++){
            dn[i] = 8e4*liquidBinaryMassTransferCoeffisient[i][i]*(bulkSystem.getPhases()[0].getComponents()[i].getx()- interphaseSystem.getPhases()[0].getComponents()[i].getx());
           // System.out.println( "dn: " + i + "  "  + dn[i]);
        }
        return 1;
    }
     */
    public void calcFluxes(){
        double[] dn;
        for(int j = 0;j<getTotalNumberOfNodes()-1;j++){
            flowNode[j].init();
            // dn = flowNode[j].calcFluxes();
            flowNode[j+1].setBulkSystem(flowNode[j].getBulkSystem());
            flowNode[j+1].setInterphaseSystem(flowNode[j].getInterphaseSystem());
            //  flowNode[j+1].setFluxes(dn);
            //    for(int i=0;i<flowNode[j].getBulkSystem().getPhases()[0].getNumberOfComponents();i++){
            //     flowNode[j+1].getBulkSystem().getPhases()[0].addMoles(i, -dn[i]*1000);
            //      flowNode[j+1].getBulkSystem().getPhases()[1].addMoles(i, +dn[i]*1000);
            //          System.out.println("dn : " + dn[i]);
            //    }
        }
    }
    /*
    public FlowNodeInterface getNextNode(){
        AnnularFlow newNode = (AnnularFlow) this.clone();
     
        for(int i=0;i<bulkSystem.getPhases()[0].getNumberOfComponents();i++){
            newNode.getBulkSystem().getPhases()[0].addMoles(i, -dn[i]);
            newNode.getBulkSystem().getPhases()[1].addMoles(i, +dn[i]);
        }
     
        return newNode;
    }
     
     */
    public void displayResult(){
    }
    
    
    public static void main(String[] args) {
        // Initierer et nyt rørsystem
        FlowSystemInterface pipe = new TwoPhasePipeFlowSystem();
        
        // Definerer termodyanmikken
        SystemInterface testSystem = new SystemSrkEos(295.3, 5.0);    // initierer et system som benytter SRK tilstandsligning
        // med trykk 305.3 K og 125 bar
        ThermodynamicOperations testOps = new ThermodynamicOperations(testSystem);                  // gjør termodyanmiske Flash rutiner tilgjengelige
        testSystem.addComponent("methane", 0.011152181, 0);
        testSystem.addComponent("ethane", 0.0011152181, 0);
        testSystem.addComponent("water", 0.04962204876, 1);
        testSystem.setMixingRule(2);
        // benytter klassiske blandingsregler
        
        double pipeLength = 0.7;
        pipe.setThermoSystem(testSystem);                               // setter termodyanmikken for rørsystemet
        pipe.setSystemLength(pipeLength);                               // setter inn rør-lengden
        pipe.setInletTemperature(295.3);                                // setter innløps-temperature
        pipe.setInletPressure(5.0);                                     // setter innløps trykk
        pipe.setNumberOfLegs(5);                                        // deler inn røret i et gitt antall legger
        pipe.setNumberOfNodesInLeg(40);                                 // setter antall nodepunkter (beregningspunkter/grid) pr. leg
        double[] height = {0,0,0,0,0,0};
        double[] length = {0.0, 0.1, 0.2, 0.3, 0.5, 0.7};
        double[] outerTemperature = {278.0, 278.0, 278.0, 278.0, 278.0, 278.0, 278.0, 275.0, 275.0, 275.0, 275.0};
        
        pipe.setLegHeights(height);                                     // setter inn høyde for hver leg-ende
        pipe.setLegPositions(length);                                  // setter avstand til hver leg-ende
        pipe.setLegOuterTemperatures(outerTemperature);
        
        GeometryDefinitionInterface [] pipeGemometry = new PipeData[5];    // Deffinerer geometrien for røret
        double[] pipeDiameter = {0.02588, 0.02588, 0.02588, 0.02588, 0.02588};
        for(int i=0;i<pipeDiameter.length;i++) pipeGemometry[i] = new PipeData(pipeDiameter[i]);
        pipe.setEquipmentGeometry(pipeGemometry);                      // setter inn rørgeometrien for hver leg
        // utfører bergninger
        pipe.createSystem();
        pipe.init();
        
        pipe.solveSteadyState(2);
        // pipe.calcFluxes();
        pipe.print();
        // pipe.displayResult();
        // testOps.TPflash();
        // testOps.displayResult();
    }
}