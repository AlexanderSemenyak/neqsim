package fluidMechanics.flowSystem.twoPhaseFlowSystem.stirredCellSystem;

import thermo.system.SystemInterface;
//import guiAuto.*;
public class StirredCellSystem extends fluidMechanics.flowSystem.twoPhaseFlowSystem.TwoPhaseFlowSystem {
    
    public StirredCellSystem(){
    }
    
    public void createSystem(){
        flowLeg = new fluidMechanics.flowLeg.pipeLeg.PipeLeg[this.getNumberOfLegs()];
        
        for(int i=0;i<getNumberOfLegs();i++){
            flowLeg[i] = new fluidMechanics.flowLeg.pipeLeg.PipeLeg();
        }
        
        flowNode = new fluidMechanics.flowNode.FlowNodeInterface[totalNumberOfNodes];
        flowNode[0] = new fluidMechanics.flowNode.twoPhaseNode.twoPhaseStirredCellNodel.StirredCellNode(thermoSystem, equipmentGeometry[0]);
        
        flowNode[totalNumberOfNodes-1] =  flowNode[0].getNextNode();
        //
        super.createSystem();
        this.setNodes();
    }
    
    
    public void init(){
        for(int j = 0;j<getTotalNumberOfNodes();j++){
            flowNode[j].init();
        }
        
        for(int j = 0;j<getTotalNumberOfNodes();j++){
            for(int phase=0; phase<2; phase++){
                flowNode[j].setVelocityOut(phase, this.flowNode[j].getVelocity(phase));
            }
        }
        
        for(int k = 1;k<getTotalNumberOfNodes();k++){
            for(int phase=0; phase<2; phase++){
                this.flowNode[k].setVelocityIn(phase, ((util.util.DoubleCloneable) this.flowNode[k-1].getVelocityOut(phase)));
            }
        }
    }
    
    public void solveSteadyState(int solverType){
         flowSolver = new fluidMechanics.flowSolver.twoPhaseFlowSolver.stirredCellSolver.StirredCellSolver(this, getSystemLength(), getTotalNumberOfNodes(), false); 
    }
    
    public void solveTransient(int solverType){
        getTimeSeries().init(this);
        display = new fluidMechanics.util.fluidMechanicsVisualization.flowSystemVisualization.twoPhaseFlowVisualization.twoPhasePipeFlowVisualization.TwoPhasePipeFlowVisualization(this.getTotalNumberOfNodes(),getTimeSeries().getTime().length);
        for(int i=0;i<this.getTimeSeries().getTime().length;i++){
            getNode(0).setBulkSystem(this.getTimeSeries().getThermoSystem()[i]);
            flowNode[0].initFlowCalc();
            flowNode[0].init();
            flowNode[0].setVelocityIn(this.flowNode[0].getVelocity());
            flowNode[getTotalNumberOfNodes()-1].setVelocity(this.getTimeSeries().getOutletMolarFlowRates()[i]);
            // System.out.println("vel: " + this.flowNode[0].getVelocity());
            //getSolver().setTimeStep(this.getTimeSeries().getTimeStep()[i]);
            // System.out.println("time step: " + i + "  " + this.getTimeSeries().getTimeStep()[i]);
            System.out.println("time: " + i + "  " + this.getTimeSeries().getTime()[i]);
            flowSolver.solveTDMA();
            display.setNextData(this, this.getTimeSeries().getTime(i));
        }
    }
    
    public static void main(String[] args){
        // Initierer et nyt rørsystem
        fluidMechanics.flowSystem.FlowSystemInterface pipe = new StirredCellSystem();
        
        // Definerer termodyanmikken5
        thermo.system.SystemInterface testSystem = new thermo.system.SystemSrkEos(295.3, 5.0);    // initierer et system som benytter SRK tilstandsligning
        // med trykk 305.3 K og 125 bar
        thermodynamicOperations.ThermodynamicOperations testOps = new thermodynamicOperations.ThermodynamicOperations(testSystem);                  // gjør termodyanmiske Flash rutiner tilgjengelige
        testSystem.addComponent("methane", 0.11152181, 0);
        //testSystem.addComponent("ethane", 0.0011152181, 0);
        testSystem.addComponent("water", 0.04962204876, 1);
        testSystem.setMixingRule(2);
        // benytter klassiske blandingsregler
        
        pipe.setInletThermoSystem(testSystem);                               // setter termodyanmikken for rørsystemet
        pipe.setNumberOfLegs(1);                                        // deler inn røret i et gitt antall legger
        pipe.setNumberOfNodesInLeg(1);                                 // setter antall nodepunkter (beregningspunkter/grid) pr. leg
        double[] height = {0,0};
        double[] length = {0.0, 0.0};
        double[] outerTemperature = {278.0, 278.0};
        
        pipe.setLegHeights(height);                                     // setter inn høyde for hver leg-ende
        pipe.setLegPositions(length);                                  // setter avstand til hver leg-ende
        pipe.setLegOuterTemperatures(outerTemperature);
        
        fluidMechanics.geometryDefinitions.GeometryDefinitionInterface [] pipeGemometry = new fluidMechanics.geometryDefinitions.pipe.PipeData[6];    // Deffinerer geometrien for røret
        double[] pipeDiameter = {0.02588, 0.02588};
        for(int i=0;i<pipeDiameter.length;i++) pipeGemometry[i] = new fluidMechanics.geometryDefinitions.pipe.PipeData(pipeDiameter[i]);
        pipe.setEquipmentGeometry(pipeGemometry);                      // setter inn rørgeometrien for hver leg
        // utfører bergninger
        pipe.createSystem();
        pipe.init();
        
        double[] times = {0, 10};
        pipe.getTimeSeries().setTimes(times);
        SystemInterface[] systems = {testSystem, testSystem, testSystem};
        pipe.getTimeSeries().setInletThermoSystems(systems);
        pipe.getTimeSeries().setNumberOfTimeStepsInInterval(5);
        pipe.solveSteadyState(2);
        pipe.solveTransient(2);
        
       // pipe.getDisplay().createNetCdfFile("c:/temp5.nc");
    }
}