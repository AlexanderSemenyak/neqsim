package fluidMechanics.flowSystem.twoPhaseFlowSystem.twoPhasePipeFlowSystem;

import thermo.system.*;
import fluidMechanics.*;
import fluidMechanics.geometryDefinitions.pipe.*;
import fluidMechanics.flowSystem.*;
import thermodynamicOperations.*;
import fluidMechanics.flowSystem.twoPhaseFlowSystem.*;
import fluidMechanics.flowNode.onePhaseNode.onePhasePipeFlowNode.*;
import MathLib.JamaLinAlg.*;
import fluidMechanics.flowNode.*;
import fluidMechanics.geometryDefinitions.*;
import fluidMechanics.flowLeg.pipeLeg.*;
import fluidMechanics.flowNode.twoPhaseNode.twoPhasePipeFlowNode.annularFlow.*;
import fluidMechanics.flowNode.twoPhaseNode.twoPhasePipeFlowNode.stratifiedFlow.*;
import fluidMechanics.util.fluidMechanicsVisualization.flowSystemVisualization.onePhaseFlowVisualization.pipeFlowVisualization.*;
import fluidMechanics.util.fluidMechanicsVisualization.flowSystemVisualization.twoPhaseFlowVisualization.twoPhasePipeFlowVisualization.*;

//import guiAuto.*;
import util.util.*;
import dataPresentation.*;
import dataPresentation.JFreeChart.*;

public class TwoPhasePipeFlowSystem extends TwoPhaseFlowSystem {
    
    public TwoPhasePipeFlowSystem(){
    }
    
    public void createSystem(){
        // thermoSystem.init(1);
        flowLeg = new PipeLeg[this.getNumberOfLegs()];
        
        for(int i=0;i<getNumberOfLegs();i++){
            flowLeg[i] = new PipeLeg();
        }
        
        flowNode = new FlowNodeInterface[totalNumberOfNodes];
        flowNode[0] = new StratifiedFlowNode(thermoSystem, equipmentGeometry[0]);
        flowNode[totalNumberOfNodes-1] =  flowNode[0].getNextNode();
        //
        super.createSystem();
        this.setNodes();
    }
    
    
    public void init(){
        for(int j = 0;j<getTotalNumberOfNodes();j++){
            flowNode[j].setInterphaseModelType(1);
            flowNode[j].initFlowCalc();
            flowNode[j].init();
        }
        
        for(int j = 0;j<getTotalNumberOfNodes();j++){
            for(int phase=0; phase<2; phase++){
                flowNode[j].setVelocityOut(phase, this.flowNode[j].getVelocity(phase));
            }
        }
        
        for(int k = 1;k<getTotalNumberOfNodes();k++){
            for(int phase=0; phase<2; phase++){
                this.flowNode[k].setVelocityIn(phase, ((DoubleCloneable) this.flowNode[k-1].getVelocityOut(phase)));
            }
        }
    }
    
    public void solveSteadyState(int solverType){
        double[] times = {0.0};
        display = new TwoPhasePipeFlowVisualization(this.getTotalNumberOfNodes(),1);
        getTimeSeries().setTimes(times);
        SystemInterface[] systems = {flowNode[0].getBulkSystem()};
        getTimeSeries().setInletThermoSystems(systems);
        getTimeSeries().setNumberOfTimeStepsInInterval(1);
        double[] outletFlowRates = {0.0, 0.0};
        getTimeSeries().setOutletMolarFlowRate(outletFlowRates);
        
        
        flowSolver = new fluidMechanics.flowSolver.twoPhaseFlowSolver.twoPhasePipeFlowSolver.steadyStateTwoPhasePipeFlowSolver.SteadyStateTwoPhasePipeFlowSolver(this, getSystemLength(), this.getTotalNumberOfNodes(), false);
        flowSolver.setSolverType(solverType);
        flowSolver.solveTDMA();
        getTimeSeries().init(this);
        display.setNextData(this);
        
    }
    
    public void solveTransient(int type){
        //   pipeSolver pipeSolve = new pipeSolver(this, getSystemLength(), getTotalNumberOfNodes());
        //   pipeSolve.solveTDMA();
    }
    
    
    
    public static void main(String[] args) {
        // Initierer et nyt rørsystem
        FlowSystemInterface pipe = new TwoPhasePipeFlowSystem();
        
        // Definerer termodyanmikken5
        SystemInterface testSystem = new SystemSrkEos(295.3, 5.0);    // initierer et system som benytter SRK tilstandsligning
        // med trykk 305.3 K og 125 bar
        ThermodynamicOperations testOps = new ThermodynamicOperations(testSystem);                  // gjør termodyanmiske Flash rutiner tilgjengelige
        testSystem.addComponent("methane", 0.11152181, 0);
        //   testSystem.addComponent("ethane", 0.0011152181, 0);
        testSystem.addComponent("water", 0.04962204876, 1);
        testSystem.setMixingRule(2);
        // benytter klassiske blandingsregler
        
        pipe.setInletThermoSystem(testSystem);                               // setter termodyanmikken for rørsystemet
        pipe.setNumberOfLegs(5);                                        // deler inn røret i et gitt antall legger
        pipe.setNumberOfNodesInLeg(100);                                 // setter antall nodepunkter (beregningspunkter/grid) pr. leg
        double[] height = {0,0,0,0,0,0};
        double[] length = {0.0, 1.7, 3.5, 5.0, 7.5, 10.4};
        double[] outerTemperature = {278.0, 278.0, 278.0, 278.0, 278.0, 278.0, 278.0, 275.0, 275.0, 275.0, 275.0};
        
        pipe.setLegHeights(height);                                     // setter inn høyde for hver leg-ende
        pipe.setLegPositions(length);                                  // setter avstand til hver leg-ende
        pipe.setLegOuterTemperatures(outerTemperature);
        
        GeometryDefinitionInterface [] pipeGemometry = new PipeData[5];    // Deffinerer geometrien for røret
        double[] pipeDiameter = {0.02588, 0.02588, 0.02588, 0.02588, 0.02588};
        for(int i=0;i<pipeDiameter.length;i++) pipeGemometry[i] = new PipeData(pipeDiameter[i]);
        pipe.setEquipmentGeometry(pipeGemometry);                      // setter inn rørgeometrien for hver leg
        // utfører bergninger
        pipe.createSystem();
        pipe.init();
        
        pipe.solveSteadyState(2);
        // pipe.calcFluxes();
        //pipe.getDisplay().displayResult("temperature");
        pipe.getDisplay().createNetCdfFile("c:/temp5.nc");
        // pipe.displayResults();
        // testOps.TPflash();
        // testOps.displayResult();
    }
}