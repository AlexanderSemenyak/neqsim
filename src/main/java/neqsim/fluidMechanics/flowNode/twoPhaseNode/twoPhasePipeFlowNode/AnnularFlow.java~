package fluidMechanics.flowNode.twoPhaseNode.twoPhasePipeFlowNode;

import fluidMechanics.flowNode.*;
import fluidMechanics.flowNode.twoPhaseNode.*;
import thermo.system.*;
import thermodynamicOperations.*;
import MathLib.JamaLinAlg.*;
import fluidMechanics.geometryDefinitions.pipe.*;
import fluidMechanics.geometryDefinitions.*;
import fluidMechanics.flowNode.fluidBoundary.interphaseTransportCoefficient.interphaseTwoPhase.interphasePipeFlow.*;


public class AnnularFlow extends TwoPhaseFlowNode implements Cloneable {
    // ThermodynamicOperations interphaseOps = new ThermodynamicOperations();
    //  double liquidFilmThickness=0;
    
    
    public AnnularFlow(){
        this.flowNodeType = "annular";
    }
    
    public AnnularFlow(SystemInterface system, GeometryDefinitionInterface pipe){
        super(system, pipe);
        this.flowNodeType = "annular";
        this.interphaseTransportCoefficient = new InterphaseStratifiedFlow(this);
        this.fluidBoundary = new fluidMechanics.flowNode.fluidBoundary.heatMassTransferCalc.nonEquilibriumFluidBoundary.nonEquilibriumFluidFilmModelBoundary.KrishnaStandartFilmModel(this);
    }
    
    public AnnularFlow(SystemInterface system, SystemInterface interphaseSystem, GeometryDefinitionInterface pipe) {
        super(system, pipe);
        this.flowNodeType = "annular";
        this.interphaseTransportCoefficient = new InterphaseStratifiedFlow(this);
        this.fluidBoundary = new fluidMechanics.flowNode.fluidBoundary.heatMassTransferCalc.nonEquilibriumFluidBoundary.nonEquilibriumFluidFilmModelBoundary.KrishnaStandartFilmModel(this);
    }
    
    
    public Object clone(){
        AnnularFlow clonedSystem = null;
        try{
            clonedSystem = (AnnularFlow) super.clone();
        }
        catch(Exception e) {
            e.printStackTrace(System.err);
        }
        return clonedSystem;
    }
    
    
    public void init(){
        inclination = 1.0;
        this.calcContactLength();
        super.init();
    }
    
    
    public double calcContactLength(){
        wallContactLength[1] = pi * pipe.getDiameter();
        wallContactLength[0] = 0.0;
        
        interphaseContactLength[0] = pi * pipe.getDiameter() * Math.sqrt(phaseFraction[0]);
        interphaseContactLength[1] = pi * pipe.getDiameter() * Math.sqrt(phaseFraction[0]);
        return wallContactLength[0];
    }
    
    
    public FlowNodeInterface getNextNode(){
        AnnularFlow newNode = (AnnularFlow) this.clone();
        
        for(int i=0;i<getBulkSystem().getPhases()[0].getNumberOfComponents();i++){
            //            newNode.getBulkSystem().getPhases()[0].addMoles(i, -molarMassTransfer[i]);
            //            newNode.getBulkSystem().getPhases()[1].addMoles(i, +molarMassTransfer[i]);
        }
        return newNode;
    }
    
    
    public static void main(String[] args){
        System.out.println("Starter.....");
        String fileName = "c:/labsim/exp-heat.txt";
        double flow = 0.5;
        
        double wtpr = 0.5;
        //SystemInterface testSystem = new SystemSrkSchwartzentruberEos(298.15, 20.0);
        SystemInterface testSystem = new SystemFurstElectrolyteEos(298.15, 10.0);
        ThermodynamicOperations testOps = new ThermodynamicOperations(testSystem);
        PipeData pipe1 = new PipeData(0.025,1.0e-6);
        testSystem.addComponent("methane", (200.0-13.333), "Nlitre/min", 0);
        testSystem.addComponent("CO2", 13.333, "Nlitre/min", 0);
        testSystem.addComponent("water", (1.0-wtpr)*flow, "kg/min", 1);
        testSystem.addComponent("MDEA", wtpr*flow, "kg/min", 1);
        
        testSystem.chemicalReactionInit();
        testSystem.createDatabase(true);
        testSystem.setMixingRule(4);
        testSystem.setPhysicalPropertyModel(3);
        // testSystem.setNumericDerivatives(true);
        testSystem.initPhysicalProperties();
        
        AnnularFlow test = new AnnularFlow(testSystem, pipe1);
        test.setInterphaseModelType(1);
        test.setLengthOfNode(0.05);
        test.getFluidBoundary().setHeatTransferCalc(false);
        test.getFluidBoundary().setMassTransferCalc(true);
        test.getFluidBoundary().useFiniteFluxCorrection(false);
        test.getFluidBoundary().useThermodynamicCorrections(false);
        test.initFlowCalc();
        //test.display("testnode 0");
        test.write("node 0",fileName,true);
        System.out.println("rate " + test.getBulkSystem().getPhase(0).getComponent(1).getRate("Nlitre/min"));
        double oldRate = test.getBulkSystem().getPhase(0).getComponent(1).getRate("Nlitre/min");
        for(int i=0;i<30;i++){
            test.initFlowCalc();
            test.init();
            test.calcFluxes();
            test.update();
            test.write(("node " +i ),fileName,false);
            System.out.println("velocity " +test.getVelocity(1));
            //test.display("testnode " + i);
        }
        test.display("testnode last");
        System.out.println("rate " + test.getBulkSystem().getPhase(0).getComponent(1).getRate("Nlitre/min"));
        System.out.println("diff " + (test.getBulkSystem().getPhase(0).getComponent(1).getRate("Nlitre/min")-oldRate));
        //        test.calcFluxes();
        //        test.update();
        //        test.display("testnode4");
        //        test.calcFluxes();
        //        test.update();
        //        test.display("testnode5");
        //        test.calcFluxes();
        //        test.update();
        //        test.display("testnode6");
        //        test.calcFluxes();
        //        test.update();
        //        test.display("testnode7");
        //        test.calcFluxes();
        //        test.update();
        //        test.display("testnode8");
        //         test.calcFluxes();
        //        test.update();
        //        test.display("testnode9");
        //        test.calcFluxes();
        //        test.update();
        //        test.display("testnode10");
        //        test.calcFluxes();
        //        test.update();
        //        test.display("testnode11");
        //        test.calcFluxes();
        //        test.update();
        //        test.display("testnode12");
        //        test.calcFluxes();
        //        test.update();
        //        test.display("testnode13");
        //        test.calcFluxes();
        //        test.update();
        //        test.display("testnode14");
        //        test.calcFluxes();
        //        test.update();
        //        test.display("testnode15");
        //        test.calcFluxes();
        //        test.update();
        //        test.display("testnode16");
        //        test.calcFluxes();
        //        test.update();
        //        test.display("testnode17");
        //        test.calcFluxes();
        //        test.update();
        //        test.display("testnode18");
        //        test.calcFluxes();
        //        test.update();
        //        test.display("testnode19");
        //        test.calcFluxes();
        //        test.update();
        //        test.display("testnode20");
        //        test.calcFluxes();
        //        test.update();
        //        test.display("testnod21");
        //        test.calcFluxes();
        //        test.update();
        //        test.display("testnode22");
        //        test.calcFluxes();
        //        test.update();
        //        test.display("testnode23");
        //        test.calcFluxes();
        //        test.update();
        //        test.display("testnode24");
        //        test.calcFluxes();
        //        test.update();
        //        test.display("testnode25");
        //        test.calcFluxes();
        //        test.update();
        //        test.display("testnode26");
        //        test.calcFluxes();
        //        test.update();
        //        test.display("testnode27");
        //        test.calcFluxes();
        //        test.update();
        //        test.display("testnode28");
        //        test.calcFluxes();
        //        test.update();
        //        test.display("testnode29");
        //        test.calcFluxes();
        //        test.update();
        //        test.display("testnode30");
    }
}