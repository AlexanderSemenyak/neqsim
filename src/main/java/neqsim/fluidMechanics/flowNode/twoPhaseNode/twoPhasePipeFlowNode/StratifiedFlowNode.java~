package fluidMechanics.flowNode.twoPhaseNode.twoPhasePipeFlowNode;

import fluidMechanics.flowNode.*;
import fluidMechanics.flowNode.twoPhaseNode.*;
import thermo.system.*;
import thermodynamicOperations.*;
import MathLib.JamaLinAlg.*;
import fluidMechanics.geometryDefinitions.pipe.*;
import fluidMechanics.geometryDefinitions.*;
import fluidMechanics.flowNode.fluidBoundary.interphaseTransportCoefficient.interphaseTwoPhase.interphasePipeFlow.stratifiedFlow.*;


public class StratifiedFlowNode extends TwoPhaseFlowNode implements Cloneable {
    
    public StratifiedFlowNode(){
        this.flowNodeType = "stratified";
    }
    
    public StratifiedFlowNode(SystemInterface system,GeometryDefinitionInterface pipe) {
        super(system, pipe);
        this.flowNodeType = "stratified";
        this.interphaseTransportCoefficient = new InterphaseStratifiedFlow(this);
        this.fluidBoundary = new fluidMechanics.flowNode.fluidBoundary.heatMassTransferCalc.nonEquilibriumFluidBoundary.nonEquilibriumFluidFilmModelBoundary.KrishnaStandartFilmModel(this);
    }
    
    public StratifiedFlowNode(SystemInterface system, SystemInterface interphaseSystem, GeometryDefinitionInterface pipe) {
        super(system, pipe);
        this.flowNodeType = "stratified";
        this.interphaseTransportCoefficient = new InterphaseStratifiedFlow(this);
        this.fluidBoundary = new fluidMechanics.flowNode.fluidBoundary.heatMassTransferCalc.nonEquilibriumFluidBoundary.nonEquilibriumFluidFilmModelBoundary.KrishnaStandartFilmModel(this);
    }
    
    public Object clone(){
        StratifiedFlowNode clonedSystem = null;
        try{
            clonedSystem = (StratifiedFlowNode) super.clone();
        }
        catch(Exception e) {
            e.printStackTrace(System.err);
        }
        
        return clonedSystem;
    }
    
    public void init(){
        inclination = 0.0;
        this.calcContactLength();
        //System.out.println("len " + this.calcContactLength());
        super.init();
    }
    
    public double calcContactLength(){
        double phaseAngel = pi*phaseFraction[1] + Math.pow(3.0*pi/2.0,1.0/3.0)*(1.0-2.0*phaseFraction[1]+Math.pow(phaseFraction[1],1.0/3.0)-Math.pow(phaseFraction[0],1.0/3.0));
        wallContactLength[1] = phaseAngel*pipe.getDiameter();
        wallContactLength[0] = pi*pipe.getDiameter() - wallContactLength[1];
        interphaseContactLength[0] = pipe.getDiameter() * Math.sin(phaseAngel);
        interphaseContactLength[1] = pipe.getDiameter() * Math.sin(phaseAngel);
        return wallContactLength[0];
    }
    
    
    public FlowNodeInterface getNextNode(){
        StratifiedFlowNode newNode = (StratifiedFlowNode) this.clone();
        
        for(int i=0;i<getBulkSystem().getPhases()[0].getNumberOfComponents();i++){
            //          newNode.getBulkSystem().getPhases()[0].addMoles(i, -molarMassTransfer[i]);
            //          newNode.getBulkSystem().getPhases()[1].addMoles(i, +molarMassTransfer[i]);
        }
        
        return newNode;
    }
    
    
    public static void main(String[] args){
        SystemInterface testSystem = new SystemFurstElectrolyteEos(275.3, 1.01325);
        //SystemInterface testSystem = new SystemSrkEos(275.3, 1.01325);
        ThermodynamicOperations testOps = new ThermodynamicOperations(testSystem);
        PipeData pipe1 = new PipeData(10.0, 0.025);
        
        testSystem.addComponent("methane", 0.061152181, 0);
        testSystem.addComponent("CO2", 0.061152181, 0);
        testSystem.addComponent("water", 0.1862204876, 1);
        testSystem.addComponent("MDEA", 0.08, 1);
        
        testSystem.chemicalReactionInit();
        testSystem.setMixingRule(4);
        testSystem.getChemicalReactionOperations().solveChemEq(1);
        testSystem.init_x_y();
        
        FlowNodeInterface test = new StratifiedFlowNode(testSystem, pipe1);
        test.setInterphaseModelType(1);
        
        test.initFlowCalc();
        test.calcFluxes();
    }
}