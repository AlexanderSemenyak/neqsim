package fluidMechanics.flowNode.onePhaseNode.onePhasePipeFlowNode;

import fluidMechanics.flowNode.*;
import thermo.system.*;
import fluidMechanics.flowNode.onePhaseNode.*;
import thermodynamicOperations.*;
import fluidMechanics.geometryDefinitions.*;
import fluidMechanics.geometryDefinitions.pipe.*;
import MathLib.generalMath.*;
import fluidMechanics.flowNode.fluidBoundary.interphaseTransportCoefficient.interphaseOnePhase.interphasePipeFlow.*;


public class onePhasePipeFlowNode extends onePhaseFlowNode {
    
    
    public onePhasePipeFlowNode(){
    }
    
    public onePhasePipeFlowNode(SystemInterface system, GeometryDefinitionInterface pipe){
        super(system, pipe);
        this.interphaseTransportCoefficient = new InterphasePipeFlow(this);
        phaseOps = new ThermodynamicOperations(this.getBulkSystem());
        phaseOps.TPflash();
        initBulkSystem();
   }
    
    
    public Object clone(){
        onePhasePipeFlowNode clonedSystem = null;
        try{
            clonedSystem = (onePhasePipeFlowNode) super.clone();
        }
        catch(Exception e) {
            e.printStackTrace(System.err);
        }
        return clonedSystem;
    }
    
    public void init(){
        super.init();
    }
    
    public double calcReynoldsNumber(){
        reynoldsNumber[0] =  getVelocity() * pipe.getDiameter() / getBulkSystem().getPhases()[0].getPhysicalProperties().getKinematicViscosity();
        return reynoldsNumber[0];
    }
    
    public static void main(String[] args){
        
        System.out.println("Starter.....");
        SystemSrkEos testSystem = new SystemSrkEos(300.3,200.0);
        
        GeometryDefinitionInterface pipe1 = new PipeData(1,1.025);
        testSystem.addComponent("methane", 50000.0);
        testSystem.addComponent("ethane", 1.0);
        
        testSystem.init(0);
        testSystem.init(1);
        
        FlowNodeInterface[] test = new onePhasePipeFlowNode[100];
        
        test[0] = new onePhasePipeFlowNode(testSystem, pipe1);
        //test[0].setFrictionFactorType(0);
        
        //  test[0].init()
        test[0].initFlowCalc();
        test[0].init();
        //    test[0].getVolumetricFlow();
        System.out.println("flow: " + test[0].getVolumetricFlow() + " velocity: " + test[0].getVelocity() + " reynolds number " + test[0].getReynoldsNumber() + "friction : " + test[0].getWallFrictionFactor());
    }
    
    
    
    
}