/*
 * PipeFlowVisualization.java
 *
 * Created on 26. oktober 2000, 20:09
 */

package fluidMechanics.util.fluidMechanicsVisualization.flowSystemVisualization.onePhaseFlowVisualization.pipeFlowVisualization;


import dataPresentation.*;
import thermo.system.*;
import dataPresentation.JFreeChart.*;
import thermodynamicOperations.*;
import com.jrefinery.chart.*;
import dataPresentation.visAD.visAd2D.*;
import dataPresentation.visAD.visAd3D.*;
import visad.*;
import visad.java2d.DisplayImplJ2D;
import visad.java3d.DisplayImplJ3D;
import java.rmi.RemoteException;
import java.awt.*;
import dataPresentation.visAD.*;
import javax.swing.*;
import java.awt.event.*;
import fluidMechanics.flowSystem.*;

/**
 *
 * @author  esol
 * @version
 */
public class PipeFlowVisualization extends fluidMechanics.util.fluidMechanicsVisualization.flowSystemVisualization.onePhaseFlowVisualization.OnePhaseFlowVisualization {
    
    double[][] pressurePoint = new double[10][10];
    double[][] velocityPoint = new double[10][10];
    double[][] temperaturePoint = new double[10][10];
    double[] xPlace = new double[10];
    double[] timeArray = new double[10];
    visAdInterface plot;
    
    /** Creates new PipeFlowVisualization */
    public PipeFlowVisualization() {
    }
    
    
    public PipeFlowVisualization(int nodes, int timeSteps){
        super(nodes, timeSteps);
    }
    
    
    public void setPoints(){
        pressurePoint = new double[time][flowNodes[0].length];
        temperaturePoint = new double[time][flowNodes[0].length];
        velocityPoint = new double[time][flowNodes[0].length];
        xPlace = new double[flowNodes[0].length];
        timeArray = new double[time];
        
        for(int j=0;j<time;j++){
              timeArray[j] = j;
            for(int i=0;i<flowNodes[j].length;i++){
                xPlace[i] = flowNodes[j][i].getDistanceToCenterOfNode();
                pressurePoint[j][i] = flowNodes[j][i].getPressure(0);
                temperaturePoint[j][i] = flowNodes[j][i].getTemperature(0);
                velocityPoint[j][i] = flowNodes[j][i].getVelocity(0);
              
            }
        }
    }
    
    public void displayResult(String name){
        double[][] points = new double[1][1];
        setPoints();
        
        if(name.equals("pressure")) points = pressurePoint;
        if(name.equals("temperature")) points = temperaturePoint;
        if(name.equals("velocity")) points = velocityPoint;
        
        try{
            System.out.println("points: " + points.length);
            
            if(pressurePoint.length>1){
                System.out.println("3D plot ");
                plot = new visAd3DPlot("title[0]", "title[1]", "title[2]");
                ((visAd3DPlot) plot).setXYvals(150, 160, points[0].length, 10, 20, points.length);
                ((visAd3DPlot) plot).setZvals(points);
            }
            else{
                System.out.println("2D plot ");
                plot = new visAd2dBaseClass("title[1]", "title[2]");
                ((visAd2dBaseClass) plot).setLineXYVals(xPlace, points[0]);
                ((visAd2dBaseClass) plot).setXYVals(xPlace, points[0]);
            }
            plot.init();
        }
        catch(Exception e){
            System.out.println(e.toString());
            System.out.println("plotting failed");
        }
    }
    
    public void createNetCdfFile(String name){
        dataPresentation.fileHandeling.createNetCDF.NetCdf file = new dataPresentation.fileHandeling.createNetCDF.NetCdf();
        file.setOutputFileName(name);
        file.setXvalues(timeArray,"time","sec");
        file.setYvalues(xPlace, "length","meter");
        file.setZvalues(temperaturePoint, "time","sec");
        file.createFile();
    }
    
}
