/*
 * LevenbergMarquardt.java
 *
 * Created on 22. januar 2001, 23:00
 */

package statistics;


import MathLib.JamaLinAlg.*;
import java.util.*;
import statistics.monteCarloSimulation.*;
/**
 *
 * @author  Even Solbraa
 * @version
 */
public abstract class StatisticsBaseClass extends Object implements Cloneable, StatisticsInterface{
    
    protected  SampleSet sampleSet;
    protected double chiSquare=0;
    protected double[][] dyda;
    protected double[] beta;
    protected double[][] alpha;
    protected double[] parameterStandardDeviation, parameterUncertainty;
    protected double multiFactor=0.001;
    protected Matrix coVarianceMatrix;
    
    
    /** Creates new LevenbergMarquardt */
    public StatisticsBaseClass() {
    }
    
    public Object clone(){
        StatisticsBaseClass clonedClass = null;
        try{
            clonedClass = (StatisticsBaseClass) super.clone();
        }
        catch(Exception e) {
            e.printStackTrace(System.err);
        }
        
        clonedClass.sampleSet = (SampleSet) sampleSet.clone();
        
        return clonedClass;
    }
    
    public void setSampleSet(SampleSet sampleSet){
        this.sampleSet = sampleSet;
    }
    
    public StatisticsBaseClass createNewRandomClass(){
        StatisticsBaseClass newClass = (StatisticsBaseClass) this.clone();
        newClass.setSampleSet(this.sampleSet.createNewNormalDistributedSet());
        return newClass;
    }
    
    
    public double calcValue(SampleValue sample){
        return sample.getFunction().calcValue(sample.getDependentValues());
    }
        
    public void setFittingParameters(double[] parameterVals){
        for(int i=0;i<sampleSet.getSamples().length;i++){
            sampleSet.getSample(i).getFunction().setFittingParams(parameterVals);
        }
    }
    
    public void setFittingParameter(int parameterNumber, double parameterVal){
        for(int i=0;i<sampleSet.getSamples().length;i++){
             sampleSet.getSample(i).getFunction().setFittingParams(parameterNumber, parameterVal);
        }
    }
    
    public SampleValue getSample(int i){
        return sampleSet.getSample(i);
    }
    
    public SampleSet getSampleSet(){
        return sampleSet;
    }
    
    public double calcChiSquare(){
        double chiSquare=0;
        for(int i=0;i<sampleSet.getLength();i++){
            chiSquare += Math.pow(( sampleSet.getSample(i).getSampleValue()- this.calcValue(sampleSet.getSample(i)))/ sampleSet.getSample(i).getStandardDeviation(),2.0);
        }
        return chiSquare;
    }
    
    
    public double[][] calcAlphaMatrix(){
        double[][] alpha = new double[sampleSet.getSample(0).getFunction().getFittingParams().length][sampleSet.getSample(0).getFunction().getFittingParams().length];
        for(int i=0;i<alpha.length;i++){
            for(int j=0;j<alpha[0].length;j++){
                for(int k=0;k<sampleSet.getLength();k++){
                    alpha[i][j] = alpha[i][j] + (dyda[k][i]*dyda[k][j])/Math.pow( sampleSet.getSample(k).getStandardDeviation(),2.0);
                    if(i==j) alpha[i][j] = alpha[i][j]*(1+multiFactor);
                }
            }
        }
        return alpha;
    }
    
    public double[] calcBetaMatrix(){
        double[] beta = new double[sampleSet.getSample(0).getFunction().getFittingParams().length];
        for(int i=0;i<beta.length;i++){
            for(int j=0;j<sampleSet.getLength();j++){
                beta[i] = beta[i] + ( sampleSet.getSample(i).getSampleValue()- calcValue( sampleSet.getSample(i)))/Math.pow( sampleSet.getSample(i).getStandardDeviation(),2.0)*dyda[j][i];
            }
        }
        return beta;
    }
    
    public double[][] calcDerivatives(){
        dyda = new double[sampleSet.getLength()][sampleSet.getSample(0).getFunction().getNumberOfFittingParams()];
        
        for(int i=0;i<sampleSet.getLength();i++){
            for(int j=0;j<sampleSet.getSample(0).getFunction().getNumberOfFittingParams();j++){
                dyda[i][j] = NumericalDerivative.calcDerivative(this, i, j);
            }
        }
        return dyda;
    }
    
    public void calcParameterStandardDeviation(){
        parameterStandardDeviation = new double[sampleSet.getSample(0).getFunction().getNumberOfFittingParams()];
        
        for(int j=0;j<sampleSet.getSample(0).getFunction().getNumberOfFittingParams();j++){
            parameterStandardDeviation[j] = 0.0;
            for(int i=0;i<sampleSet.getLength();i++){
                parameterStandardDeviation[j] = parameterStandardDeviation[j] + Math.pow(1.0/dyda[i][j],2.0)*Math.pow( sampleSet.getSample(i).getStandardDeviation(),2.0);
            }
        }
    }
    
    /** Calculates the confidence interval given by 95.4%.
     * See Numerical Recepies in C. p. 697
     */
    public void calcParameterUncertainty(){
        parameterUncertainty = new double[sampleSet.getSample(0).getFunction().getNumberOfFittingParams()];
        for(int j=0;j<sampleSet.getSample(0).getFunction().getNumberOfFittingParams();j++){
            parameterUncertainty[j] = Math.sqrt(4.0)*Math.sqrt(coVarianceMatrix.get(j,j));
        }
    }
    
    public void calcCoVarianceMatrix(){
        double old = multiFactor;
        multiFactor=0.0;
        coVarianceMatrix = new Matrix(alpha).inverse();
        multiFactor=old;
    }
    
    public abstract void init();
    
    
    
    public abstract void solve();
    
    
    public void runMonteCarloSimulation(){
        MonteCarloSimulation montCarlSim = new MonteCarloSimulation(this,30);
        montCarlSim.runSimulation();
    }
}
