/*
 * SampleValue.java
 *
 * Created on 22. januar 2001, 23:01
 */

package statistics;

import java.util.*;
import thermo.system.*;
import thermodynamicOperations.*;
/**
 *
 * @author  Even Solbraa
 * @version
 */
public class SampleValue extends Object implements Cloneable{
    
    protected  BaseFunction testFunction;
    double sampleValue=0;
    double[] dependentValues;
/** Standard deviation of function value
 */
    double standardDeviation=0.0001;
    public SystemInterface system;
    public ThermodynamicOperations thermoOps;
    /** Standard deviation of dependent variables
     */
    double[] standardDeviations;
    
    /** Creates new SampleValue */
    public SampleValue() {
    }
    
    public SampleValue(double sampleValue, double standardDeviation, double[] dependentValues) {
        this.dependentValues = new double[dependentValues.length];
        this.sampleValue = sampleValue;
        this.standardDeviation = standardDeviation;
        for(int i=0;i<dependentValues.length;i++){
            this.dependentValues[i] = dependentValues[i];
        }
    }
    
    public SampleValue(double sampleValue, double standardDeviation, double[] dependentValues, double[] standardDeviations){
        this(sampleValue, standardDeviation, dependentValues);
        this.standardDeviations = standardDeviations;
    }
    
    
    public Object clone(){
        SampleValue clonedValue = null;
        try{
            clonedValue = (SampleValue) super.clone();
        }
        catch(Exception e)
        {
            e.printStackTrace(System.err);
        }
        clonedValue.dependentValues = (double[]) this.dependentValues.clone();
        System.arraycopy(dependentValues,0,clonedValue.dependentValues,0,dependentValues.length);
        
        return clonedValue;
    }
    
    public void setThermodynamicSystem(SystemInterface system){
        this.system = (SystemInterface) system.clone();
        thermoOps = new ThermodynamicOperations(system);
        this.getFunction().setThermodynamicSystem(this.system);
    }
     
    public void setFunction(BaseFunction function){
        testFunction = function;
    }
    
    public FunctionInterface getFunction(){
        return testFunction;
    }
    
    public double getStandardDeviation(){
        return standardDeviation;
    }
    
    public double getStandardDeviation(int i){
        return standardDeviations[i];
    }
    
    public double getSampleValue(){
        return sampleValue;
    }
    
    public double[] getDependentValues(){
        return dependentValues;
    }
    
    public double getDependentValue(int i){
        return dependentValues[i];
    }
    
    public void setDependentValues(double[] vals){
        for(int i=0;i<dependentValues.length;i++){
            this.dependentValues[i] = vals[i];
        }
    }
    
    public void setDependentValue(int i, double val){
        this.dependentValues[i] = val;
    }
    
}
