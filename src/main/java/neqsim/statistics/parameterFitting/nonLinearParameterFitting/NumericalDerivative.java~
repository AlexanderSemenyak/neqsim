/*
 * NumericalDerivative.java
 *
 * Created on 28. juli 2000, 15:39
 */

package statistics.parameterFitting.nonLinearParameterFitting;

import thermo.component.*;
import thermo.phase.*;


/**
 *
 * @author  Even Solbraa
 * @version
 */
public class NumericalDerivative extends Object implements java.io.Serializable {
    
    final static double CON = 1.4;
    final static double CON2 = CON*CON;
    final static double  BIG = 1*Math.pow(10,30);
    final static int NTAB = 100;
    final static double SAFE = 2;
    
    /** Creates new NumericalDerivative */
    public NumericalDerivative() {
    }
    
    
    public static double calcDerivative(LevenbergMarquardt system, int sampleNumber, int parameterNumber){
        
        double errt, fac, hh,ans=0.00001, err=0.0000000001;
        double h= system.getSampleSet().getSample(sampleNumber).getFunction().getFittingParams(parameterNumber)/100;
        if(h==0.0){System.out.println("h must be larger than 0!");}
        double[][] a = new double[NTAB][NTAB];
        
        hh = h;
        double oldFittingParam = system.getSampleSet().getSample(sampleNumber).getFunction().getFittingParams(parameterNumber);
        system.getSampleSet().getSample(sampleNumber).getFunction().setFittingParams(parameterNumber, system.getSampleSet().getSample(sampleNumber).getFunction().getFittingParams(parameterNumber)+hh);
        double val1 = system.calcValue(system.getSample(sampleNumber));
        system.getSampleSet().getSample(sampleNumber).getFunction().setFittingParams(parameterNumber, oldFittingParam);
        system.getSampleSet().getSample(sampleNumber).getFunction().setFittingParams(parameterNumber, system.getSampleSet().getSample(sampleNumber).getFunction().getFittingParams(parameterNumber)-hh);
        double val2 = system.calcValue(system.getSample(sampleNumber));
        system.getSampleSet().getSample(sampleNumber).getFunction().setFittingParams(parameterNumber, oldFittingParam);
        
        a[0][0] = (val1 - val2) / (2*hh);
        err = BIG;
        
        for (int i=1;i<=NTAB-1;i++){
            hh/=CON;
            
            oldFittingParam = system.getSampleSet().getSample(sampleNumber).getFunction().getFittingParams(parameterNumber);
            system.getSampleSet().getSample(sampleNumber).getFunction().setFittingParams(parameterNumber, system.getSampleSet().getSample(sampleNumber).getFunction().getFittingParams(parameterNumber)+hh);
            val1 = system.calcValue(system.getSample(sampleNumber));
            system.getSampleSet().getSample(sampleNumber).getFunction().setFittingParams(parameterNumber, oldFittingParam);
            system.getSampleSet().getSample(sampleNumber).getFunction().setFittingParams(parameterNumber, system.getSampleSet().getSample(sampleNumber).getFunction().getFittingParams(parameterNumber)-hh);
            val2 = system.calcValue(system.getSample(sampleNumber));
            system.getSampleSet().getSample(sampleNumber).getFunction().setFittingParams(parameterNumber, oldFittingParam);
            
            a[0][i] = (val1 - val2) / (2*hh);
            fac = CON2;
            for(int j=1;j<=i;j++){
                a[j][i] =(a[j-1][i]*fac-a[j-1][i-1])/(fac-1.0);
                fac = CON2*fac;
                errt= Math.max(Math.abs(a[j][i]-a[j-1][i]),Math.abs(a[j][i]-a[j-1][i-1]));
                // System.out.println("errt : " +errt);
                
                
                if(errt<=err){
                    err=errt;
                    ans=a[j][i];
                }
                // System.out.println("ans " + ans);
            }
            
            if(Math.abs(a[i][i]-a[i-1][i-1])>=SAFE*err) break;
        }
        //     System.out.println("ans " + ans);
        return ans;
    }
    
}