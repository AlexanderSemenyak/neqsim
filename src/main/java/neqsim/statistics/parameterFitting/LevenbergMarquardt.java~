/*
 * LevenbergMarquardt.java
 *
 * Created on 22. januar 2001, 23:00
 */

package statistics.parameterFitting;


import MathLib.JamaLinAlg.*;
import statistics.*;
/**
 *
 * @author  Even Solbraa
 * @version
 */
public class LevenbergMarquardt extends StatisticsBaseClass {
        double oldChiSquare=0;
        double newChiSquare=0;
    /** Creates new LevenbergMarquardt */
    public LevenbergMarquardt() {
    }
        
   public Object clone(){
         LevenbergMarquardt clonedClass = null;
        try{
            clonedClass = ( LevenbergMarquardt) super.clone();
        }
        catch(Exception e)
        {
            e.printStackTrace(System.err);
        }
        
        return clonedClass;
    }

    
    public void init(){
        chiSquare = calcChiSquare();
        //System.out.println("Chi square: "+ chiSquare);
        dyda = calcDerivatives();
        beta = calcBetaMatrix();
        alpha = calcAlphaMatrix();
    }
    
    public void solve(){
        //        System.out.println("starter solve");
        int n=0;
       
        do{
            n++;
            init();
            
            Matrix betaMatrix = new Matrix(beta,1).transpose();
            Matrix alphaMatrix = new Matrix(alpha);
            Matrix solvedMatrix = alphaMatrix.solve(betaMatrix);
            
            oldChiSquare = chiSquare;
            Matrix oldParameters = new Matrix(sampleSet.getSample(0).getFunction().getFittingParams(),1);
            Matrix newParameters = oldParameters.plus(solvedMatrix.transpose());
            
            this.setFittingParameters(newParameters.getArray()[0]);
            
            newChiSquare = calcChiSquare();
            if(newChiSquare>=oldChiSquare){
                multiFactor=multiFactor*10.0;
                this.setFittingParameters(oldParameters.getArray()[0]);
            }
            else
            {
                multiFactor=multiFactor/10.0;
                
            }
        }
        while((Math.abs(newChiSquare-oldChiSquare)>1e-3) || (n<5));
        
        System.out.println("iterations: " + n);
        System.out.println("Chi square: "+ newChiSquare);
        System.out.println("");
        System.out.println("parameters: ");
        Matrix oldParameters2 = new Matrix(sampleSet.getSamples()[0].getFunction().getFittingParams(),1);
        oldParameters2.print(2,10);
        
        System.out.println("");
        System.out.println("Parameter std deviation : ");
        calcParameterStandardDeviation();
        Matrix parameterStdDevMatrix = new Matrix(parameterStandardDeviation,1);
        parameterStdDevMatrix.print(2,10);
        
        System.out.println("");
        System.out.println("Co-variance matrix : ");
        calcCoVarianceMatrix();
        coVarianceMatrix.print(2,10);
        
        System.out.println("");
        System.out.println("Parameter uncertanty : ");
        calcParameterUncertainty();
        Matrix parameterUncertaintyMatrix = new Matrix(parameterUncertainty,1);
        parameterUncertaintyMatrix.print(2,10);
        
    }
    
    
    
    
    public static void main(String[] args){
      /*  LevenbergMarquardt optim = new LevenbergMarquardt();
        TestFunction testFunction = new TestFunction();
      //  optim.setFunction(testFunction);
        
        SampleValue[] sample = new SampleValue[3];
        double sample1[] = { 6 };
        sample[0] = new SampleValue(8.5,0.1,sample1);
        double sample2[] = { 4 };
        sample[1] = new SampleValue(5.5,0.1,sample2);
        double sample3[] = { 4 };
        sample[2] = new SampleValue(5.51,0.1,sample3);
        
        SampleSet sampleSet = new SampleSet(sample);
        sampleSet = sampleSet.createNewNormalDistributedSet();
        optim.setSampleSet(sampleSet);
       // optim.solve();    
        optim.runMonteCarloSimulation();*/
    }
    
}
