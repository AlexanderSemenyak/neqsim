/*
 * Conductivity.java
 *
 * Created on 1. november 2000, 19:00
 */

package physicalProperties.physicalPropertyMethods.liquidPhysicalProperties.diffusivity;


import physicalProperties.*;
/**
 *
 * @author  Even Solbraa
 * @version
 */
public class Diffusivity  extends physicalProperties.physicalPropertyMethods.liquidPhysicalProperties.LiquidPhysicalPropertyMethod implements physicalProperties.physicalPropertyMethods.methodInterface.DiffusivityInterface, Cloneable{
    
    double[][] binaryDiffusionCoeffisients;
    /** Creates new Conductivity */
    
    public Diffusivity() {
    }
    
    public Diffusivity(physicalProperties.physicalPropertySystem.PhysicalPropertiesInterface liquidPhase) {
        super(liquidPhase);
        binaryDiffusionCoeffisients = new double[liquidPhase.getPhase().getNumberOfComponents()][liquidPhase.getPhase().getNumberOfComponents()];
    }
    
    public Object clone(){
        Diffusivity properties = null;
        
        try{
            properties = (Diffusivity) super.clone();
        }
        catch(Exception e) {
            e.printStackTrace(System.err);
        }
        
        properties.binaryDiffusionCoeffisients = (double[][]) this.binaryDiffusionCoeffisients.clone();
        for(int i=0;i<liquidPhase.getPhase().getNumberOfComponents();i++){
            for(int j=0;j<liquidPhase.getPhase().getNumberOfComponents();j++){
                properties.binaryDiffusionCoeffisients[i][j] =  this.binaryDiffusionCoeffisients[i][j];
            }
        }
        return properties;
    }
    
    public double calcBinaryDiffusionCoefficient(int i, int j, int method){
        // method - estimation method
        // if(method==? then)
        binaryDiffusionCoeffisients[i][j] = 1.0e-4*2.98e-7 * Math.pow(liquidPhase.getPureComponentViscosity(j), -1.026) *
        Math.pow(1.0/liquidPhase.getPhase().getComponents()[i].getNormalLiquidDensity()*liquidPhase.getPhase().getComponents()[i].getMolarMass()*1000,-0.5473)*liquidPhase.getPhase().getTemperature();
        return binaryDiffusionCoeffisients[i][j];
    }
    
  /*  public void calcDiffusionCoeffisients(){
        double tempVar=0 , tempVar2=0;
   
        for(int i = 0; i < liquidPhase.phase.getNumberOfComponents(); i++) {
            for(int j = 0; j < liquidPhase.phase.getNumberOfComponents(); j++) {
   
                liquidPhase.binaryDiffusionCoeffisients[i][j] = 1.0e-4*2.98e-7 * Math.pow(liquidPhase.pureComponentViscosity[j], -1.026) *
                Math.pow(1.0/liquidPhase.phase.getComponents()[i].getNormalLiquidDensity()*liquidPhase.phase.getComponents()[i].getMolarMass()*1000,-0.5473)*liquidPhase.phase.getTemperature();
   
                if(liquidPhase.phase.getComponents()[i].getNormalLiquidDensity()==0) liquidPhase.binaryDiffusionCoeffisients[i][j]=1e-9;
   
                if(liquidPhase.binaryDiffusionCoeffisients[i][j] < 0.5e-9) liquidPhase.binaryDiffusionCoeffisients[i][j]=0.5e-9;
            }
        }
    }
   */
    public double[][] calcDiffusionCoeffisients(int binaryDiffusionCoefficientMethod , int multicomponentDiffusionMethod){
        double tempVar=0 , tempVar2=0;
        
        for(int i = 0; i < liquidPhase.getPhase().getNumberOfComponents(); i++) {
            for(int j = 0; j < liquidPhase.getPhase().getNumberOfComponents(); j++) {
                binaryDiffusionCoeffisients[i][j] =  calcBinaryDiffusionCoefficient(i, j, binaryDiffusionCoefficientMethod);
                
                if(liquidPhase.getPhase().getComponents()[i].getNormalLiquidDensity()==0) binaryDiffusionCoeffisients[i][j]=1e-9;
                
                if(binaryDiffusionCoeffisients[i][j] < 0.5e-9) binaryDiffusionCoeffisients[i][j]=0.5e-9;
                System.out.println("diff liq " + binaryDiffusionCoeffisients[i][j]);
            }
        }
        
        if(multicomponentDiffusionMethod==0){
            // ok use full matrix
        }
        else if(multicomponentDiffusionMethod==0){
            calcEffectiveDiffusionCoeffisients();
        }
        
        return binaryDiffusionCoeffisients;
    }
    
    public void calcEffectiveDiffusionCoeffisients(){
        double sum=0;
        
        for(int i = 0; i < liquidPhase.getPhase().getNumberOfComponents(); i++) {
            sum = 0;
            for(int j = 0; j < liquidPhase.getPhase().getNumberOfComponents(); j++) {
                if(i==j){
                }
                else{
                    sum += liquidPhase.getPhase().getComponents()[j].getx()/binaryDiffusionCoeffisients[i][j];
                    binaryDiffusionCoeffisients[i][j] = 0;
                }
            }
            binaryDiffusionCoeffisients[i][i] = (1.0-liquidPhase.getPhase().getComponents()[i].getx())/sum;
        }
    }
    
    public double getBinaryDiffusionCoefficient(int i, int j){
        return binaryDiffusionCoeffisients[i][j];
    }
    
}
