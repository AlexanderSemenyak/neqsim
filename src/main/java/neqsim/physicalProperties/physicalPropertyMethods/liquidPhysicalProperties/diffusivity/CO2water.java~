/*
 * Conductivity.java
 *
 * Created on 1. november 2000, 19:00
 */

package physicalProperties.physicalPropertyMethods.liquidPhysicalProperties.diffusivity;


import physicalProperties.*;
/**
 *
 * @author  Even Solbraa
 * @version
 */
public class CO2water extends Diffusivity{
    
    /** Creates new Conductivity */
    
    public CO2water() {
    }
    
    public CO2water(physicalProperties.physicalPropertySystem.PhysicalPropertiesInterface liquidPhase) {
        super(liquidPhase);
    }
    
    // aqueous correlation
    public double calcBinaryDiffusionCoefficient(int i, int j, int method){
        // method - estimation method
        // if(method==? then)
        // remember this is the Maxwell-Stefan diffusion coefficients
        binaryDiffusionCoeffisients[i][j] = 1.0e-4*2.98e-7 * Math.pow(liquidPhase.getPureComponentViscosity(j), -1.026) *
        Math.pow(1.0/liquidPhase.getPhase().getComponents()[i].getNormalLiquidDensity()*liquidPhase.getPhase().getComponents()[i].getMolarMass()*1000,-0.5473)*liquidPhase.getPhase().getTemperature();
        return binaryDiffusionCoeffisients[i][j];
    }
    
    // non-aqueous correlation
    public double calcBinaryDiffusionCoefficient2(int i, int j, int method){
        // method - estimation method
        // if(method==? then)
        // remember this is the Maxwell-Stefan diffusion coefficients
        binaryDiffusionCoeffisients[i][j] = 1.0e-4*9.89e-8 * Math.pow(liquidPhase.getPureComponentViscosity(j), -0.907) *
        Math.pow(1.0/liquidPhase.getPhase().getComponents()[i].getNormalLiquidDensity()*liquidPhase.getPhase().getComponents()[i].getMolarMass()*1000,-0.45)*Math.pow(1.0/liquidPhase.getPhase().getComponents()[j].getNormalLiquidDensity()*liquidPhase.getPhase().getComponents()[j].getMolarMass()*1000,0.265)*liquidPhase.getPhase().getTemperature();
        return binaryDiffusionCoeffisients[i][j];
    }
    
}
