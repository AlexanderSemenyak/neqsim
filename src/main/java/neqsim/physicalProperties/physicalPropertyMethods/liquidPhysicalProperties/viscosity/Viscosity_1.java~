/*
 * Conductivity.java
 *
 * Created on 1. november 2000, 19:00
 */

package physicalProperties.physicalPropertyMethods.liquidPhysicalProperties.viscosity;


import physicalProperties.*;
/**
 *
 * @author  Even Solbraa
 * @version
 * Method was checked on 2.8.2001 - seems to be correct - Even Solbraa
 */
public class Viscosity extends physicalProperties.physicalPropertyMethods.liquidPhysicalProperties.LiquidPhysicalPropertyMethod implements physicalProperties.physicalPropertyMethods.methodInterface.ViscosityInterface{
    
    public double[] pureComponentViscosity;
    public double[][] Gij;
    /** Creates new Conductivity */
    public Viscosity() {
    }
    
    public Viscosity(physicalProperties.physicalPropertySystem.PhysicalPropertiesInterface liquidPhase) {
        super(liquidPhase);
        pureComponentViscosity = new double[liquidPhase.getPhase().getNumberOfComponents()];
        Gij = new double[liquidPhase.getPhase().getNumberOfComponents()][liquidPhase.getPhase().getNumberOfComponents()];
    }
    
    public Object clone(){
        Viscosity properties = null;
        
        try{
            properties = (Viscosity) super.clone();
        }
        catch(Exception e) {
            e.printStackTrace(System.err);
        }
        
        return properties;
    }
    
    public double calcViscosity(){
        double tempVar=0 , tempVar2=0;
        double viscosity=0;
        this.calcPureComponentViscosity();
        
        // method og Grunberg and Nissan [87]
        for(int i = 0; i < liquidPhase.getPhase().getNumberOfComponents(); i++) {
            tempVar += liquidPhase.getPhase().getComponents()[i].getx()*Math.log(pureComponentViscosity[i]);
            
        }
        tempVar2 = 0;
        for(int i = 0; i < liquidPhase.getPhase().getNumberOfComponents(); i++) {
            for(int j = 0; j < liquidPhase.getPhase().getNumberOfComponents(); j++) {
                tempVar2 += liquidPhase.getPhase().getComponents()[i].getx()*liquidPhase.getPhase().getComponents()[j].getx()*liquidPhase.getMixingRule().getViscosityGij(i,j);
            }
        }
        
        viscosity =  Math.exp(tempVar + tempVar2)/1.0e3; //N-sek/m2
        return viscosity ;
    }
    
    public void calcPureComponentViscosity(){
        for(int i = 0; i < liquidPhase.getPhase().getNumberOfComponents(); i++) {
            
            if(liquidPhase.getPhase().getTemperature()>liquidPhase.getPhase().getComponents()[i].getTC()){
                pureComponentViscosity[i] = 5.0e-1;
            }
            else{
                if(liquidPhase.getPhase().getComponents()[i].getLiquidViscosityModel()==1){
                    pureComponentViscosity[i] = liquidPhase.getPhase().getComponents()[i].getLiquidViscosityParameter(0)*Math.pow(liquidPhase.getPhase().getTemperature(), liquidPhase.getPhase().getComponents()[i].getLiquidViscosityParameter(1));
                }
                else if(liquidPhase.getPhase().getComponents()[i].getLiquidViscosityModel()==2){
                    pureComponentViscosity[i]=Math.exp(liquidPhase.getPhase().getComponents()[i].getLiquidViscosityParameter(0)+liquidPhase.getPhase().getComponents()[i].getLiquidViscosityParameter(1)/liquidPhase.getPhase().getTemperature());
                }
                else if(liquidPhase.getPhase().getComponents()[i].getLiquidViscosityModel()==3){
                    pureComponentViscosity[i]=Math.exp(liquidPhase.getPhase().getComponents()[i].getLiquidViscosityParameter(0)+liquidPhase.getPhase().getComponents()[i].getLiquidViscosityParameter(1)/liquidPhase.getPhase().getTemperature()+liquidPhase.getPhase().getComponents()[i].getLiquidViscosityParameter(2)*liquidPhase.getPhase().getTemperature()+liquidPhase.getPhase().getComponents()[i].getLiquidViscosityParameter(3)/liquidPhase.getPhase().getTemperature()+liquidPhase.getPhase().getComponents()[i].getLiquidViscosityParameter(3)*Math.pow(liquidPhase.getPhase().getTemperature(),2));
                }
                else{
                    System.out.println("no pure component viscosity model defined for component " + liquidPhase.getPhase().getComponents()[i].getComponentName());
                    pureComponentViscosity[i]=7.0e-1;
                }
            }
            
        }
    }
    
    public double getPureComponentViscosity(int i){
        return pureComponentViscosity[i];
    }
}
