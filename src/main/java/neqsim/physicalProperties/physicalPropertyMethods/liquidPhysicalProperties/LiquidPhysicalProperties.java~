/*
 * LiquidPhysicalProperties.java
 *
 * Created on 29. oktober 2000, 16:17
 */

package physicalProperties.physicalPropertyMethods.liquidPhysicalProperties;

import physicalProperties.*;
import thermo.phase.*;
import physicalProperties.liquidPhysicalProperties.conductivitty.*;
import physicalProperties.liquidPhysicalProperties.viscosity.*;
import physicalProperties.liquidPhysicalProperties.diffusivity.*;
import physicalProperties.liquidPhysicalProperties.density.*;
/**
 *
 * @author  Even Solbraa
 * @version
 */
public class LiquidPhysicalProperties extends PhysicalProperties {
    
    
    
    public LiquidPhysicalProperties() {
    }
    
    public LiquidPhysicalProperties(PhaseInterface phase, int binaryDiffusionCoefficientMethod, int multicomponentDiffusionMethod) {
        super(phase, binaryDiffusionCoefficientMethod, multicomponentDiffusionMethod);
        omegaVisc = new double[phase.getNumberOfComponents()];
        pureComponentConductivity = new double[phase.getNumberOfComponents()];
        pureComponentViscosity = new double[phase.getNumberOfComponents()];
        binaryDiffusionCoeffisients = new double[phase.getNumberOfComponents()][phase.getNumberOfComponents()];
        binaryMolecularDiameter = new double[phase.getNumberOfComponents()][phase.getNumberOfComponents()];
        binaryMolecularMass = new double[phase.getNumberOfComponents()][phase.getNumberOfComponents()];
        binaryEnergyParameter = new double[phase.getNumberOfComponents()][phase.getNumberOfComponents()];
        binaryLennardJonesOmega = new double[phase.getNumberOfComponents()][phase.getNumberOfComponents()];
        Fc = new double[phase.getNumberOfComponents()];
        conductivityNew = new Conductivity(this);
        viscosityNew = new Viscosity(this);
        diffusivityNew = new Diffusivity(this);
        densityNew = new Density(this);
        init();
    }
    
    public Object clone(){
        LiquidPhysicalProperties properties = null;
        
        try{
            properties = (LiquidPhysicalProperties) super.clone();
        }
        catch(Exception e) {
            e.printStackTrace(System.err);
        }
        return properties;
    }
    
    
    public void init(){
        
        for(int i = 0; i < phase.getNumberOfComponents(); i++) {
            pureComponentConductivity[i] = 1.0/phase.getComponents()[i].getMolarMass()*pureComponentViscosity[i]*1e-7 *phase.getComponents()[i].getCv0(phase.getTemperature())*3.75*tempAlpha/(phase.getComponents()[i].getCv0(phase.getTemperature())/R);
        }
        
        super.init();
        
    }
    
    
}
