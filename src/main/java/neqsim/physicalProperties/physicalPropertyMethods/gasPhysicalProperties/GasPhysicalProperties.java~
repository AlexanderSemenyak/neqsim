/*
 * GasPhysicalProperties.java
 *
 * Created on 29. oktober 2000, 16:18
 */

package physicalProperties.PhysicalPropertyMethods.gasPhysicalProperties;

import physicalProperties.*;
import thermo.phase.*;
import thermo.*;
import physicalProperties.gasPhysicalProperties.conductivitty.*;
import physicalProperties.gasPhysicalProperties.viscosity.*;
import physicalProperties.gasPhysicalProperties.diffusivity.*;
import physicalProperties.gasPhysicalProperties.density.*;

/**
 *
 * @author  Even Solbraa
 * @version
 */
public class GasPhysicalProperties extends PhysicalProperties {
    
    
    protected double chungE[] = new double[10];
    protected double[][] chungHPcoefs = {
        {6.324,     50.412,     -51.680,    1189.0},
        {1.210e-3,  -1.154e-3,  -6.257e-3,  0.03728},
        {5.283,  254.209,  -168.48,  3898.0},
        {6.623,  38.096,  -8.464,  31.42},
        {19.745,  7.630,  -14.354,  31.53},
        {-1.9,  -12.537,  4.985,  -18.15},
        {24.275,  3.450,  -11.291,  69.35},
        {0.7972,  1.117,  0.01235,  -4.117},
        {-0.2382,  0.06770,  -0.8163,  4.025},
        {0.06863,  0.3479,  0.5926,  -0.727}};
        /** Creates new GasPhysicalProperties */
        
        public GasPhysicalProperties() {
        }
        
        public GasPhysicalProperties(PhaseInterface phase, int binaryDiffusionCoefficientMethod, int multicomponentDiffusionMethod) {
            super(phase, binaryDiffusionCoefficientMethod, multicomponentDiffusionMethod);
            relativeViscosity = new double[phase.getNumberOfComponents()];
            omegaVisc = new double[phase.getNumberOfComponents()];
            pureComponentConductivity = new double[phase.getNumberOfComponents()];
            pureComponentViscosity = new double[phase.getNumberOfComponents()];
            binaryDiffusionCoeffisients = new double[phase.getNumberOfComponents()][phase.getNumberOfComponents()];
            binaryMolecularDiameter = new double[phase.getNumberOfComponents()][phase.getNumberOfComponents()];
            binaryMolecularMass = new double[phase.getNumberOfComponents()][phase.getNumberOfComponents()];
            binaryEnergyParameter = new double[phase.getNumberOfComponents()][phase.getNumberOfComponents()];
            binaryLennardJonesOmega = new double[phase.getNumberOfComponents()][phase.getNumberOfComponents()];
            Fc = new double[phase.getNumberOfComponents()];
            conductivityNew = new Conductivity(this);
            viscosityNew = new Viscosity(this);
            diffusivityNew = new Diffusivity(this);
            densityNew = new Density(this);
            /*
            for(int i = 0; i < phase.getNumberOfComponents(); i++) {
                relativeViscosity[i] = 131.3*phase.getComponents()[i].getDebyeDipoleMoment()/Math.sqrt(phase.getComponents()[i].getCriticalVolume()*phase.getComponents()[i].getTC());
                Fc[i] = 1-0.2756*phase.getComponents()[i].getAcentricFactor()+0.059035*Math.pow(relativeViscosity[i],4)+phase.getComponents()[i].getViscosityCorrectionFactor();
                for(int j = 0; j < 10; j++) {
                    chungE[j] = chungHPcoefs[j][0] + chungHPcoefs[j][1]*phase.getComponents()[i].getAcentricFactor() + chungHPcoefs[j][2]*Math.pow(relativeViscosity[i],4)+chungHPcoefs[j][3]*phase.getComponents()[i].getViscosityCorrectionFactor();
                }
            }
             */
            this.init();
        }
        
        
        public Object clone(){
            GasPhysicalProperties properties = null;
            
            try{
                properties = (GasPhysicalProperties) super.clone();
            }
            catch(Exception e) {
                e.printStackTrace(System.err);
            }
            return properties;
        }
        
        
        public void init(){
            double tempVar2=0;
            double A= 1.16145, B= 0.14874, C=0.52487, D=0.77320, E=2.16178, F=2.43787;
            double A2= 1.06036, B2= 0.15610, C2=0.19300, D2=0.47635, E2=1.03587, F2=1.52996, G2=1.76474, H2=3.89411;
            
            for(int i = 0; i < phase.getNumberOfComponents(); i++) {
                for(int j = 0; j < phase.getNumberOfComponents(); j++) {
                    binaryMolecularMass[i][j] = 2.0*Math.pow((1.0/phase.getComponents()[i].getMolarMass()/1000.0+1.0/phase.getComponents()[j].getMolarMass()/1000.0),-1.0);
                    binaryMolecularDiameter[i][j] = (phase.getComponents()[i].getLennardJonesMolecularDiameter()+phase.getComponents()[j].getLennardJonesMolecularDiameter())/2.0;
                    binaryEnergyParameter[i][j] = Math.pow(phase.getComponents()[i].getLennardJonesEnergyParameter()*phase.getComponents()[j].getLennardJonesEnergyParameter(),0.5);
                    tempVar2 =  phase.getTemperature()/binaryEnergyParameter[i][j];
                    binaryLennardJonesOmega[i][j] = A2/Math.pow(tempVar2,B2)+C2/Math.exp(D2*tempVar2)+E2/Math.exp(F2*tempVar2)+G2/Math.exp(H2*tempVar2);
                }
            }
            
            this.initChungPureComponentViscosity();
            this.initPureComponentConductivity();
            
            // important that this init() is done at the end of the method
            super.init();
            
            //       System.out.println("Condoctivity: " + conductivity + "  Viscosity: " + viscosity + "  Kinematic viscosity: " + kinematicViscosity);
            
        }
        
        public void initPureComponentConductivity(){
            double tempVar2=0;
            
            for(int i = 0; i < phase.getNumberOfComponents(); i++) {
                // pure component conductivity
                tempVar2 = phase.getComponents()[i].getCv0(phase.getTemperature())/R - 1.5;
                tempBeta = 0.7862 - 0.7109*phase.getComponents()[i].getAcentricFactor()+1.3168*Math.pow(phase.getComponents()[i].getAcentricFactor(),2.0);
                tempZ = 2.0 + 10.5*Math.pow(phase.getTemperature()/phase.getComponents()[i].getTC(),2.0);
                tempAlpha = 1.0 + tempVar2 * ( (0.215+0.28288*tempVar2-1.061* tempBeta + 0.26665*tempZ)/(0.6366 + tempBeta * tempZ + 1.061*tempVar2*tempBeta));
                pureComponentConductivity[i] = 1.0/phase.getComponents()[i].getMolarMass()*pureComponentViscosity[i]*1e-7 *phase.getComponents()[i].getCv0(phase.getTemperature())*3.75*tempAlpha/(phase.getComponents()[i].getCv0(phase.getTemperature())/R);
                
            }
        }
        
        public void initChungPureComponentViscosity(){
            double tempVar=0;
            double A= 1.16145, B= 0.14874, C=0.52487, D=0.77320, E=2.16178, F=2.43787;
            double A2= 1.06036, B2= 0.15610, C2=0.19300, D2=0.47635, E2=1.03587, F2=1.52996, G2=1.76474, H2=3.89411;
            double chungy=0, chungG1=0, chungG2=0, chungviskstartstar=0, chungviskstar=0;
            
            for(int i = 0; i < phase.getNumberOfComponents(); i++) {
                // eq. 9-4.11 TPoLG
                relativeViscosity[i] = 131.3*phase.getComponents()[i].getDebyeDipoleMoment()/Math.sqrt(phase.getComponents()[i].getCriticalVolume()*phase.getComponents()[i].getTC());
                // eq. 9-4.10 TPoLG
                Fc[i] = 1.0-0.2756*phase.getComponents()[i].getAcentricFactor()+0.059035*Math.pow(relativeViscosity[i],4)+phase.getComponents()[i].getViscosityCorrectionFactor();
                
                for(int j = 0; j < 10; j++) {
                    // Table 9-5 TPoLG
                    chungE[j] = chungHPcoefs[j][0] + chungHPcoefs[j][1]*phase.getComponents()[i].getAcentricFactor() + chungHPcoefs[j][2]*Math.pow(relativeViscosity[i],4)+chungHPcoefs[j][3]*phase.getComponents()[i].getViscosityCorrectionFactor();
                }
                
                // eq. 9-4.8 TPoLG (The properties of Liquids and Gases)
                tempVar = 1.2593*phase.getTemperature()/phase.getComponents()[i].getTC();
                // eq. 9.4.3 TPoLG
                omegaVisc[i] = A*Math.pow(tempVar,-B)+C*Math.exp(-D*tempVar)+E*Math.exp(-F*tempVar);
                // eq. 9-6.18 TPoLG
                chungy = 0.1/(phase.getMolarVolume())*phase.getComponents()[i].getCriticalVolume()/6.0;
                // eq. 9-6.19 TPoLG
                chungG1 = (1.0-0.5*chungy)/Math.pow((1.0-chungy),3.0);
                // eq. 9-6.20 TPoLG
                chungG2 = (chungE[0]*(((1.0-Math.exp(-chungE[3]*chungy))/chungy)) + chungE[1]*chungG1*Math.exp(chungE[4]*chungy)+ chungE[2]*chungG1)/(chungE[0]*chungE[3]+chungE[1]+chungE[2]);
                // eq. 9-6.21 TPoLG
                chungviskstartstar = chungE[6]*chungy*chungy*chungG2*Math.exp(chungE[7]+chungE[8]/tempVar+chungE[9]*Math.pow(tempVar,-2.0));
                // eq. 9-6.17 TPoLG
                chungviskstar = Math.sqrt(tempVar)/omegaVisc[i] * (Fc[i]*(1.0/chungG2+chungE[5]*chungy))+chungviskstartstar;
                pureComponentViscosity[i] = chungviskstar*36.344*Math.pow(phase.getComponents()[i].getMolarMass()*1000*phase.getComponents()[i].getTC(),0.5)/(Math.pow(phase.getComponents()[i].getCriticalVolume(),0.66667));
            }
        }
        
        
}
