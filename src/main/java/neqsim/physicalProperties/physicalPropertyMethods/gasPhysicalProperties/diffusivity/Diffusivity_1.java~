/*
 * Conductivity.java
 *
 * Created on 1. november 2000, 19:00
 */

package physicalProperties.physicalPropertyMethods.gasPhysicalProperties.diffusivity;


import physicalProperties.*;

/**
 *
 * @author  Even Solbraa
 * @version
 */
public class Diffusivity extends physicalProperties.physicalPropertyMethods.gasPhysicalProperties.GasPhysicalPropertyMethod implements physicalProperties.physicalPropertyMethods.methodInterface.DiffusivityInterface{
    
    double[][] binaryDiffusionCoeffisients, binaryLennardJonesOmega;
    
    /** Creates new Conductivity */
    public Diffusivity() {
    }
    
    public Diffusivity(physicalProperties.physicalPropertySystem.PhysicalPropertiesInterface gasPhase) {
        super(gasPhase);
        binaryDiffusionCoeffisients = new double[gasPhase.getPhase().getNumberOfComponents()][gasPhase.getPhase().getNumberOfComponents()];
        binaryLennardJonesOmega = new double[gasPhase.getPhase().getNumberOfComponents()][gasPhase.getPhase().getNumberOfComponents()];
    }
    
    public double calcBinaryDiffusionCoefficient(int i, int j, int method){
        // method - estimation method
        // if(method==? then)
        double A2= 1.06036, B2= 0.15610, C2=0.19300, D2=0.47635, E2=1.03587, F2=1.52996, G2=1.76474, H2=3.89411;
        double tempVar2 =  gasPhase.getPhase().getTemperature()/binaryEnergyParameter[i][j];
        binaryLennardJonesOmega[i][j] = A2/Math.pow(tempVar2,B2)+C2/Math.exp(D2*tempVar2)+E2/Math.exp(F2*tempVar2)+G2/Math.exp(H2*tempVar2);
        binaryDiffusionCoeffisients[i][j] = 0.00266*Math.pow(gasPhase.getPhase().getTemperature(),1.5)/(gasPhase.getPhase().getPressure()*
        Math.sqrt(binaryMolecularMass[i][j])*Math.pow(binaryMolecularDiameter[i][j],2)*binaryLennardJonesOmega[i][j]);
        return binaryDiffusionCoeffisients[i][j] =  binaryDiffusionCoeffisients[i][j]*1e-4;
    }
    
    public double[][] calcDiffusionCoeffisients(int binaryDiffusionCoefficientMethod , int multicomponentDiffusionMethod){
        
        for(int i = 0; i < gasPhase.getPhase().getNumberOfComponents(); i++) {
            for(int j = 0; j < gasPhase.getPhase().getNumberOfComponents(); j++) {
                binaryDiffusionCoeffisients[i][j] =  calcBinaryDiffusionCoefficient(i, j, binaryDiffusionCoefficientMethod);
//                System.out.println("diff: " + binaryDiffusionCoeffisients[i][j]);
            }
        }
        
        if(multicomponentDiffusionMethod==0){
            // ok use full matrix
        }
        else if(multicomponentDiffusionMethod==0){
            //calcEffectiveDiffusionCoeffisients();
        }
        return binaryDiffusionCoeffisients;
    }
    
    public double getBinaryDiffusionCoefficient(int i, int j){
        return binaryDiffusionCoeffisients[i][j];
    }
    
    public void calcEffectiveDiffusionCoeffisients(){
        double sum=0;
        
        for(int i = 0; i < gasPhase.getPhase().getNumberOfComponents(); i++) {
            sum = 0;
            for(int j = 0; j < gasPhase.getPhase().getNumberOfComponents(); j++) {
                if(i==j){
                }
                else{
                    sum += gasPhase.getPhase().getComponents()[j].getx()/binaryDiffusionCoeffisients[i][j];
                    binaryDiffusionCoeffisients[i][j] = 0;
                }
            }
            binaryDiffusionCoeffisients[i][i] = (1.0-gasPhase.getPhase().getComponents()[i].getx())/sum;
        }
    }
    
    
    
    
}
