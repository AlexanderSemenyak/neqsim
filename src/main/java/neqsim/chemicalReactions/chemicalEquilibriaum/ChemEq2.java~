package thermo.chemEquilibrium;

import javax.swing.*;
import java.awt.*;
import java.applet.*;
import MathLib.JamaLinAlg.*;
//import Jama.*;

public class ChemEq2
{
	    int NSPEC=10, NELE=3;
		double R=8.314;
		Matrix x_solve;
			
		double T = 3500, P = 51.0, n_t=0.0, agemo=0, kronDelt=0;

	    double [][] M_matrix = new double[NSPEC][NSPEC];
		Matrix M_Jama_matrix;
		Matrix A_Jama_matrix;
		Matrix nmu;
		Matrix AMA_matrix; // = new double[NELE][NELE];
		Matrix dn_matrix;
		Matrix AMU_matrix;
		double d_n[] = new double[NSPEC];

		double [][] A_matrix = {{1.0,2.0,2.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0},{0.0,0.0,0.0,1.0,2.0,1.0,1.0,0.0,0.0,0.0},{0.0,0.0,1.0,0.0,0.0,0.0,1.0,1.0,2.0,1.0}};
		double n_mol[] = {0.1, 0.35, 0.5, 0.1, 0.35, 0.1, 0.1, 0.1, 0.1, 0.1};
		double chem_ref[] = {-10.021, -21.096, -37.986, -9.846, -28.653, -18.918, -28.032, -14.640, -30.594, -26.111};
		double b_element[] = {2, 1, 1};	
		
		Matrix A_solve = new Matrix(NELE+1, NELE+1);
		Matrix b_solve = new Matrix(NELE+1,1);
		
		int i,j,k;
		double[] chem_pot = new double[NSPEC];
		Matrix chem_pot_Jama_Matrix;
	
	public ChemEq2()
	{
		for(int i=0;i<10;i++)
		{
			chem_ref[i] = chem_ref[i]*1e-3+Math.log(P);
		}
	}
        
        

	public void chemSolve()
	{

	n_t = 0;

	for(k=0;k<NSPEC;k++)
	{
	n_t = n_t+n_mol[k];
	}
	
	for(k=0;k<NSPEC;k++)
	{
		for(i=0;i<NSPEC;i++)
		{
			if (k==i)
			{
				kronDelt = 1;
			}
			else
			{
				kronDelt=0;
			}
			M_matrix[i][k] = kronDelt /n_mol[k];
		}  
	}
	
	M_Jama_matrix = new Matrix(M_matrix);
	A_Jama_matrix = new Matrix(A_matrix);
	
	
	for(i=0;i<NSPEC;i++)
	{
	chem_pot[i] = chem_ref[i] + Math.log(n_mol[i]/n_t);
	}

	chem_pot_Jama_Matrix = new Matrix(chem_pot,1);
	
	//chem_pot_Jama_Matrix.timesEquals(1);
	
	AMA_matrix = A_Jama_matrix.times(M_Jama_matrix.inverse().times(A_Jama_matrix.transpose()));
	AMU_matrix = A_Jama_matrix.times(M_Jama_matrix.inverse().times(chem_pot_Jama_Matrix.transpose()));    
        Matrix nmol = new Matrix(n_mol,1);
	nmu = nmol.times(chem_pot_Jama_Matrix.transpose());
	
	
//	AMA_matrix.print(0,10);
//	AMU_matrix.print(0,10);
//	nmu.print(0,10);
	

   /** Set a submatrix.
   @param i0   Initial row index
   @param i1   Final row index
   @param j0   Initial column index
   @param j1   Final column index
   @param X    A(i0:i1,j0:j1)
   @exception  ArrayIndexOutOfBoundsException Submatrix indices
   */					    
	A_solve.setMatrix(0, NELE-1, 0 , NELE-1, AMA_matrix); 
	A_solve.setMatrix(0, NELE-1, NELE , NELE, new Matrix(b_element,1).transpose()); 
	A_solve.setMatrix(NELE, NELE, 0 , NELE-1, new Matrix(b_element,1)); 
	A_solve.set(NELE,NELE,0);
	
	
	
//	A_solve.print(0,10);
	
	b_solve.setMatrix(0,NELE-1,0,0, AMU_matrix);
	b_solve.setMatrix(NELE,NELE,0,0, nmu);
	//b_solve.timesEquals(1);
	
//	b_solve.print(0,10);
	
	
	x_solve = A_solve.solve(b_solve);
	
	
	
	dn_matrix = M_Jama_matrix.inverse().times((A_Jama_matrix.transpose().times(x_solve.getMatrix(0,NELE-1,0,0))).minus(chem_pot_Jama_Matrix.transpose())).plus(new Matrix(n_mol,1).transpose().timesEquals(x_solve.get(NELE,0)));
	
	dn_matrix.print(0,10);
	}
                
	public void solve()
		{
                double error=0;
		
                do{
                
                error=0;
		chemSolve();
              
		for(i=0;i<NSPEC;i++)
		{
                    
                        error=error+dn_matrix.get(i,0)/n_mol[i];
                        
                        if (Math.abs(dn_matrix.get(i,0)/n_mol[i])>0.0000001)
			{
					
		                
                        for(i=0;i<NSPEC;i++)
		            {
                               n_mol[i] =  dn_matrix.get(i,0) + n_mol[i];
                            }
							
                        solve();
                        return;
                        }
                }
                }
                while(error>0.001);
                
                 for(j=0; j<NSPEC;j++)
	            {
	            System.out.println(" SVAR : " + n_mol[j]+ "   " +(dn_matrix.get(j,0)/n_mol[j])); 	
	            }
                
				System.out.println(" Ntot: " + n_t);
                }
                
               
                
			
			

	public static void main(String args[])
	{
		ChemEq2 testSystem = new ChemEq2();
		testSystem.solve();
        
		
			
	}
}