import dataPresentation.*;
import thermo.system.*;
import thermodynamicOperations.*;
import com.jrefinery.chart.*;
import processSimulation.processEquipment.mixer.*;
import processSimulation.processEquipment.stream.*;
import processSimulation.processEquipment.*;
import processSimulation.processEquipment.separator.*;
import processSimulation.processSystem.*;
import processSimulation.processEquipment.valve.*;
import processSimulation.processEquipment.pipeline.*;

public class Testfile_10{
    
    /** This method is just meant to test the thermo package.
     */
    public static void main(String args[]){
        
        SystemInterface testSystem = new SystemSrkEos((273.15+84.0),200.00);
        testSystem.addComponent("methane", 1890.00);
        //  testSystem.addComponent("ethane", 100.01);
        testSystem.addComponent("MEG", 0.01, 1);
        testSystem.addComponent("water", 200.0);
        //        testSystem.getPhases()[0].getComponents()[1].setAtractiveTerm(2);
        //        testSystem.getPhases()[1].getComponents()[1].setAtractiveTerm(2);
        testSystem.setMixingRule(4);
        
        Stream stream_1 = new Stream(testSystem);
        
        Separator separator = new Separator("Separator 1", stream_1);
        Stream stream_2 = separator.getGasOutStream();
        
        ValveInterface valve1 = new ThrottlingValve("Ventil 1", stream_2);
        valve1.setOutletPressure(120);
        
        SystemInterface testSystem3 = new SystemSrkEos(344.15,120.00);
        testSystem3.addComponent("methane", 0.00001, 0);
        testSystem3.addComponent("MEG", 0.004464, 1);
        testSystem3.addComponent("water", 0.001542, 1);
        testSystem3.setMixingRule(4);
        StreamInterface stream_3 = new NeqStream("MEG Injection Stream", testSystem3);
        
        //    MixerInterface mixer2 = new StaticMixer("Troll mixer unit2 eq");
        //    mixer2.addStream(stream_3);
        //   mixer2.addStream(valve1.getOutStream());
        //
        MixerInterface mixer = new StaticNeqMixer("Mixer 1");
        mixer.addStream(stream_3);
        mixer.addStream(valve1.getOutStream());
        
               
        Pipeline pipe = new TwoPhasePipeLine(mixer.getOutStream());
        pipe.setOutputFileName("c:/temp8.nc");
        pipe.setInitialFlowPattern("stratified");
        int numberOfLegs = 1, numberOfNodesInLeg = 100;
        double[] legHeights = {0,0};
        double[] legPositions = {0.0,1000.0};
        double[] pipeDiameters = { 0.1507588, 0.1507588};
        double[] outerTemperature = { 278.0, 278.0};
        double[] pipeWallRoughness = { 1e-5, 1e-5};
        pipe.setNumberOfLegs(numberOfLegs);
        pipe.setNumberOfNodesInLeg(numberOfNodesInLeg);
        pipe.setLegPositions(legPositions);
        pipe.setHeightProfile(legHeights);
        pipe.setPipeDiameters(pipeDiameters);
        pipe.setPipeWallRoughness(pipeWallRoughness);
        pipe.setOuterTemperatures(outerTemperature);
       
        //
        //        Stream stream_4 = separator.getGasOutStream();
        //        Stream stream_5 = separator.getLiquidOutStream();
        //
        ProcessSystem operations = new ProcessSystem();
        operations.add(stream_1);
        operations.add(separator);
        operations.add(stream_2);
        operations.add(valve1);
        operations.add(stream_3);
        //     //   operations.add(mixer2);
        operations.add(mixer);
        operations.add(pipe);
        //  operations.add(mixer);
        //        operations.add(stream_3);
        //        operations.add(separator);
        //        operations.add(stream_4);
        //        operations.add(stream_5);
        
        operations.run();
        operations.displayResult();
        
        //   stream_3.displayResult();
        //  stream_4.displayResult();
        // stream_5.displayResult();
     /*
        Stream stream_3 = mixer.getOutStream();
        operations.add(stream_3);
        operations.run();
        operations.displayResult();*/
    }
}