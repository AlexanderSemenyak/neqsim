/*
 * staticMixer.java
 *
 * Created on 11. mars 2001, 01:49
 */

package processSimulation.processEquipment.mixer;

import processSimulation.processEquipment.*;
import thermo.system.*;
import thermodynamicOperations.flashOps.*;
import java.util.*;
import thermodynamicOperations.*;
import processSimulation.processEquipment.stream.*;

import javax.swing.*;
import javax.swing.event.*;
import java.awt.*;
import java.text.*;
/**
 *
 * @author  Even Solbraa
 * @version
 */
public class Mixer extends Object implements ProcessEquipmentInterface, MixerInterface{
    
    protected ArrayList streams = new ArrayList(0);
    protected double pressure=0;
    protected int numberOfInputStreams=0;
    protected Stream mixedStream;
    protected String name = "mixer";
    protected ThermodynamicOperations testOps;
    protected Stream outStream;
    
    /** Creates new staticMixer */
    public Mixer() {
    }
    
    public Mixer(String name) {
        this.name = name;
    }
    
    
    public void setName(String name){
        this.name = name;
    }
    
    public void addStream(StreamInterface newStream){
        streams.add(newStream);
        
        if(numberOfInputStreams==0) {
            mixedStream = (Stream)((Stream)streams.get(0)).clone();
            mixedStream.getThermoSystem().setNumberOfPhases(2);
            mixedStream.getThermoSystem().reInitPhaseType();
            mixedStream.getThermoSystem().init(0);
            mixedStream.getThermoSystem().init(3);
        }
        
        numberOfInputStreams++;
    }
    
    public void setPressure(double pressure){
        this.pressure = pressure;
    }
    
    public void mixStream(){
        int index = 0;
        String compName = new String();
        
        for(int k=1;k<streams.size();k++){
            
            for(int i=0;i<((SystemInterface) ((Stream) streams.get(k)).getThermoSystem()).getPhases()[0].getNumberOfComponents();i++){
                
                boolean gotComponent=false;
                String componentName = ((SystemInterface) ((Stream) streams.get(k)).getThermoSystem()).getPhases()[0].getComponents()[i].getName();
                System.out.println("adding: " + componentName);
                int numberOfPhases= ((SystemInterface) ((Stream) streams.get(k)).getThermoSystem()).getNumberOfPhases();
                
                double moles = ((SystemInterface) ((Stream) streams.get(k)).getThermoSystem()).getPhases()[0].getComponents()[i].getNumberOfmoles();
                System.out.println("moles: " + moles + "  " + mixedStream.getThermoSystem().getPhases()[0].getNumberOfComponents());
                for(int p=0;p<mixedStream.getThermoSystem().getPhases()[0].getNumberOfComponents();p++){
                    if(mixedStream.getThermoSystem().getPhases()[0].getComponents()[p].getName().equals(componentName)){
                        gotComponent=true;
                        index = ((SystemInterface) ((Stream) streams.get(0)).getThermoSystem()).getPhases()[0].getComponents()[p].getComponentNumber();
                        compName = ((SystemInterface) ((Stream) streams.get(0)).getThermoSystem()).getPhases()[0].getComponents()[p].getComponentName();
                        
                    }
                }
                
                if(gotComponent){
                    System.out.println("adding moles starting....");
                    mixedStream.getThermoSystem().addComponent(compName, moles);
                    //mixedStream.getThermoSystem().init_x_y();
                    System.out.println("adding moles finished");
                }
                else {
                    System.out.println("ikke gå hit");
                    mixedStream.getThermoSystem().addComponent(compName, moles);
                }
            }
        }
        mixedStream.getThermoSystem().init_x_y();
        mixedStream.getThermoSystem().initBeta();
        mixedStream.getThermoSystem().init(2);
    }
    
    public double guessTemperature(){
        double gtemp=0;
        for(int k=0;k<streams.size();k++){
            gtemp += ((SystemInterface) ((Stream) streams.get(k)).getThermoSystem()).getTemperature()*((SystemInterface) ((Stream) streams.get(k)).getThermoSystem()).getNumberOfMoles()/mixedStream.getThermoSystem().getNumberOfMoles();
            
        }
        return gtemp;
    }
    
    public double calcMixStreamEnthalpy(){
        double enthalpy=0;
        for(int k=0;k<streams.size();k++){
            ((SystemInterface) ((Stream) streams.get(k)).getThermoSystem()).init(3);
            enthalpy += ((SystemInterface) ((Stream) streams.get(k)).getThermoSystem()).getEnthalpy();
            System.out.println("total enthalpy k : " +((SystemInterface) ((Stream) streams.get(k)).getThermoSystem()).getEnthalpy());
        }
        System.out.println("total enthalpy of streams: " + enthalpy);
        return enthalpy;
    }
    
    
    public Stream getOutStream(){
        return mixedStream;
    }
    
    public void run(){
        mixedStream.setThermoSystem(((SystemInterface) ((Stream) streams.get(0)).getThermoSystem().clone()));
        mixedStream.getThermoSystem().setNumberOfPhases(2);
        mixedStream.getThermoSystem().reInitPhaseType();
        mixedStream.getThermoSystem().init(0);
        
        mixStream();
        double enthalpy = calcMixStreamEnthalpy();
        //System.out.println("temp guess " + guessTemperature());
        mixedStream.getThermoSystem().setTemperature(guessTemperature());
        testOps = new ThermodynamicOperations(mixedStream.getThermoSystem());
        testOps.TPflash();
        testOps.PHflash(enthalpy, 0);
//        System.out.println("enthalpy: " + mixedStream.getThermoSystem().getEnthalpy());
//        System.out.println("enthalpy: " + enthalpy);
//        System.out.println("temperature: " + mixedStream.getThermoSystem().getTemperature());
        System.out.println("beta " + mixedStream.getThermoSystem().getBeta());
        //  outStream.setThermoSystem(mixedStream);*/
    }
    
    public void displayResult() {
        SystemInterface thermoSystem = mixedStream.getThermoSystem();
        DecimalFormat nf = new DecimalFormat();
        nf.setMaximumFractionDigits(5);
        nf.applyPattern("#.#####E0");
        
        
        JDialog dialog = new JDialog(new JFrame(), "Results from TPflash");
        Container dialogContentPane = dialog.getContentPane();
        dialogContentPane.setLayout(new FlowLayout());
        
        thermoSystem.initPhysicalProperties();
        String[][] table = new String[20][5];
        String[] names = {"", "Phase 1", "Phase 2", "Phase 3", "Unit"};
        table[0][0] = "";
        table[0][1] = "";
        table[0][2] = "";
        table[0][3] = "";
        StringBuffer buf = new StringBuffer();
        FieldPosition test = new FieldPosition(0);
        
        for(int i=0;i<thermoSystem.getNumberOfPhases();i++){
            for(int j=0;j<thermoSystem.getPhases()[0].getNumberOfComponents();j++){
                table[j+1][0] = thermoSystem.getPhases()[0].getComponents()[j].getName();
                buf = new StringBuffer();
                table[j+1][i+1] = nf.format(thermoSystem.getPhases()[i].getComponents()[j].getx(), buf, test).toString();
                table[j+1][4] = "[-]";
            }
            buf = new StringBuffer();
            table[thermoSystem.getPhases()[0].getNumberOfComponents()+2][0] = "Density";
            table[thermoSystem.getPhases()[0].getNumberOfComponents()+2][i+1] = nf.format(thermoSystem.getPhases()[i].getPhysicalProperties().getDensity(), buf, test).toString();
            table[thermoSystem.getPhases()[0].getNumberOfComponents()+2][4] = "[kg/m^3]";
            
            //  Double.longValue(thermoSystem.getPhases()[i].getBeta());
            
            buf = new StringBuffer();
            table[thermoSystem.getPhases()[0].getNumberOfComponents()+3][0] = "PhaseFraction";
            table[thermoSystem.getPhases()[0].getNumberOfComponents()+3][i+1] = nf.format(thermoSystem.getPhases()[i].getBeta(), buf, test).toString();
            table[thermoSystem.getPhases()[0].getNumberOfComponents()+3][4] = "[-]";
            
            buf = new StringBuffer();
            table[thermoSystem.getPhases()[0].getNumberOfComponents()+4][0] = "MolarMass";
            table[thermoSystem.getPhases()[0].getNumberOfComponents()+4][i+1] = nf.format(thermoSystem.getPhases()[i].getMolarMass()*1000, buf, test).toString();
            table[thermoSystem.getPhases()[0].getNumberOfComponents()+4][4] = "[kg/kmol]";
            
            buf = new StringBuffer();
            table[thermoSystem.getPhases()[0].getNumberOfComponents()+5][0] = "Cp";
            table[thermoSystem.getPhases()[0].getNumberOfComponents()+5][i+1] = nf.format((thermoSystem.getPhases()[i].getCp()/(thermoSystem.getPhases()[i].getNumberOfMolesInPhase() * thermoSystem.getPhases()[i].getMolarMass()*1000)), buf, test).toString();
            table[thermoSystem.getPhases()[0].getNumberOfComponents()+5][4] = "[kJ/kg*K]";
            
            buf = new StringBuffer();
            table[thermoSystem.getPhases()[0].getNumberOfComponents()+7][0] = "Viscosity";
            table[thermoSystem.getPhases()[0].getNumberOfComponents()+7][i+1] = nf.format((thermoSystem.getPhases()[i].getPhysicalProperties().getViscosity()), buf, test).toString();
            table[thermoSystem.getPhases()[0].getNumberOfComponents()+7][4] = "[kg/m*sec]";
            
            buf = new StringBuffer();
            table[thermoSystem.getPhases()[0].getNumberOfComponents()+8][0] = "Conductivity";
            table[thermoSystem.getPhases()[0].getNumberOfComponents()+8][i+1] = nf.format(thermoSystem.getPhases()[i].getPhysicalProperties().getConductivity(), buf, test).toString();
            table[thermoSystem.getPhases()[0].getNumberOfComponents()+8][4] = "[W/m*K]";
            
            buf = new StringBuffer();
            table[thermoSystem.getPhases()[0].getNumberOfComponents()+10][0] = "Pressure";
            table[thermoSystem.getPhases()[0].getNumberOfComponents()+10][i+1] = Double.toString(thermoSystem.getPhases()[i].getPressure());
            table[thermoSystem.getPhases()[0].getNumberOfComponents()+10][4] = "[bar]";
            
            buf = new StringBuffer();
            table[thermoSystem.getPhases()[0].getNumberOfComponents()+11][0] = "Temperature";
            table[thermoSystem.getPhases()[0].getNumberOfComponents()+11][i+1] = Double.toString(thermoSystem.getPhases()[i].getTemperature());
            table[thermoSystem.getPhases()[0].getNumberOfComponents()+11][4] = "[K]";Double.toString(thermoSystem.getPhases()[i].getTemperature());
            
            buf = new StringBuffer();
            table[thermoSystem.getPhases()[0].getNumberOfComponents()+13][0] = "Stream";
            table[thermoSystem.getPhases()[0].getNumberOfComponents()+13][i+1] = name;
            table[thermoSystem.getPhases()[0].getNumberOfComponents()+13][4] = "-";
        }
        
        JTable Jtab = new JTable(table,names);
        JScrollPane scrollpane = new JScrollPane(Jtab);
        dialogContentPane.add(scrollpane);
        dialog.pack();
        dialog.show();
    }
    
    public String getName(){
        return name;
    }
    
}
