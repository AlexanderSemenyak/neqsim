package processSimulation.processSystem;

/*
 * thermoOps.java
 *
 * Created on 2. oktober 2000, 20:27
 */

import thermo.system.*;
import thermodynamicOperations.flashOps.*;
import thermodynamicOperations.flashOps.saturationOps.*;
import thermodynamicOperations.phaseEnvelopeOps.multicomponentEnvelopeOps.*;
import java.util.*;
import processSimulation.processEquipment.*;
/**
 *
 * @author  Even Solbraa
 * @version
 */
public class ProcessSystem extends java.lang.Object implements java.io.Serializable{
    
    Thread thisThread;
    // ProcessEquipmentInterface[]
    ArrayList unitOperations = new ArrayList(0);
    
    /** Creates new thermoOps */
    public ProcessSystem() {
    }
    
    
    public void add(ProcessEquipmentInterface operation){
        unitOperations.add(operation);
    }
    
    public void add(ProcessEquipmentInterface[] operations){
        for(int i=0;i<operations.length;i++){
            unitOperations.add(operations[i]);
        }
    }
    
    public Object getUnit(String name){
        for(int i=0;i<unitOperations.size();i++){
            if(((ProcessEquipmentInterface)unitOperations.get(i)).getName().equals(name)){
                return unitOperations.get(i);
            }
        }
        return null;
    }
    
    public void removeUnit(String name){
        for(int i=0;i<unitOperations.size();i++){
            if(((ProcessEquipmentInterface)unitOperations.get(i)).getName().equals(name)){
                unitOperations.remove(i);
            }
        }
    }
    
    public void clearAll(){
        unitOperations = new ArrayList(0);
    }
    
    public void clear(){
        unitOperations = new ArrayList(0);
    }
    
    public void run(){
        for(int i=0;i<unitOperations.size();i++){
            ((ProcessEquipmentInterface)unitOperations.get(i)).run();
        }
    }
    
    public int size(){
        return unitOperations.size();
    }
    
    
    public void view(){
        this.displayResult();
    }
    
    public void displayResult(){
        
        try{
            thisThread.join();
        }
        catch(Exception e) {
            System.out.println("Thread did not finish");
        }
        for(int i=0;i<unitOperations.size();i++){
            ((ProcessEquipmentInterface)unitOperations.get(i)).displayResult();
        }
    }
    
}
