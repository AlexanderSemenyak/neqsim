/*
 * TestAcentric.java
 *
 * Created on 23. januar 2001, 22:08
 */

package thermo.util.parameterFitting.pureComponentParameterFitting.hydrate;

import statistics.parameterFitting.nonLinearParameterFitting.*;
import statistics.parameterFitting.*;
import thermo.system.*;
import java.sql.*;
import util.database.*;
import java.util.*;
/**
 *
 * @author  Even Solbraa
 * @version
 */
public class TestHydrateFunction extends java.lang.Object {
    
    /** Creates new TestAcentric */
    public TestHydrateFunction() {
    }
    
    
    public static void main(String[] args){
        
        LevenbergMarquardt optim = new LevenbergMarquardt();
        ArrayList sampleList = new ArrayList();
        
        // inserting samples from database
        NeqSimDataBase database = new NeqSimDataBase();
        
        //double[] guess =  {155.0272648223, 3.1741464092, 0.4062999127};//methane fitted
        double[] guess =  {154.54, 3.165, 0.3834};//methane fitted
        //double[] guess =  {176.4, 3.2641, 0.5651};//ethane
        
        //ljeps,  ljdiam,a
        
        ResultSet dataSet =  database.getResultSet("NeqSimDataBase",  "SELECT * FROM HydratePureComp WHERE GuestMolecule='methane' AND Type='LHV'");
        
        int numb = 0;
        try{
            System.out.println("adding....");
            while(dataSet.next() && numb<8){
                numb++;
                HydrateFunction function = new  HydrateFunction();
                function.setInitialGuess(guess);
                double pres = Double.parseDouble(dataSet.getString("Pressure"));
                double temp = Double.parseDouble(dataSet.getString("Temperature"));
                //SystemInterface testSystem = new SystemSrkSchwartzentruberEos(280, 1.0);
                SystemInterface testSystem = new SystemSrkCPA(280, 1.0);
                testSystem.addComponent(dataSet.getString("GuestMolecule"), 1.0);
                testSystem.addComponent("water", 1.0);
                testSystem.setHydrateCheck(true);
                testSystem.createDatabase(true);
                testSystem.setTemperature(temp);
                testSystem.setPressure(pres);
                testSystem.init(0);
                double sample1[] = {temp};
                double standardDeviation1[] = {0.1};
                SampleValue sample = new SampleValue(pres, pres/100.0, sample1, standardDeviation1);
                //SampleValue sample = new SampleValue(Double.parseDouble(dataSet.getString("IonicActivity")), Double.parseDouble(dataSet.getString("stddev2")), sample1, standardDeviation1);
                sample.setFunction(function);
                sample.setThermodynamicSystem(testSystem);
                sample.setReference(dataSet.getString("Reference"));
                sampleList.add(sample);
            }
        }
        catch(Exception e){
            System.out.println("database error: " + e);
            e.printStackTrace();
        }
        
        SampleSet sampleSet = new SampleSet(sampleList);
        optim.setSampleSet(sampleSet);
        
        // do simulations
        //optim.solve();
        // optim.runMonteCarloSimulation();
        optim.displayCurveFit();
        optim.writeToCdfFile("c:/testFit.nc");
        optim.writeToTextFile("c:/testFit.txt");
    }
}
