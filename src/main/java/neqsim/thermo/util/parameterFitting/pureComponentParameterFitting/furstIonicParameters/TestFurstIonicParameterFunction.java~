/*
 * TestAcentric.java
 *
 * Created on 23. januar 2001, 22:08
 */

package thermo.util.parameterFitting.pureComponentParameterFitting.furstIonicParameters;

import statistics.parameterFitting.nonLinearParameterFitting.*;
import statistics.parameterFitting.*;
import thermo.system.*;
import java.sql.*;
import util.database.*;
import java.util.*;
/**
 *
 * @author  Even Solbraa
 * @version
 */
public class TestFurstIonicParameterFunction extends java.lang.Object {
    
    /** Creates new TestAcentric */
    public TestFurstIonicParameterFunction() {
    }
    
    
    public static void main(String[] args){
        
        LevenbergMarquardt optim = new LevenbergMarquardt();
        ArrayList sampleList = new ArrayList();
        
        // inserting samples from database
        NeqSimDataBase database = new NeqSimDataBase();
        double[] guess =  {0.0000001117, 0.0000053771, 0.0000699219, 0.0000043984, -0.0000000606, -0.0000217950};
        //double[] guess =  { 0.0000001116, 0.0000053822, 0.0000691846, 0.0000049520, -0.0000000605, -0.0000216352};
        //double[] guess =  {0.0000000640, 0.0000011845, 0.0000209744, 0.0000089071, -0.0000000272, 0.0000019014};//cpa-el
        
        //ResultSet dataSet =  database.getResultSet("NeqSimDataBase",  "SELECT * FROM ionicData WHERE Description IN ('NaCl','LiCl','Sr2Br','Sr2I')");
        ResultSet dataSet =  database.getResultSet("NeqSimDataBase",  "SELECT * FROM ionicData WHERE ion1<>'H3Oplus2' ORDER BY ion1,ion2,x2");
        //ResultSet dataSet =  database.getResultSet("NeqSimDataBase",  "SELECT * FROM ionicData WHERE ion1='Na+' AND ion2='Cl-'");
        int numb = 0;
        try{
            System.out.println("adding....");
            while(dataSet.next() && numb<5000){
                numb++;
                FurstIonicParameterFunction function = new  FurstIonicParameterFunction();
                function.setInitialGuess(guess);
                double x2 = Double.parseDouble(dataSet.getString("x2"));
                SystemInterface testSystem = new SystemFurstElectrolyteEos(280, 1.0);
                //SystemInterface testSystem = new SystemElectrolyteCPA(280, 1.0);
                testSystem.addComponent(dataSet.getString("ComponentSolvent"), Double.parseDouble(dataSet.getString("x1")));
                testSystem.addComponent(dataSet.getString("Ion1"), x2);
                testSystem.addComponent(dataSet.getString("Ion2"), Double.parseDouble(dataSet.getString("x3")));
                //testSystem.createDatabase(true);
                testSystem.setTemperature(Double.parseDouble(dataSet.getString("Temperature")));
                testSystem.setPressure(Double.parseDouble(dataSet.getString("Pressure")));
                testSystem.init(0);
                double sample1[] = {x2/0.01802};  // temperature
                double standardDeviation1[] = {0.01}; // std.dev temperature    // presure std.dev pressure
                double osmcoef = Double.parseDouble(dataSet.getString("OsmoticCoefficient"));
                SampleValue sample = new SampleValue(osmcoef, osmcoef, sample1, standardDeviation1);
                //SampleValue sample = new SampleValue(Double.parseDouble(dataSet.getString("IonicActivity")), Double.parseDouble(dataSet.getString("stddev2")), sample1, standardDeviation1);
                sample.setFunction(function);
                sample.setThermodynamicSystem(testSystem);
                sample.setReference(dataSet.getString("Reference"));
                sample.setDescription(dataSet.getString("Description"));
                sampleList.add(sample);
            }
            
            //dataSet =  database.getResultSet("NeqSimDataBase",  "SELECT * FROM ionicData WHERE ion1<>'H3Oplus2' AND IonicActivity>=0.01");
            //dataSet =  database.getResultSet("NeqSimDataBase",  "SELECT * FROM ionicData WHERE Description IN ('NaCl','LiCl','Sr2Br','Sr2I') AND IonicActivity>=0.01");
            dataSet =  database.getResultSet("NeqSimDataBase",  "SELECT * FROM ionicData WHERE ion1='Na+' AND ion2='Cl-'");
            System.out.println("setting new for activity");
            while(!dataSet.next()){
                FurstIonicParameterFunction_Activity function = new  FurstIonicParameterFunction_Activity();
                function.setInitialGuess(guess);
                double x2 = Double.parseDouble(dataSet.getString("x2"));
                SystemInterface testSystem = new SystemFurstElectrolyteEos(280, 1.0);
                //SystemInterface testSystem = new SystemElectrolyteCPA(280, 1.0);
                testSystem.addComponent(dataSet.getString("ComponentSolvent"), Double.parseDouble(dataSet.getString("x1")));
                testSystem.addComponent(dataSet.getString("Ion1"), x2);
                testSystem.addComponent(dataSet.getString("Ion2"), Double.parseDouble(dataSet.getString("x3")));
                testSystem.setTemperature(Double.parseDouble(dataSet.getString("Temperature")));
                testSystem.setPressure(Double.parseDouble(dataSet.getString("Pressure")));
                testSystem.init(0);
                double sample1[] = {x2/0.01802};  // temperature
                double standardDeviation1[] = {0.01}; // std.dev temperature    // presure std.dev pressure
                //SampleValue sample = new SampleValue(Double.parseDouble(dataSet.getString("OsmoticCoefficient")), Double.parseDouble(dataSet.getString("stddev1")), sample1, standardDeviation1);
                double ionact = Double.parseDouble(dataSet.getString("IonicActivity"));
                SampleValue sample = new SampleValue(ionact, ionact, sample1, standardDeviation1);
                sample.setFunction(function);
                sample.setThermodynamicSystem(testSystem);
                sample.setReference(dataSet.getString("Reference"));
                sample.setDescription(dataSet.getString("Description"));
                sampleList.add(sample);
            }
        }
        catch(Exception e){
            System.out.println("database error: " + e);
            e.printStackTrace();
        }
        
        //        double sample1[] = {0.1};
        //        for(int i=0;i<sampleList.size();i++){
        //            System.out.println("ans: " + ((SampleValue)sampleList.get(i)).getFunction().calcValue(sample1));
        //        }
        
        SampleSet sampleSet = new SampleSet(sampleList);
        optim.setSampleSet(sampleSet);
        
        // do simulations
        optim.solve();
        // optim.runMonteCarloSimulation();
        optim.displayCurveFit();
        optim.writeToCdfFile("c:/testFit.nc");
        optim.writeToTextFile("c:/testFit.txt");
    }
}
