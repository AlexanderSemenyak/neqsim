/*
 * Test.java
 *
 * Created on 22. januar 2001, 22:59
 */

package thermo.util.parameterFitting.binaryInteractionParameterFitting.HuronVidalParameterFitting;

import thermo.system.*;
import statistics.parameterFitting.nonLinearParameterFitting.*;
import thermo.phase.*;
import thermodynamicOperations.*;
import thermo.mixingRule.*;

/**
 *
 * @author  Even Solbraa
 * @version
 */
public class BinaryHVparameterFitToActivityCoefficientFunction extends TestFunction {
    
    /** Creates new Test */
    public BinaryHVparameterFitToActivityCoefficientFunction(){
        
    }
    
    public double calcValue(double[] dependentValues){
        system.init(0);
        system.init(1);
        
        double fug = system.getPhases()[1].getComponents()[0].getFugasityCoeffisient();
        double pureFug = system.getPhases()[1].getPureComponentFugacity(0);
        double val = fug/pureFug;
        //System.out.println("activity: " + val);
        return Math.log(val);
    }
    
    public void setDatabaseParameters(){
        params = new double[4];
        params[0] = ((HVmixingRuleInterface) ((PhaseEosInterface)system.getPhases()[0]).getMixingRule()).getHVDijParameter(0,1);
        params[1] = ((HVmixingRuleInterface) ((PhaseEosInterface)system.getPhases()[0]).getMixingRule()).getHVDijParameter(1,0);
        params[2] = ((HVmixingRuleInterface) ((PhaseEosInterface)system.getPhases()[0]).getMixingRule()).getHVDijTParameter(0,1);
        params[3] = ((HVmixingRuleInterface) ((PhaseEosInterface)system.getPhases()[0]).getMixingRule()).getHVDijTParameter(1,0);
    }
    
    public double calcTrueValue(double val){
        return Math.exp(val);
    }
    
    public void setFittingParams(int i, double value){
        //        params[i] = value;
        //        if(i==0){
        //            ((HVmixingRuleInterface) ((PhaseEosInterface)system.getPhases()[0]).getMixingRule()).setHVDijParameter(0,1, value);
        //            ((HVmixingRuleInterface) ((PhaseEosInterface)system.getPhases()[1]).getMixingRule()).setHVDijParameter(0,1, value);
        //        }
        //        if(i==1){
        //            ((HVmixingRuleInterface) ((PhaseEosInterface)system.getPhases()[0]).getMixingRule()).setHVDijParameter(1,0, value);
        //            ((HVmixingRuleInterface) ((PhaseEosInterface)system.getPhases()[1]).getMixingRule()).setHVDijParameter(1,0, value);
        //        }
        //        if(i==2){
        //            ((HVmixingRuleInterface) ((PhaseEosInterface)system.getPhases()[0]).getMixingRule()).setHValphaParameter(1,0, value);
        //            ((HVmixingRuleInterface) ((PhaseEosInterface)system.getPhases()[1]).getMixingRule()).setHValphaParameter(1,0, value);
        //        }
        //
        params[i] = value;
        
        if(i==0){
            ((HVmixingRuleInterface) ((PhaseEosInterface)system.getPhases()[0]).getMixingRule()).setHVDijParameter(0,1, value);
            ((HVmixingRuleInterface) ((PhaseEosInterface)system.getPhases()[1]).getMixingRule()).setHVDijParameter(0,1, value);
        }
        if(i==1){
            ((HVmixingRuleInterface) ((PhaseEosInterface)system.getPhases()[0]).getMixingRule()).setHVDijParameter(1,0, value);
            ((HVmixingRuleInterface) ((PhaseEosInterface)system.getPhases()[1]).getMixingRule()).setHVDijParameter(1,0, value);
        }
        if(i==2){
            ((HVmixingRuleInterface) ((PhaseEosInterface)system.getPhases()[0]).getMixingRule()).setHVDijTParameter(0,1, value);
            ((HVmixingRuleInterface) ((PhaseEosInterface)system.getPhases()[1]).getMixingRule()).setHVDijTParameter(0,1, value);
        }
        if(i==3){
            ((HVmixingRuleInterface) ((PhaseEosInterface)system.getPhases()[0]).getMixingRule()).setHVDijTParameter(1,0, value);
            ((HVmixingRuleInterface) ((PhaseEosInterface)system.getPhases()[1]).getMixingRule()).setHVDijTParameter(1,0, value);
        }
        
        
    }
}
