/*
 * TestAcentric.java
 *
 * Created on 23. januar 2001, 22:08
 */

package thermo.util.parameterFitting.binaryInteractionParameterFitting.HuronVidalParameterFitting;

import java.sql.*;
import java.util.*;
import util.database.*;
import statistics.parameterFitting.nonLinearParameterFitting.*;
import statistics.parameterFitting.*;
import thermo.system.*;
/**
 *
 * @author  Even Solbraa
 * @version
 */
public class TestBinaryHVfitToActivityCoefficientDB extends java.lang.Object implements Cloneable{
    
    /** Creates new TestAcentric */
    public TestBinaryHVfitToActivityCoefficientDB() {
    }
    
    
    public static void main(String[] args){
        
        LevenbergMarquardt optim = new LevenbergMarquardt();
        ArrayList sampleList = new ArrayList();
        
        // inserting samples from database
        NeqSimDataBase database = new NeqSimDataBase();
        ResultSet dataSet =  database.getResultSet("NeqSimDataBase",  "SELECT * FROM activityCoefficientTable WHERE Component1='MDEA' AND Component2='water' AND Temperature>223.15  AND x1<=1.0");
        
        try{
            while(dataSet.next()){
                BinaryHVparameterFitToActivityCoefficientFunction function = new  BinaryHVparameterFitToActivityCoefficientFunction();
                
                double x1 = Double.parseDouble(dataSet.getString("x1"))*100;
                SystemInterface testSystem = new SystemSrkSchwartzentruberEos(Double.parseDouble(dataSet.getString("Temperature")), Double.parseDouble(dataSet.getString("Pressure")));
                testSystem.addComponent(dataSet.getString("Component1"), x1);             // legger til komponenter til systemet
                testSystem.addComponent(dataSet.getString("Component2"), Double.parseDouble(dataSet.getString("x2"))*100);
                // testSystem.chemicalReactionInit();
                testSystem.setMixingRule(4);
                testSystem.init(0);
                
                double sample1[] = {x1, testSystem.getTemperature()};
                double standardDeviation1[] = {x1/100.0};
                SampleValue sample = new SampleValue(Math.log(Double.parseDouble(dataSet.getString("gamma1"))), Double.parseDouble(dataSet.getString("stdDeviation1")), sample1, standardDeviation1);
                sample.setFunction(function);
                sample.setThermodynamicSystem(testSystem);
                
                // function.setDatabaseParameters();
//                double parameterGuess[] = {-805.5, -1360.6, 4.424, 0.8284};
//                function.setInitialGuess(parameterGuess);
                sampleList.add(sample);
            }
        }
        catch(Exception e){
            System.out.println("database error" + e);
        }
        
        SampleSet sampleSet = new SampleSet(sampleList);
        optim.setSampleSet(sampleSet);
        
        // do simulations
         optim.solve();
        //optim.runMonteCarloSimulation();
        optim.displayCurveFit();
        optim.writeToTextFile("c:/testFit.txt");
    }
}
