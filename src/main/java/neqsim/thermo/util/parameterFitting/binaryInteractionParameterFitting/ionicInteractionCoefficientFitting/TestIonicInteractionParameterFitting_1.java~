/*
 * TestAcentric.java
 *
 * Created on 23. januar 2001, 22:08
 */

package thermo.util.parameterFitting.binaryInteractionParameterFitting.ionicInteractionCoefficientFitting;

import statistics.parameterFitting.nonLinearParameterFitting.*;
import statistics.parameterFitting.*;
import thermo.system.*;
import java.sql.*;
import util.database.*;
import java.util.*;
/**
 *
 * @author  Even Solbraa
 * @version
 */
public class TestIonicInteractionParameterFitting extends java.lang.Object{
    
    /** Creates new TestAcentric */
    public TestIonicInteractionParameterFitting(){
    }
    
    
    public static void main(String[] args){
        LevenbergMarquardt optim = new LevenbergMarquardt();
        ArrayList sampleList = new ArrayList();
        
        // inserting samples from database
        NeqSimDataBase database = new NeqSimDataBase();
        ResultSet dataSet =  database.getResultSet("NeqSimDataBase",  "SELECT * FROM CO2MDEANew  WHERE Reference<>'Bahiri19842' AND Reference='Jou1982' AND wtMDEA<60.4 AND Temperature>295.15 AND Temperature<315.15 AND x1<1.308998 AND x1>0.00008998 AND VapourPressure1<30.8");
        //  ResultSet dataSet =  database.getResultSet("NeqSimDataBase",  "SELECT * FROM activityCoefficientTable WHERE Component1='MDEA' AND Component2='water'");AND Reference='Lemoine2000'
        
        try{
            int i=0;
            System.out.println("adding....");
            while(dataSet.next() && i<20){
                i++;
                IonicInteractionParameterFittingFunction function = new IonicInteractionParameterFittingFunction();
                //IonicInteractionParameterFittingFunction_CO2  function = new IonicInteractionParameterFittingFunction_CO2();
                
               // double guess[] = {-0.44e-2};//, 0.39e-4};//, 2.028E-4, 1.627E-4};//, 956.394e-5, -16.178e-5, 234.792e-5, 234.792e-5};//,
                //double guess[] = {-0.39643e-3, -0.4118852e-3};//, 1350.00, -1450.00};
                //double guess[] = {0.0, 0.0};//0.17578e-6, 0.12e-6};//, -0.0045627e-6, -0.11993e-6};//, 956.394e-3, -16.178e-3, 234.792e-3, 234.792e-3};//
                //double guess[] = {-4.50E-04};//, -.2663358741e-3, .322075e-3};//,
                double guess[] = {-0.000097616, -0.00042596, 0.0000199416e};//, -0.0002833953};//, 1.0,1.0};//;{-2.9222e-6, -7.991E-6, 3.924E-6};//,1.0,1.0};//, -7.223e-4}; 
                //double guess[] = {-1.488E4, -4.347E3, 1.442E-4, 6.118E-5};//, 1.442E-5, 6.118E-5}; //, 1.239}; //WS
                //double guess[] = {-0.1};
                //double guess[] = {956.394e-3, -16.178e-3, 234.792e-3};//, 4.2103e-3, -3.7454e-3, -0.7739e-3};//, -1.92e-6, 1.64e-6};  -4.4498e-4,
                // MDEA+/MDEA, MDEA+/HCO3-, MDEA+/water,  MDEA+/CO2,
                 
                SystemInterface testSystem = new SystemFurstElectrolyteEos((273.15+25.0), 2.0);
                testSystem.addComponent(dataSet.getString("ComponentSolute"), Double.parseDouble(dataSet.getString("x1")));
                testSystem.addComponent(dataSet.getString("ComponentSolvent1"), Double.parseDouble(dataSet.getString("x2")));
                testSystem.addComponent(dataSet.getString("ComponentSolvent2"), Double.parseDouble(dataSet.getString("x3")));
                double temperature = Double.parseDouble(dataSet.getString("Temperature"));
                double pressure = Double.parseDouble(dataSet.getString("VapourPressure1"));
                testSystem.setTemperature(temperature);
                testSystem.setPressure(pressure+0.025);
                testSystem.chemicalReactionInit();
                testSystem.createDatabase(true);
                testSystem.setMixingRule(4);
                testSystem.init(0);
                double sample1[] = {testSystem.getPhases()[0].getComponents()[0].getNumberOfMolesInPhase()/testSystem.getPhases()[0].getComponents()[1].getNumberOfMolesInPhase()};  // temperature
                double standardDeviation1[] = {0.01}; // std.dev temperature    // presure std.dev pressure
                
                SampleValue sample = new SampleValue(pressure, Double.parseDouble(dataSet.getString("StandardDeviation")), sample1, standardDeviation1);
                function.setInitialGuess(guess);
                sample.setFunction(function);
                sample.setReference(dataSet.getString("Reference"));
                sample.setThermodynamicSystem(testSystem);
                sampleList.add(sample);
            }
        }
        catch(Exception e){
            System.out.println("database error" + e);
        }
        
        SampleSet sampleSet = new SampleSet(sampleList);
        optim.setSampleSet(sampleSet);
        
        // do simulations
        //
        optim.solve();
        //optim.runMonteCarloSimulation();
        //optim.displayCurveFit();
        //optim.displayGraph();
        optim.displayCurveFit();
        optim.writeToCdfFile("c:/testFit.nc");
        optim.writeToTextFile("c:/testFit.txt");
    }
}
