/*
 * TestAcentric.java
 *
 * Created on 23. januar 2001, 22:08
 */

package thermo.util.parameterFitting.binaryInteractionParameterFitting.HuronVidalParameterFitting;

import statistics.parameterFitting.nonLinearParameterFitting.*;
import statistics.parameterFitting.*;
import thermo.system.*;
import java.sql.*;
import util.database.*;
import java.util.*;
/**
 *
 * @author  Even Solbraa
 * @version
 */
public class TestBinaryHVParameterFittingToSolubilityData_Lucia extends java.lang.Object {
    
    /** Creates new TestAcentric */
    public TestBinaryHVParameterFittingToSolubilityData_Lucia() {
    }
    
    
    public static void main(String[] args){
        
        LevenbergMarquardt optim = new LevenbergMarquardt();
        ArrayList sampleList = new ArrayList();
        
        // inserting samples from database
        NeqSimDataBase database = new NeqSimDataBase();
        //ResultSet dataSet =  database.getResultSet("NeqSimDataBase",  "SELECT * FROM LuciaData8 WHERE Component='methane' AND Temperature<520 AND L2<>NULL AND L2>0.0000000001 ORDER BY Temperature,Pressure");// AND Reference='Houghton1957' AND Reference<>'Nighswander1989' AND Temperature>278.15 AND Temperature<383.15 AND Pressure<60.01325");
        ResultSet dataSet =  database.getResultSet("NeqSimDataBase",  "SELECT * FROM LuciaData8 WHERE Component='CO2' AND Temperature>250 AND Temperature<420 AND Pressure<700000000 AND L2<>NULL AND L2>0.000000001 ORDER BY Temperature,Pressure");// AND Reference='Houghton1957' AND Reference<>'Nighswander1989' AND Temperature>278.15 AND Temperature<383.15 AND Pressure<60.01325");
        //ResultSet dataSet =  database.getResultSet("NeqSimDataBase",  "SELECT * FROM LuciaData8 WHERE Component='methane' AND ID1>662 AND ID1<760 AND Temperature<520 AND L2<>NULL AND L2>0.0000000001 ORDER BY Temperature,Pressure");// AND Reference='Houghton1957' AND Reference<>'Nighswander1989' AND Temperature>278.15 AND Temperature<383.15 AND Pressure<60.01325");
        try{
            int p=0;
            System.out.println("adding....");
            while(dataSet.next() && p<1000){
                p++;
                BinaryHVParameterFittingToSolubilityData function = new BinaryHVParameterFittingToSolubilityData();
                
                //SystemInterface testSystem = new SystemFurstElectrolyteEos(280, 1.0);
                SystemInterface testSystem = new SystemSrkSchwartzentruberEos(Double.parseDouble(dataSet.getString("Temperature")), Double.parseDouble(dataSet.getString("Pressure"))/1e5);
                //SystemInterface testSystem = new SystemSrkEos(Double.parseDouble(dataSet.getString("Temperature")), Double.parseDouble(dataSet.getString("Pressure"))/1e5);
                //SystemInterface testSystem = new SystemPrEos(Double.parseDouble(dataSet.getString("Temperature")), Double.parseDouble(dataSet.getString("Pressure"))/1e5);
                
                testSystem.addComponent("CO2", 10.0);
                //testSystem.addComponent("methane", 10.0);
                testSystem.addComponent("water", 10.0);
                
                //testSystem.addComponent("CO2", 1.0);
                //testSystem.addComponent("water", 1.0);
                //testSystem.addComponent("MDEA", 1.000001);
                //testSystem.chemicalReactionInit();
                //testSystem.createDatabase(true);
                testSystem.setMixingRule(4);
                
                //testSystem.getChemicalReactionOperations().solveChemEq(0);
                //testSystem.getChemicalReactionOperations().solveChemEq(1);
                
                //testSystem.isChemicalSystem(false);
                
                //testSystem.addComponent("NaPlus", 1.0e-10);
                // testSystem.addComponent("methane", 1.1);
                testSystem.init(0);
                double sample1[] = {testSystem.getPressure(), testSystem.getTemperature()};  // temperature
                double standardDeviation1[] = {0.01}; // std.dev temperature    // presure std.dev pressure
                double val = Double.parseDouble(dataSet.getString("L2"));
                double sdev = val/100.0;
                SampleValue sample = new SampleValue(val, sdev, sample1, standardDeviation1);
                sample.setFunction(function);
                sample.setThermodynamicSystem(testSystem);
                sample.setReference(Double.toString(testSystem.getTemperature()));
                //double parameterGuess[] = {4239.63, -232.924, -5.01417, 2.3761};
              //  double parameterGuess[] = {3932.0, -4127.0, -5.89, 8.9}; // HV CO2
                double parameterGuess[] ={3625.8945144520, -2241.2916342019, 3.9121943388, -3.1637627212,0.03};//co2 scsrk-ny
               // double parameterGuess[] = { 4875.0942356587, -123.6011438188, -6.5496550381, 2.1378539395}; // HV methan570
                //double parameterGuess[] = {3204.3057406886, -2753.7379912645, -12.4728330162 , 13.0150379323}; // HV
                //double parameterGuess[] = {8.992E3, -3.244E3, -8.424E0, -1.824E0}; // HV
                // double parameterGuess[] = {-7.132E2, -3.933E2};//, 3.96E0, 9.602E-1}; //, 1.239}; //WS
                function.setInitialGuess(parameterGuess);
                sampleList.add(sample);
            }
        }
        catch(Exception e){
            System.out.println("database error" + e);
        }
        
        //dataSet =  database.getResultSet("NeqSimDataBase",  "SELECT * FROM LuciaData8 WHERE Component='methane' AND ID<3000 AND Temperature<520 AND Y<>NULL AND Y>0.0000000001 ORDER BY Temperature,Pressure");// AND Reference='Houghton1957' AND Reference<>'Nighswander1989' AND Temperature>278.15 AND Temperature<383.15 AND Pressure<60.01325");
        dataSet =  database.getResultSet("NeqSimDataBase",  "SELECT * FROM LuciaData8 WHERE Component='CO2' AND ID<3000 AND Temperature>250 AND Pressure<700000000 AND Temperature<420 AND Y<>NULL AND Y>0.0000000001 ORDER BY Temperature,Pressure");// AND Reference='Houghton1957' AND Reference<>'Nighswander1989' AND Temperature>278.15 AND Temperature<383.15 AND Pressure<60.01325");
        //dataSet =  database.getResultSet("NeqSimDataBase",  "SELECT * FROM LuciaData8 WHERE Component='methane' AND Temperature>273.15 AND Pressure<153000000 AND Y<>NULL AND Y>0.000000001 ORDER BY Temperature,Pressure");
     
        //  ResultSet dataSet =  database.getResultSet("NeqSimDataBase",  "SELECT * FROM activityCoefficientTable WHERE Component1='MDEA' AND Component2='water'");
        //    testSystem.addComponent(dataSet.getString("ComponentSolute"), 1.0);
        //    testSystem.addComponent(dataSet.getString("ComponentSolvent"), 1.0);
        try{
            int p=0;
            System.out.println("adding....");
            while(dataSet.next() && p<150){
                p++;
                BinaryHVParameterFittingToSolubilityData function = new BinaryHVParameterFittingToSolubilityData(0,0);
                
                //SystemInterface testSystem = new SystemFurstElectrolyteEos(Double.parseDouble(dataSet.getString("Temperature")), Double.parseDouble(dataSet.getString("Pressure"))/1e5);
                SystemInterface testSystem = new SystemSrkSchwartzentruberEos(Double.parseDouble(dataSet.getString("Temperature")), Double.parseDouble(dataSet.getString("Pressure"))/1e5);
               // SystemInterface testSystem = new SystemSrkEos(Double.parseDouble(dataSet.getString("Temperature")), Double.parseDouble(dataSet.getString("Pressure"))/1e5);
                //SystemInterface testSystem = new SystemPrEos(Double.parseDouble(dataSet.getString("Temperature")), Double.parseDouble(dataSet.getString("Pressure"))/1e5);
                testSystem.addComponent("CO2", 10.0);
                //testSystem.addComponent("methane", 10.0);
                testSystem.addComponent("water", 10.0);
                
                //testSystem.addComponent("CO2", 1.0);
                //testSystem.addComponent("water", 1.0);
                //testSystem.addComponent("MDEA", 1.000001);
                //testSystem.chemicalReactionInit();
                testSystem.createDatabase(true);
                testSystem.setMixingRule(4);
                
                //testSystem.getChemicalReactionOperations().solveChemEq(0);
                //testSystem.getChemicalReactionOperations().solveChemEq(1);
              
                //testSystem.isChemicalSystem(false);
                
                //testSystem.addComponent("NaPlus", 1.0e-10);
                // testSystem.addComponent("methane", 1.1);
                testSystem.init(0);
                double sample1[] = {testSystem.getPressure(), testSystem.getTemperature()};  // temperature
                double standardDeviation1[] = {0.01}; // std.dev temperature    // presure std.dev pressure
                double val = 1.0-Double.parseDouble(dataSet.getString("Y"));
                double sdev = val/100.0;
                SampleValue sample = new SampleValue(val, sdev, sample1, standardDeviation1);
                sample.setFunction(function);
                sample.setThermodynamicSystem(testSystem);
                sample.setReference(Double.toString(testSystem.getTemperature()));
                //double parameterGuess[] = {4239.63, -232.924, -5.01417, 2.3761};
               // double parameterGuess[] ={3209.3031222305, -2016.3262143626, 4.2211091944, -3.3157456878};//
               // double parameterGuess[] = {5640.0, -3793.0, -5.89, 8.9}; // HV CO2
                double parameterGuess[] ={3625.8945144520, -2241.2916342019, 3.9121943388, -3.1637627212,0.03};//co2 scsrk-ny
                //double parameterGuess[] = { 4875.0942356587, -123.6011438188, -6.5496550381, 2.1378539395}; // HV methane
                //double parameterGuess[] = {3204.3057406886, -2753.7379912645, -12.4728330162 , 13.0150379323}; // HV
                //double parameterGuess[] = {8.992E3, -3.244E3, -8.424E0, -1.824E0}; // HV
                // double parameterGuess[] = {-7.132E2, -3.933E2};//, 3.96E0, 9.602E-1}; //, 1.239}; //WS
                function.setInitialGuess(parameterGuess);
                sample.setDescription(Double.toString(testSystem.getTemperature()));
                sampleList.add(sample);
            }
        }
        catch(Exception e){
            System.out.println("database error" + e);
        }
        
        SampleSet sampleSet = new SampleSet(sampleList);
        optim.setSampleSet(sampleSet);
        
        // do simulations
        //optim.solve();
        //optim.runMonteCarloSimulation();
        //    optim.displayResult();
        optim.displayCurveFit();
        optim.displayResult();
        //        optim.writeToCdfFile("c:/testFit.nc");
        //        optim.writeToTextFile("c:/testFit.txt");
    }
}
