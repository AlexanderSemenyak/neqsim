package thermo.system;

import java.util.*;
import java.io.*;
import thermo.phase.*;
import thermo.component.*;
import MathLib.nonLinearSolver.*;
import chemicalReactions.*;
import physicalProperties.interfaceProperties.*;
import java.awt.*;
import java.io.*;
import java.text.*;
import javax.swing.*;

/* This is the base class of the System classes.
         The purpose of this class is to give common variables and methods to sub classes.
 
         The methods and variables in this class are:
 
                Date			Method								Purpose
                7/3-00		System_Thermo(double, double)		Constructor
                7/3-00		addcomponent(String, double)		addding components from text-file: "Component_Data.txt"
                7/3-00		init()													initializing
 
 
 */


abstract class SystemThermo extends Object implements SystemInterface, Cloneable, java.io.Serializable{//implements System_Interface{
    
    // Class variables
    
    protected double criticalTemperature=0;
    protected String fluidInfo = new String("No Information Available") ;
    protected String fluidName = new String("DefaultName"), modelName="Default";
    protected boolean numericDerivatives = false;
    protected double criticalPressure=0;
    protected double totalNumberOfMoles = 0;
    protected double[] beta = new double[5];
    protected int a, initType=3;
    protected ArrayList componentNames = new ArrayList();
    protected InterphasePropertiesInterface interfaceProp;
    protected int numberOfComponents = 0;
    protected int numberOfPhases = 2;
    protected int maxNumberOfPhases=2;
    protected int attractiveTermNumber=0;
    protected int phase = 2;
    protected int onePhaseType = 1;  // 0 - liquid 1 - gas
    protected int[] phaseType = {1,0,0,0,0};
    protected int[] phaseIndex = {0,1,2,3,4};
    protected ChemicalReactionOperations chemicalReactionOperations;
    protected int mixingRule=1;
    protected boolean chemicalSystem = false, solidPhaseCheck=false, multiPhaseCheck=false, hydrateCheck=false;
    protected boolean checkStability = true;
    protected PhaseInterface[] phaseArray;
    thermo.characterization.TBPCharacterize characterization = null;
    
    
    
    public SystemThermo(){
        phaseArray = new PhaseInterface[5];
    }
    
    
    public SystemThermo(double T, double P){
        this();
        beta[0] = 1.0-1e-7;
        beta[1] = 1.0-1e-7;
        beta[2] = 1.0-1e-7;
        beta[3] = 1.0-1e-7;
        beta[4] = 1.0-1e-7;
    }
    
    public void clearAll(){
        totalNumberOfMoles=0;
        phaseType[0] = 1;
        phaseType[1] = 0;
        numberOfComponents = 0;
        numberOfPhases = 2;
        phase = 2;
        onePhaseType = 1;
        beta[0] = 1.0-1e-7;
        beta[1] = 1.0-1e-7;
        beta[2] = 1.0-1e-7;
        beta[3] = 1.0-1e-7;
        beta[4] = 1.0-1e-7;
        chemicalSystem = false;
        
        double oldTemp = phaseArray[0].getTemperature();
        double oldPres = phaseArray[0].getPressure();
        
        for (int i=0;i<maxNumberOfPhases;i++){
            try{
                phaseArray[i] = (PhaseInterface) phaseArray[i].getClass().newInstance();
            }
            catch(Exception e){
                System.err.println("err " + e.toString());
            }
            phaseArray[i].setTemperature(oldTemp);
            phaseArray[i].setPressure(oldPres);
        }
    }
    
    
    public Object clone(){
        SystemThermo clonedSystem = null;
        try{
            clonedSystem = (SystemThermo) super.clone();
            //clonedSystem.chemicalReactionOperations = (ChemicalReactionOperations) chemicalReactionOperations.clone();
        }
        catch(Exception e) {
            e.printStackTrace(System.err);
        }
        
        clonedSystem.beta = (double[]) beta.clone();
        clonedSystem.phaseType = (int[]) phaseType.clone();
        clonedSystem.phaseIndex = (int[]) phaseIndex.clone();
        
        System.arraycopy(this.beta,0,clonedSystem.beta,0,beta.length);
        System.arraycopy(this.phaseType,0,clonedSystem.phaseType,0,phaseType.length);
        System.arraycopy(this.phaseIndex,0,clonedSystem.phaseIndex,0,phaseIndex.length);
        
        clonedSystem.phaseArray = (PhaseInterface[]) phaseArray.clone();
        for(int i = 0; i < numberOfPhases; i++){
            clonedSystem.phaseArray[i] = (PhaseInterface) phaseArray[i].clone();
        }
        return clonedSystem;
    }
    
    
    public void addPhase(){
        if(maxNumberOfPhases<6){
            ArrayList phaseList = new ArrayList(0);
            for (int i=0;i<numberOfPhases;i++){
                phaseList.add(phaseArray[i]);
            }
            // add the new phase
            phaseList.add(phaseArray[1].clone());
            beta[2] = 1.0e-4;
            // beta[1] -= beta[1]/1.0e5;
            
            PhaseInterface[] phaseArray2 = new PhaseInterface[numberOfPhases+1];
            
            for (int i=0;i<numberOfPhases+1;i++){
                phaseArray2[i] =  (PhaseInterface) phaseList.get(i);
            }
            phaseArray = phaseArray2;
            numberOfPhases++;
            if(maxNumberOfPhases<numberOfPhases) maxNumberOfPhases=numberOfPhases;
        }
    }
    
    
    public void addSolidPhase(){
        while(numberOfPhases<4){
            addPhase();
        }
        phaseArray[3] = new PhasePureComponentSolid();
        phaseArray[3].setTemperature(phaseArray[0].getTemperature());
        phaseArray[3].setPressure(phaseArray[0].getPressure());
        for(int i=0;i<phaseArray[0].getNumberOfComponents();i++){
            phaseArray[3].addcomponent(getPhase(0).getComponent(i).getName(),getPhase(0).getComponent(i).getNumberOfmoles(),getPhase(0).getComponent(i).getNumberOfmoles(),i);
        }
        numberOfPhases = 4;
        maxNumberOfPhases = 4;
    }
    
    public void addHydratePhase2(){
        while(numberOfPhases<4){
            addPhase();
        }
        phaseArray[3] = new PhaseHydrate();
        phaseArray[3].setTemperature(phaseArray[0].getTemperature());
        phaseArray[3].setPressure(phaseArray[0].getPressure());
        for(int i=0;i<phaseArray[0].getNumberOfComponents();i++){
            phaseArray[3].addcomponent(getPhase(0).getComponent(i).getName(),getPhase(0).getComponent(i).getNumberOfmoles(),getPhase(0).getComponent(i).getNumberOfmoles(),i);
        }
        numberOfPhases = 4;
        maxNumberOfPhases = 4;
    }
    
    public void addHydratePhase(){
        addSolidPhase();
        while(numberOfPhases<5){
            addPhase();
        }
        phaseArray[4] = new PhaseHydrate();
        phaseArray[4].setTemperature(phaseArray[0].getTemperature());
        phaseArray[4].setPressure(phaseArray[0].getPressure());
        for(int i=0;i<phaseArray[0].getNumberOfComponents();i++){
            phaseArray[4].addcomponent(getPhase(0).getComponent(i).getName(),getPhase(0).getComponent(i).getNumberOfmoles(),getPhase(0).getComponent(i).getNumberOfmoles(),i);
        }
        numberOfPhases = 5;
        maxNumberOfPhases = 5;
    }
    
    public void setAllComponentsInPhase(int phase){
        //init(0);
        double molesInPhase = 0;
        for (int k=0;k<numberOfPhases;k++){
            for (int i=0;i<numberOfComponents;i++){
                if(phase!=k){
                    System.out.println("moles of comp: " +i + "  " + phaseArray[k].getComponents()[i].getNumberOfMolesInPhase());
                    phaseArray[phase].addMoles(i, (phaseArray[k].getComponents()[i].getNumberOfMolesInPhase()*(1.0-0.01)));
                    phaseArray[k].addMoles(i, -(phaseArray[k].getComponents()[i].getNumberOfMolesInPhase()*(1.0-0.01)));
                    phaseArray[k].getComponents()[i].setx(phaseArray[k].getComponents()[i].getNumberOfMolesInPhase() / phaseArray[k].getNumberOfMolesInPhase());
                    System.out.println("moles of comp after: " +i + "  " + phaseArray[k].getComponents()[i].getNumberOfMolesInPhase());
                }
            }
        }
        initBeta();
        init(1);
    }
    
    public void removePhase(int specPhase){
        
        totalNumberOfMoles -= phaseArray[specPhase].getNumberOfMolesInPhase();
        
        for (int j=1;j<numberOfPhases;j++){
            for (int i=0;i<numberOfComponents;i++){
                phaseArray[j].getComponents()[i].setNumberOfmoles(phaseArray[j].getComponents()[i].getNumberOfmoles()-phaseArray[specPhase].getComponents()[i].getNumberOfMolesInPhase());
            }
        }
        
        
        ArrayList phaseList = new ArrayList(0);
        for (int i=0;i<numberOfPhases;i++){
            if(specPhase!=i) phaseList.add(phaseArray[i]);
        }
        
        phaseArray = new PhaseInterface[numberOfPhases-1];
        
        for (int i=0;i<numberOfPhases-1;i++){
            phaseArray[i] =  (PhaseInterface) phaseList.get(i);
        }
        
        numberOfPhases--;
    }
    
    public void replacePhase(int repPhase, PhaseInterface newPhase){
        for(int i=0;i<2;i++){
            phaseArray[i] = (PhaseInterface) newPhase.clone();
        }
        totalNumberOfMoles = newPhase.getNumberOfMolesInPhase();
    }
    
    
    public SystemInterface phaseToSystem(PhaseInterface newPhase){
        
        for(int i=0;i<newPhase.getNumberOfComponents();i++){
            newPhase.getComponents()[i].setNumberOfmoles(newPhase.getComponents()[i].getNumberOfMolesInPhase());
        }
        
        for(int i=0;i<maxNumberOfPhases;i++){
            phaseArray[i] = (PhaseInterface) newPhase.clone();
        }
        
        totalNumberOfMoles = newPhase.getNumberOfMolesInPhase();
        this.init(0);
        this.init(1);
        return this;
    }
    
    public void addComponent(String componentName, double value, String name, int phase){
        util.database.NeqSimDataBase database = new util.database.NeqSimDataBase();
        java.sql.ResultSet dataSet =  database.getResultSet(("SELECT * FROM COMP WHERE name='"+componentName + "'"));
        double molarmass = 0.0, stddens=0.0, boilp=0.0;
        try{
            dataSet.next();
            molarmass = Double.parseDouble(dataSet.getString("molarmass"))/1000.0;
            stddens = Double.parseDouble(dataSet.getString("stddens"));
            boilp= Double.parseDouble(dataSet.getString("normboil"));
        }
        catch(Exception e){System.out.println("failed " + e.toString());}
        util.unit.Unit unit = new  util.unit.RateUnit(value, name, molarmass, stddens, boilp);
        double SIval = unit.getSIvalue();
        System.out.println("number of moles " + SIval);
        this.addComponent(componentName, SIval, phase);
    }
    
    public void addSalt(String componentName, double value){
        util.database.NeqSimDataBase database = new util.database.NeqSimDataBase();
        java.sql.ResultSet dataSet =  database.getResultSet("SELECT * FROM COMPSALT WHERE SaltName='"+componentName + "'");
        double val1=1e-20, val2=1e-20;
        try{
            dataSet.next();
            String name1 = dataSet.getString("ion1").trim();
            String name2 = dataSet.getString("ion2").trim();
            val1 = Double.parseDouble(dataSet.getString("stoc1"))*value;
            val2 = Double.parseDouble(dataSet.getString("stoc2"))*value;
            this.addComponent(name1, val1);
            this.addComponent(name2, val2);
            System.out.println("ok adding salts. Ions: " + name1 + ", " + name2);
        }
        catch(Exception e){System.out.println("failed " + e.toString());}
    }
    
    public void addComponent(String componentName, double value, String name){
        util.database.NeqSimDataBase database = new util.database.NeqSimDataBase();
        java.sql.ResultSet dataSet =  database.getResultSet(("SELECT * FROM COMP WHERE name='"+componentName + "'"));
        double molarmass = 0.0, stddens=0.0, boilp=0.0;
        try{
            dataSet.next();
            molarmass = Double.parseDouble(dataSet.getString("molarmass"))/1000.0;
            stddens = Double.parseDouble(dataSet.getString("stddens"));
            boilp= Double.parseDouble(dataSet.getString("normboil"));
        }
        catch(Exception e){System.out.println("failed " + e.toString());}
        util.unit.Unit unit = new  util.unit.RateUnit(value, name, molarmass, stddens, boilp);
        double SIval = unit.getSIvalue();
        System.out.println("number of moles " + SIval);
        this.addComponent(componentName, SIval);
    }
    
    public void addComponent(String componentName, double moles, double TC, double PC, double acs){
        addComponent("default", moles);
        for (int i=0;i<numberOfPhases;i++){
            getPhase(phaseIndex[i]).getComponent("default").setComponentName(componentName);
            getPhase(phaseIndex[i]).getComponent(componentName).setTC(TC);
            getPhase(phaseIndex[i]).getComponent(componentName).setPC(PC);
            getPhase(phaseIndex[i]).getComponent(componentName).setAcentricFactor(acs);
        }
        componentNames.remove("default");
    }
    
    public void addComponent(String componentName, double moles){
        totalNumberOfMoles += moles;
        int index=0;
        
        boolean addForFirstTime=true;
        for(int p=0;p<componentNames.size();p++){
            if(((String)componentNames.get(p)).equals(componentName)){ addForFirstTime=false;index=p;
            }
        }
        
        if(addForFirstTime){
            System.out.println("adding " + componentName);
            componentNames.add(componentName);
            for (int i=0;i<maxNumberOfPhases;i++){
                getPhase(phaseIndex[i]).addcomponent(componentName, moles, moles, numberOfComponents);
                getPhase(phaseIndex[i]).setAtractiveTerm(attractiveTermNumber);
            }
            numberOfComponents++;
        }
        else{
            //System.out.println("adding chem reac " + componentName);
            for (int i=0;i<maxNumberOfPhases;i++){
                getPhase(phaseIndex[i]).addMolesChemReac(index, moles, moles);
            }
        }
    }
    
    public void addComponent(String componentName, double moles, int phaseNumber){
        int index=0;
        
        boolean addForFirstTime=true;
        for(int p=0;p<componentNames.size();p++){
            if(((String)componentNames.get(p)).equals(componentName)){
                addForFirstTime=false;
                index=p;
            }
        }
        
        if(addForFirstTime){
            componentNames.add(componentName);
            double k = 1.0;
            totalNumberOfMoles += moles;
            
            for (int i=0;i<maxNumberOfPhases;i++){
                if(phaseNumber==i){
                    k=1.0;
                }
                else{
                    k=1.0e-30;
                }
                getPhase(phaseIndex[i]).addcomponent(componentName, moles, moles*k, numberOfComponents);
                getPhase(phaseIndex[i]).setAtractiveTerm(attractiveTermNumber);
            }
            numberOfComponents++;
        }
        else{
            addComponent(index, moles, phaseNumber);
        }
    }
    
    public void addComponent(int index, double moles, int phaseNumber){
        double k = 1.0;
        
        for (int i=0;i<maxNumberOfPhases;i++){
            if(phaseNumber==i){
                k=1.0;
            }
            else{
                k=1e-30;
            }
            getPhase(phaseIndex[i]).addMolesChemReac(index, moles*k, moles);
        }
        totalNumberOfMoles += moles;
    }
    
    public void removeComponent(String name){
        totalNumberOfMoles -= phaseArray[0].getComponent(name).getNumberOfmoles();
        for (int i=0;i<maxNumberOfPhases;i++){
            getPhase(phaseIndex[i]).removeComponent(name, totalNumberOfMoles, phaseArray[phaseIndex[i]].getComponent(name).getNumberOfMolesInPhase(), phaseArray[phaseIndex[i]].getComponent(name).getComponentNumber());
        }
        //
        componentNames.remove(name);
        //        System.out.println("removing " + componentNames.toString());
        numberOfComponents--;
    }
    
    public double calcBeta() throws util.exception.IsNaNException, util.exception.TooManyIterationsException{
        ComponentInterface[] compArray = getPhases()[0].getComponents();
        
        int i, iterations=0;
        double tolerance = 1.0e-10;
        double avvik=0.0, deriv=0.0, gbeta=0.0, gtest=0, betal=0;
        double nybeta=0, oldbeta=0, nybetal=0,midler=0, minBeta=0, maxBeta=1;
        
        double g0 = -1.0, g1 = 1.0;
        nybeta  = beta[0];
        betal   = 1.0 - beta[0];
        
        for(i=0;i<numberOfComponents;i++){
            midler = (compArray[i].getK()*compArray[i].getz()-1.0)/(compArray[i].getK()-1.0);
            if((midler>minBeta) && (compArray[i].getK()>1.0)) minBeta=midler;
            midler = (1-compArray[i].getz())/(1-compArray[i].getK());
            if((midler<maxBeta) && (compArray[i].getK()<1.0)) maxBeta=midler;
            g0 += compArray[i].getz()*compArray[i].getK();
            g1 +=  -compArray[i].getz()/compArray[i].getK();
        }
        
        if(g0<0){
            beta[1] = 1-tolerance;
            beta[0] = 1-beta[1];
            return beta[0];
        }
        if(g1>0){
            beta[1] = tolerance;
            beta[0] = 1-beta[1];
            return beta[0];
        }
        
        nybeta=(minBeta+maxBeta)/2.0;
        //  System.out.println("guessed beta: " + nybeta + " maxbeta: " +maxBeta + " minbeta: " +minBeta );
        betal = 1-nybeta;
        
        for (i=0;i<numberOfComponents;i++){
            gtest += compArray[i].getz()*(compArray[i].getK()-1.0)/(0.5+0.5*compArray[i].getK()); //beta = 0.5
        }
        
        if (gtest>0){ minBeta = 1.0 - maxBeta; maxBeta =  1.0 - minBeta;}
        
        iterations=0;
        //   System.out.println("gtest: " + gtest);
        do {
            iterations++;
            if (gtest<=0){
                oldbeta = nybeta;
                deriv = 0; gbeta = 0;
                
                for (i=0;i<numberOfComponents;i++){
                    deriv += -(compArray[i].getz()*Math.pow((compArray[i].getK()-1.0),2.0))/
                    Math.pow((1 + (compArray[i].getK()-1)*nybeta),2.0);
                    gbeta += compArray[i].getz()*(compArray[i].getK()-1.0)/(1.0+(compArray[i].getK()-1)*nybeta);
                }
                
                if(gbeta*deriv<0){ minBeta=nybeta;}
                else { maxBeta=nybeta; }
                
                nybeta -= (gbeta/deriv);
                
                //System.out.println("beta: " + nybeta);
                if((nybeta>maxBeta) || (nybeta<minBeta)) nybeta = 0.5*(maxBeta+minBeta);
            }
            
            else {
                oldbeta = betal;
                deriv = 0; gbeta = 0;
                
                for (i=0;i<numberOfComponents;i++){
                    deriv -= (compArray[i].getz()*(compArray[i].getK()-1.0)*(1.0-compArray[i].getK()))/
                    Math.pow((betal + (1 - betal) * compArray[i].getK()),2);
                    gbeta += compArray[i].getz()*(compArray[i].getK()-1.0)/(betal+(-betal+1.0)*compArray[i].getK());
                }
                
                if(gbeta*deriv<0){ minBeta=betal;}
                else { maxBeta=betal; }
                
                betal -= (gbeta/deriv);
                
                if((betal>maxBeta)||(betal<minBeta)) {betal = 0.5*(maxBeta+minBeta);}
                nybeta = 1- betal;
            }
        }
        
        while (((Math.abs(gbeta))>=1.0e-13 && iterations<200) );//|| ((Math.abs(nybeta)-Math.abs(maxBeta))>0.1));
        
        if (iterations>100){
            System.out.println("max iterations in calc beta exceeded" + iterations);
        }
        
        //System.out.println("beta: " + nybeta + "  iterations: " + iterations);
        
        if (nybeta<=tolerance){
            phase = 1;
            nybeta = tolerance;
        }
        else if (nybeta>=1.0-tolerance){
            phase = 0;
            nybeta = 1.0-tolerance;
            // superheated vapour
        }
        else phase = 2;								// two-phase liquid-gas
        
        beta[0] = nybeta;
        beta[1] = 1.0-nybeta;
        
        if(iterations>=200) throw new util.exception.TooManyIterationsException();
        if(Double.isNaN(beta[1])){
            for (i=0;i<numberOfComponents;i++){
                System.out.println("K " + compArray[i].getK());
                System.out.println("z " + compArray[i].getz());
            }
            throw new util.exception.IsNaNException();
        }
        
        
        
        return beta[0];
    }
    
    
    public double initBeta(){
        for (int i=0;i<numberOfPhases;i++){
            beta[i] = phaseArray[phaseIndex[i]].getNumberOfMolesInPhase()/totalNumberOfMoles;
            //System.out.println("beta " + beta[i]);
        }
        return beta[0];
    }
    
    public void initTotalNumberOfMoles(double change){
        totalNumberOfMoles += change;
        // System.out.println("total moles: " + totalNumberOfMoles);
        for (int j=0;j<numberOfPhases;j++){
            for (int i=0;i<numberOfComponents;i++){
                phaseArray[j].getComponents()[i].setNumberOfmoles(phaseArray[1].getComponents()[i].getNumberOfmoles());
            }
        }
    }
    
    public void init_x_y(){
        double x=0.0, z=0;
        for (int j=0;j<numberOfPhases;j++){
            for (int i=0;i<numberOfComponents;i++){
                phaseArray[j].getComponents()[i].setz(phaseArray[j].getComponents()[i].getNumberOfmoles()/totalNumberOfMoles);
                phaseArray[j].getComponents()[i].setx(phaseArray[j].getComponents()[i].getNumberOfMolesInPhase()/phaseArray[j].getNumberOfMolesInPhase());
                x += phaseArray[j].getComponents()[i].getx();
                z += phaseArray[j].getComponents()[i].getz();
            }
        }
        //                                System.out.println("x: " + x);
        //                                System.out.println("z: " + z);
    }
    
    
    public void calc_x_y(){
        
        for (int j=0;j<numberOfPhases;j++){
            for (int i=0;i<numberOfComponents;i++){
                if (j==0) phaseArray[j].getComponents()[i].setx(phaseArray[0].getComponents()[i].getK()*phaseArray[j].getComponents()[i].getz() / (1-beta[0]+beta[0]*phaseArray[0].getComponents()[i].getK()));
                if (j==1) phaseArray[j].getComponents()[i].setx(phaseArray[0].getComponents()[i].getz()/(1.0-beta[0]+beta[0]*phaseArray[0].getComponents()[i].getK()));//
                //phaseArray[j].getComponents()[i].setx(phaseArray[0].getComponents()[i].getx() / phaseArray[0].getComponents()[i].getK());
                //  System.out.println("comp: " + j + i + " " + compar[j][i].getx());
            }
        }
    }
    
    public void reset_x_y(){
        
        for (int j=0;j<numberOfPhases;j++){
            for (int i=0;i<numberOfComponents;i++){
                phaseArray[j].getComponents()[i].setx(phaseArray[0].getComponents()[i].getz());
            }
        }
    }
    
    public void init(int type){ // type = 0 start init type =1 gi nye betingelser
        if(numericDerivatives){
            initNumeric(type);
        }
        else{
            initAnalytic(type);
        }
    }
    
    public void init(int type,int phase){ // type = 0 start init type =1 gi nye betingelser
        if(numericDerivatives){
            initNumeric(type,phase);
        }
        else{
            initAnalytic(type,phase);
        }
    }
    
    public void init(){
        this.init(initType);
    }
    
    public void initAnalytic(int type){ // type = 0 start init type =1 gi nye betingelser
        if(type==0){
            numberOfPhases = maxNumberOfPhases;
            phaseType[0] = 1;
            for (int i=0; i<maxNumberOfPhases; i++){
                phaseType[i] = 0;
                beta[i] = 1.0-1e-10;
                phaseIndex[i] = i;
            }
            phaseType[0] = 1;
            for (int i=0; i<numberOfPhases; i++){
                beta[i] = 1.0-1e-10;
                phaseIndex[i] = i;
                getPhase(phaseIndex[i]).init(totalNumberOfMoles, numberOfComponents, type, phaseType[i], beta[i]);
            }
        }
        
        
        if(type==1) {
            for (int i=0; i<numberOfPhases; i++){
                getPhase(phaseIndex[i]).init(totalNumberOfMoles, numberOfComponents, 1, phaseType[i], beta[i]);
            }
            
            for (int i=0; i<numberOfPhases; i++){
                for (int j=0; j<numberOfComponents; j++){
                    getPhase(phaseIndex[i]).getComponents()[j].fugcoef(phaseArray[i]);
                }
            }
        }
        
        
        
        if(type==2) // calculate T and P derivatives
        {
            for (int i=0; i<numberOfPhases; i++){
                getPhase(phaseIndex[i]).init(totalNumberOfMoles, numberOfComponents, 2, phaseType[i], beta[i]);
            }
            
            for (int i=0; i<numberOfPhases; i++){
                for (int j=0; j<numberOfComponents; j++){
                    getPhase(phaseIndex[i]).getComponents()[j].fugcoef(phaseArray[i]);
                    getPhase(phaseIndex[i]).getComponents()[j].logfugcoefdT(phaseArray[i]);
                    getPhase(phaseIndex[i]).getComponents()[j].logfugcoefdP(phaseArray[i]);
                }
            }
        }
        
        if(type==3)  // calculate all derivatives
        {
            for (int i=0; i<numberOfPhases; i++){
                getPhase(phaseIndex[i]).init(totalNumberOfMoles, numberOfComponents, 3, phaseType[i], beta[i]);
            }
            
            for (int i=0; i<numberOfPhases; i++){
                for (int j=0; j<numberOfComponents; j++){
                    getPhase(phaseIndex[i]).getComponents()[j].fugcoef(phaseArray[i]);
                    getPhase(phaseIndex[i]).getComponents()[j].logfugcoefdT(phaseArray[i]);
                    getPhase(phaseIndex[i]).getComponents()[j].logfugcoefdP(phaseArray[i]);
                    getPhase(phaseIndex[i]).getComponents()[j].logfugcoefdN(phaseArray[i]);
                }
            }
        }
        
        if(type==4)  // calculate all derivatives numerically
        {
            for (int i=0; i<numberOfPhases; i++){
                getPhase(phaseIndex[i]).init(totalNumberOfMoles, numberOfComponents, 3, phaseType[i], beta[i]);
            }
            for (int i=0; i<numberOfPhases; i++){
                for (int j=0; j<numberOfComponents; j++){
                    getPhase(phaseIndex[i]).getComponents()[j].fugcoef(phaseArray[i]);
                    getPhase(phaseIndex[i]).getComponents()[j].fugcoefDiffTempNumeric(phaseArray[i], numberOfComponents, getPhase(phaseIndex[i]).getTemperature(), getPhase(phaseIndex[i]).getPressure());
                    getPhase(phaseIndex[i]).getComponents()[j].fugcoefDiffPresNumeric(phaseArray[i], numberOfComponents, getPhase(phaseIndex[i]).getTemperature(), getPhase(phaseIndex[i]).getPressure());
                }
            }
        }
    }
    
    public void initAnalytic(int type, int phase){
        if(type==1) {
            phaseArray[phase].init(totalNumberOfMoles, numberOfComponents, 1, phaseType[phase], beta[phase]);
            
            for (int j=0; j<numberOfComponents; j++){
                phaseArray[phase].getComponents()[j].fugcoef(phaseArray[phase]);
            }
        }
    }
    
    public void initNumeric(int type){
        initNumeric(type,1);
    }
    
    public void initNumeric(int type, int phasen){
        if(type<2){
            initAnalytic(type);
        }
        else if(type>=2){
            double[][] gasfug=new double[2][getPhases()[0].getNumberOfComponents()];
            double[][] liqfug=new double[2][getPhases()[0].getNumberOfComponents()];
            
            double dt = getTemperature()/1e6;
            setTemperature(getTemperature()+dt);
            init(1);
            
            for(int i=0;i<getPhases()[0].getNumberOfComponents();i++){
                gasfug[0][i] = Math.log(getPhases()[0].getComponents()[i].getFugasityCoeffisient());
                liqfug[0][i] = Math.log(getPhases()[1].getComponents()[i].getFugasityCoeffisient());
            }
            
            setTemperature(getTemperature()-2*dt);
            init(1);
            
            for(int i=0;i<getPhases()[0].getNumberOfComponents();i++){
                gasfug[1][i] = Math.log(getPhases()[0].getComponents()[i].getFugasityCoeffisient());
                liqfug[1][i] = Math.log(getPhases()[1].getComponents()[i].getFugasityCoeffisient());
            }
            
            for(int i=0;i<getPhases()[0].getNumberOfComponents();i++){
                getPhase(0).getComponent(i).setdfugdt((gasfug[0][i]-gasfug[1][i])/(2*dt));
                getPhase(1).getComponent(i).setdfugdt((liqfug[0][i]-liqfug[1][i])/(2*dt));
            }
            
            setTemperature(getTemperature()+dt);
            
            double dp = getPressure()/1.0e6;
            setPressure(getPressure()+dp);
            init(1);
            
            for(int i=0;i<getPhases()[0].getNumberOfComponents();i++){
                gasfug[0][i] = Math.log(getPhases()[0].getComponents()[i].getFugasityCoeffisient());
                liqfug[0][i] = Math.log(getPhases()[1].getComponents()[i].getFugasityCoeffisient());
            }
            
            setPressure(getPressure()-2*dp);
            init(1);
            
            for(int i=0;i<getPhases()[0].getNumberOfComponents();i++){
                gasfug[1][i] = Math.log(getPhases()[0].getComponents()[i].getFugasityCoeffisient());
                liqfug[1][i] = Math.log(getPhases()[1].getComponents()[i].getFugasityCoeffisient());
            }
            
            for(int i=0;i<getPhases()[0].getNumberOfComponents();i++){
                getPhase(0).getComponent(i).setdfugdp((gasfug[0][i]-gasfug[1][i])/(2*dp));
                getPhase(1).getComponent(i).setdfugdp((liqfug[0][i]-liqfug[1][i])/(2*dp));
            }
            
            setPressure(getPressure()+dp);
            init(1);
            
            if(type==3) {
                for(int phase = 0;phase<2;phase++){
                    for(int k=0;k<getPhases()[0].getNumberOfComponents();k++){
                        double dn = getPhases()[phase].getComponents()[k].getNumberOfMolesInPhase()/1.0e6;
                        
                        addComponent(k,dn,phase);
                        //  initBeta();
                        init_x_y();
                        init(1);
                        
                        for(int i=0;i<getPhases()[0].getNumberOfComponents();i++){
                            liqfug[0][i] = Math.log(getPhases()[phase].getComponents()[i].getFugasityCoeffisient());
                        }
                        
                        addComponent(k, -2.0*dn, phase);
                        //  initBeta();
                        init_x_y();
                        init(1);
                        
                        for(int i=0;i<getPhases()[0].getNumberOfComponents();i++){
                            //   gasfug[1][i] = Math.log(getPhases()[0].getComponents()[i].getFugasityCoeffisient());
                            liqfug[1][i] = Math.log(getPhases()[phase].getComponents()[i].getFugasityCoeffisient());
                        }
                        addComponent(k, dn, phase);
                        init_x_y();
                        init(1);
                        
                        for(int i=0;i<getPhases()[0].getNumberOfComponents();i++){
                            getPhase(phase).getComponent(k).setdfugdn(i, (liqfug[0][i]-liqfug[1][i])/(2*dn));
                            getPhase(phase).getComponent(k).setdfugdx(i, (liqfug[0][i]-liqfug[1][i])/(2*dn)*getPhase(phase).getNumberOfMolesInPhase());
                        }
                        //initBeta();
                        
                    }
                }
            }
        }
    }
    
    public void initNumeric(){
        double[][] gasfug=new double[2][getPhases()[0].getNumberOfComponents()];
        double[][] liqfug=new double[2][getPhases()[0].getNumberOfComponents()];
        double[][] gasnumericDfugdt=new double[2][getPhases()[0].getNumberOfComponents()];
        double[][] liqnumericDfugdt=new double[2][getPhases()[0].getNumberOfComponents()];
        double[][] gasnumericDfugdp=new double[2][getPhases()[0].getNumberOfComponents()];
        double[][] liqnumericDfugdp=new double[2][getPhases()[0].getNumberOfComponents()];
        double[][][] gasnumericDfugdn=new double[2][getPhases()[0].getNumberOfComponents()][getPhases()[0].getNumberOfComponents()];
        double[][][] liqnumericDfugdn=new double[2][getPhases()[0].getNumberOfComponents()][getPhases()[0].getNumberOfComponents()];
        
        double dt = getTemperature()/1e5;
        setTemperature(getTemperature()+dt);
        init(1);
        
        for(int i=0;i<getPhases()[0].getNumberOfComponents();i++){
            gasfug[0][i] = Math.log(getPhases()[0].getComponents()[i].getFugasityCoeffisient());
            liqfug[0][i] = Math.log(getPhases()[1].getComponents()[i].getFugasityCoeffisient());
        }
        
        setTemperature(getTemperature()-2*dt);
        init(1);
        
        for(int i=0;i<getPhases()[0].getNumberOfComponents();i++){
            gasfug[1][i] = Math.log(getPhases()[0].getComponents()[i].getFugasityCoeffisient());
            liqfug[1][i] = Math.log(getPhases()[1].getComponents()[i].getFugasityCoeffisient());
            gasnumericDfugdt[0][i] = (gasfug[0][i] - gasfug[1][i])/(2*dt);
            liqnumericDfugdt[0][i] = (liqfug[0][i] - liqfug[1][i])/(2*dt);
            phaseArray[0].getComponents()[i].setdfugdt(gasnumericDfugdt[0][i]);
            phaseArray[1].getComponents()[i].setdfugdt(liqnumericDfugdt[0][i]);
        }
        
        setTemperature(getTemperature()+dt);
        
        double dp = getPressure()/1e5;
        setPressure(getPressure()+dp);
        init(1);
        
        for(int i=0;i<getPhases()[0].getNumberOfComponents();i++){
            gasfug[0][i] = Math.log(getPhases()[0].getComponents()[i].getFugasityCoeffisient());
            liqfug[0][i] = Math.log(getPhases()[1].getComponents()[i].getFugasityCoeffisient());
        }
        
        
        setPressure(getPressure()-2*dp);
        init(1);
        
        for(int i=0;i<getPhases()[0].getNumberOfComponents();i++){
            gasfug[1][i] = Math.log(getPhases()[0].getComponents()[i].getFugasityCoeffisient());
            liqfug[1][i] = Math.log(getPhases()[1].getComponents()[i].getFugasityCoeffisient());
            gasnumericDfugdp[0][i] = (gasfug[0][i] - gasfug[1][i])/(2*dp);
            liqnumericDfugdp[0][i] = (liqfug[0][i] - liqfug[1][i])/(2*dp);
            phaseArray[0].getComponents()[i].setdfugdp(gasnumericDfugdp[0][i]);
            phaseArray[1].getComponents()[i].setdfugdp(liqnumericDfugdp[0][i]);
        }
        
        setPressure(getPressure()+dp);
        init(1);
        
        for(int phase = 0;phase<2;phase++){
            for(int k=0;k<getPhases()[0].getNumberOfComponents();k++){
                double dn = getPhases()[phase].getComponents()[k].getNumberOfMolesInPhase()/1.0e6;
                if(dn<1e-12) dn = 1e-12;
                
                addComponent(k,dn,phase);
                //initBeta();
                init_x_y();
                init(1);
                
                for(int i=0;i<getPhases()[0].getNumberOfComponents();i++){
                    liqfug[0][i] = Math.log(getPhases()[phase].getComponents()[i].getFugasityCoeffisient());
                }
                
                addComponent(k, -2.0*dn, phase);
                //initBeta();
                init_x_y();
                init(1);
                
                for(int i=0;i<getPhases()[0].getNumberOfComponents();i++){
                    //   gasfug[1][i] = Math.log(getPhases()[0].getComponents()[i].getFugasityCoeffisient());
                    liqfug[1][i] = Math.log(getPhases()[phase].getComponents()[i].getFugasityCoeffisient());
                }
                
                for(int i=0;i<getPhases()[0].getNumberOfComponents();i++){
                    if(phase==0){
                        gasnumericDfugdn[0][k][i] = (liqfug[0][i] - liqfug[1][i])/(2*dn);
                        phaseArray[0].getComponents()[i].setdfugdn(k, gasnumericDfugdn[0][k][i]);
                        phaseArray[0].getComponents()[i].setdfugdx(k, gasnumericDfugdn[0][k][i]*phaseArray[0].getNumberOfMolesInPhase());
                    }
                    
                    if(phase==1){
                        liqnumericDfugdn[0][k][i] = (liqfug[0][i] - liqfug[1][i])/(2*dn);
                        phaseArray[1].getComponents()[i].setdfugdn(k, liqnumericDfugdn[0][k][i]);
                        phaseArray[1].getComponents()[i].setdfugdx(k, liqnumericDfugdn[0][k][i]*phaseArray[1].getNumberOfMolesInPhase());
                    }
                }
                
                addComponent(k, dn, phase);
                //initBeta();
                init_x_y();
                init(1);
            }
        }
    }
    
    
    public void initPhysicalProperties(){
        for(int i=0;i<numberOfPhases;i++){
            getPhase(phaseIndex[i]).initPhysicalProperties();
        }
        calcInterfaceProperties();
    }
    
    public void initRefPhases(){
        for(int i=0;i<numberOfPhases;i++){
            getPhase(phaseIndex[i]).initRefPhases(false);
        }
    }
    
    /**    /** specify the type model for the physical properties you want to use.
     *     * Type:   Model
     *     * 0       Orginal/default
     *     * 1       Water
     *     * 2       Glycol
     *     * 3       Amine
     */
    
    public void setPhysicalPropertyModel(int type){
        for(int i=0;i<numberOfPhases;i++){
            getPhase(phaseIndex[i]).setPhysicalProperties(type);
        }
    }
    
    
    public void chemicalReactionInit(){ // type = 0 start init type =1 gi nye betingelser
        chemicalReactionOperations = new ChemicalReactionOperations(this);
        chemicalSystem = chemicalReactionOperations.hasRections();
        if(chemicalSystem) this.setMixingRule(mixingRule);
    }
    
    public ChemicalReactionOperations getChemicalReactionOperations(){ // type = 0 start init type =1 gi nye betingelser
        return chemicalReactionOperations;
    }
    
    public PhaseInterface getGasPhase(){
        for (int phase=0;phase<numberOfPhases;phase++){
            if(phaseArray[phase].getPhaseType()==1)  return phaseArray[phase];
        }
        System.out.println("No gas phase at current state.");
        return null;
    }
    
    public PhaseInterface getLiquidPhase(){
        for (int phase=0;phase<numberOfPhases;phase++){
            if(phaseArray[phase].getPhaseType()==0)  return phaseArray[phase];
        }
        System.out.println("No liquid phase at current state.");
        return null;
    }
    
    public PhaseInterface getPhase(int i){
        return phaseArray[i];
    }
    
    public boolean isChemicalSystem(){
        return chemicalSystem;
    }
    
    public void isChemicalSystem(boolean temp){
        chemicalSystem = temp;
    }
    
    public double getAntoineVaporPressure(double temp){
        return phaseArray[0].getAntoineVaporPressure(temp);
    }
    
    public double getTC(){
        return criticalTemperature;
    }
    
    public double getPC(){
        return criticalPressure;
    }
    
    public void setTC(double TC){
        criticalTemperature = TC;
    }
    
    public void  setPC(double PC){
        criticalPressure = PC;
    }
    
    public void setMixingRule(int type){
        mixingRule = type;
        for(int i=0;i<numberOfPhases;i++){
            getPhase(phaseIndex[i]).setMixingRule(type);
        }
    }
    
    public void setMixingRuleGEmodel(String name){
        for(int i=0;i<numberOfPhases;i++){
             getPhase(phaseIndex[i]).setMixingRuleGEModel(name);
        }
    }
    
    public void setMixingRule(String typename, String GEmodel){
        System.out.println("here");
        setMixingRuleGEmodel(GEmodel);
        setMixingRule(typename);
   }
    
    public void setMixingRule(String typename){
        int var=0;
        if(typename.equals("no")) var = 1;
        else if(typename.equals("classic")) var = 2;
        else if(typename.equals("HV")) var = 4;
        else if(typename.equals("WS")) var = 5;
        else var = 1;
        this.setMixingRule(var);
    }
    
    
    public String[] getComponentNames(){
        ArrayList components = new ArrayList();
        
        for (int j=0; j<numberOfComponents; j++){
            components.add(phaseArray[0].getComponents()[j].getName());
        }
        String[] componentList = new String[components.size()];
        for (int j=0; j<numberOfComponents; j++){
            componentList[j] = (String) components.get(j);
        }
        return componentList;
    }
    
    public void setNumberOfPhases(int number){
        this.numberOfPhases = number;
    }
    
    public void useVolumeCorrection(boolean volcor){
        for(int i=0;i<numberOfPhases;i++){
            getPhase(phaseIndex[i]).useVolumeCorrection(volcor);
        }
    }
    
    public PhaseInterface[] getPhases(){
        return phaseArray;
    }
    
    public double getGibbsEnergy(){
        double gibbsEnergy=0;
        for(int i=0;i<numberOfPhases;i++){
            gibbsEnergy += getPhase(phaseIndex[i]).getGibbsEnergy();
        }
        return gibbsEnergy;
    }
    
    public double getEnthalpy(){
        double enthalpy=0;
        for(int i=0;i<numberOfPhases;i++){
            enthalpy += getPhase(phaseIndex[i]).getEnthalpy();
        }
        return enthalpy;
    }
    
    public double getViscosity(){
        double visc=0;
        for(int i=0;i<numberOfPhases;i++){
            visc += beta[i]*getPhase(phaseIndex[i]).getPhysicalProperties().getViscosity();
        }
        return visc;
    }
    
    public double getKinematicViscosity(){
        return getViscosity()/getDensity();
    }
    
    public double getConductivity(){
        double cond=0;
        for(int i=0;i<numberOfPhases;i++){
            cond += beta[i]*getPhase(phaseIndex[i]).getPhysicalProperties().getConductivity();
        }
        return cond;
    }
    
    public double getInternalEnergy(){
        double internalEnergy=0;
        for(int i=0;i<numberOfPhases;i++){
            internalEnergy += getPhase(phaseIndex[i]).getInternalEnergy();
        }
        return internalEnergy;
    }
    
    public double getHelmholtzEnergy(){
        double helmholtzEnergy=0;
        for(int i=0;i<numberOfPhases;i++){
            helmholtzEnergy += getPhase(phaseIndex[i]).getHelmholtzEnergy();
        }
        return helmholtzEnergy;
    }
    
    public double getEntropy(){
        double entropy=0;
        for(int i=0;i<numberOfPhases;i++){
            entropy += getPhase(phaseIndex[i]).getEntropy();
        }
        return entropy;
    }
    
    public double getMolarVolume(){
        double volume=0;
        for(int i=0;i<numberOfPhases;i++){
            volume = volume + beta[i]*getPhase(phaseIndex[i]).getMolarVolume();
        }
        return volume;
    }
    
    public double getDensity(){
        double density=0;
        for(int i=0;i<numberOfPhases;i++){
            density = density + 1.0e5*(getPhase(phaseIndex[i]).getMolarMass()*beta[i]/getPhase(phaseIndex[i]).getMolarVolume());
        }
        return density;
    }
    
    
    public double getZ(){
        double Z=0;
        for(int i=0;i<numberOfPhases;i++){
            Z += beta[i]*getPhase(phaseIndex[i]).getZ();
        }
        return Z;
    }
    
    public double getMolarMass(){
        double tempVar=0;
        for(int i=0;i<phaseArray[0].getNumberOfComponents();i++){
            tempVar = tempVar + phaseArray[0].getComponents()[i].getz()*phaseArray[0].getComponents()[i].getMolarMass();
        }
        return tempVar;
    }
    
    
    
    public void setTemperature(double newTemperature){
        for(int i=0;i<maxNumberOfPhases;i++){
            getPhase(phaseIndex[i]).setTemperature(newTemperature);
        }
    }
    public double getNumberOfMoles(){
        return totalNumberOfMoles;
    }
    
    public void setPhaseType(int phaseToChange, int newPhaseType){
        // System.out.println("cha" + newPhaseType);
        phaseType[phaseToChange] = newPhaseType;
    }
    
    public void setPhase(PhaseInterface phase, int numb){
        double temp = phaseArray[numb].getTemperature();
        double pres = phaseArray[numb].getPressure();
        this.phaseArray[numb] = phase;
        this.phaseArray[numb].setTemperature(temp);
        this.phaseArray[numb].setPressure(pres);
    }
    
    public void reInitPhaseType(){
        phaseType[0] = 1;
        phaseType[1] = 0;
        phaseType[2] = 0;
        phaseType[3] = 0;
    }
    
    public boolean doSolidPhaseCheck(){
        return solidPhaseCheck;
    }
    
    
    public void setPressure(double newPressure){
        for(int i=0;i<maxNumberOfPhases;i++){
            getPhase(phaseIndex[i]).setPressure(newPressure);
        }
    }
    
    public void setTemperature(double newPressure, int phase){
        phaseArray[phase].setTemperature(newPressure);
    }
    
    public double getTemperature(){
        return phaseArray[0].getTemperature();
    }
    
    public double getTemperature(int phaseNumber){
        return phaseArray[phaseNumber].getTemperature();
    }
    
    public double getPressure(){
        return phaseArray[0].getPressure();//
    }
    
    public double getPressure(int phaseNumber){
        return phaseArray[phaseNumber].getPressure();
    }
    
    public double getBeta(){
        return beta[0];
    }
    
    public double getBeta(int phase){
        return beta[phase];
    }
    
    public void setAtractiveTerm(int i){
        for(int k=0;k<maxNumberOfPhases;k++){
            phaseArray[k].setAtractiveTerm(i);
        }
    }
    
    public int getNumberOfPhases(){
        return numberOfPhases;
    }
    
    public void setBeta(double b){
        beta[0] = b;
        beta[1] = 1-b;
    }
    
    public void setBeta(int phase, double b){
        beta[phase] = b;
    }
    
    public double getVolume(){
        double volume=0;
        for(int i=0;i<numberOfPhases;i++){
            volume += getPhase(phaseIndex[i]).getMolarVolume()*getPhase(phaseIndex[i]).getNumberOfMolesInPhase();
        }
        return volume;
    }
    
    public double getCorrectedVolume(){
        initPhysicalProperties();
        double volume=0;
        for(int i=0;i<numberOfPhases;i++){
            volume += getPhase(phaseIndex[i]).getMolarMass()/getPhase(phaseIndex[i]).getPhysicalProperties().getDensity()*getPhase(phaseIndex[i]).getNumberOfMolesInPhase();
        }
        return volume;
    }
    
    public double getdVdPtn(){
        double dVdP=0.0;
        for(int i=0;i<numberOfPhases;i++){
            dVdP += 1.0/getPhase(phaseIndex[i]).getdPdVTn();
        }
        return dVdP;
    }
    
    public double getdVdTpn(){
        double dVdT=0.0;
        for(int i=0;i<numberOfPhases;i++){
            dVdT += - getPhase(phaseIndex[i]).getdPdTVn()/getPhase(phaseIndex[i]).getdPdVTn();
        }
        return dVdT;
    }
    
    public double getCp(){
        double cP=0.0;
        for(int i=0;i<numberOfPhases;i++){
            cP +=  getPhase(phaseIndex[i]).getCp();
        }
        return cP;
    }
    
    public void calcInterfaceProperties(){
        interfaceProp = new InterfaceProperties(this);
        interfaceProp.init();
    }
    
    public InterphasePropertiesInterface getInterphaseProperties(){
        return interfaceProp;
    }
    
    public String write(){
        // create a String description of the system
        return new String("");
    }
    
    public void normalizeBeta(){
        double tot=0.0;
        for(int i = 0;i<numberOfPhases;i++){
            tot += beta[i];
        }
        for(int i = 0;i<numberOfPhases;i++){
            beta[i] = beta[i]/tot;
        }
    }
    
    
    public void display(){
        display(this.getFluidName());
    }
    
    public String[][] createTable(String name){
        System.out.println("number of comps : " + numberOfComponents + " number of phases " + numberOfPhases);
        initPhysicalProperties();
        DecimalFormat nf = new DecimalFormat();
        nf.setMaximumFractionDigits(5);
        nf.applyPattern("#.#####E0");
        String[][] table = new String[60][6];
        String[] names = {"", "Phase 1", "Phase 2", "Phase 3", "Unit"};
        table[0][0] = "";
        table[0][1] = "";
        table[0][2] = "";
        table[0][3] = "";
        StringBuffer buf = new StringBuffer();
        FieldPosition test = new FieldPosition(0);
        for(int i=0;i<numberOfPhases;i++){
            for(int j=0;j<getPhases()[0].getNumberOfComponents();j++){
                table[j+1][0] = getPhases()[0].getComponents()[j].getName();
                buf = new StringBuffer();
                table[j+1][i+1] = nf.format(getPhase(phaseIndex[i]).getComponents()[j].getx(), buf, test).toString();
                table[j+1][4] = "[-]";
            }
            buf = new StringBuffer();
            table[getPhases()[0].getNumberOfComponents()+2][0] = "Density";
            table[getPhases()[0].getNumberOfComponents()+2][i+1] = nf.format(getPhase(phaseIndex[i]).getPhysicalProperties().getDensity(), buf, test).toString();
            table[getPhases()[0].getNumberOfComponents()+2][4] = "[kg/m^3]";
            
            //  Double.longValue(system.getPhase(phaseIndex[i]).getBeta());
            
            buf = new StringBuffer();
            table[getPhases()[0].getNumberOfComponents()+3][0] = "PhaseFraction";
            table[getPhases()[0].getNumberOfComponents()+3][i+1] = nf.format(getPhase(phaseIndex[i]).getBeta(), buf, test).toString();
            table[getPhases()[0].getNumberOfComponents()+3][4] = "[-]";
            
            buf = new StringBuffer();
            table[getPhases()[0].getNumberOfComponents()+4][0] = "MolarMass";
            table[getPhases()[0].getNumberOfComponents()+4][i+1] = nf.format(getPhase(phaseIndex[i]).getMolarMass()*1000, buf, test).toString();
            table[getPhases()[0].getNumberOfComponents()+4][4] = "[kg/kmol]";
            
            buf = new StringBuffer();
            table[getPhases()[0].getNumberOfComponents()+5][0] = "Cp";
            table[getPhases()[0].getNumberOfComponents()+5][i+1] = nf.format((getPhase(phaseIndex[i]).getCp()/(getPhase(phaseIndex[i]).getNumberOfMolesInPhase() *getPhase(phaseIndex[i]).getMolarMass()*1000)), buf, test).toString();
            table[getPhases()[0].getNumberOfComponents()+5][4] = "[kJ/kg*K]";
            
            buf = new StringBuffer();
            table[getPhases()[0].getNumberOfComponents()+7][0] = "Viscosity";
            table[getPhases()[0].getNumberOfComponents()+7][i+1] = nf.format((getPhase(phaseIndex[i]).getPhysicalProperties().getViscosity()), buf, test).toString();
            table[getPhases()[0].getNumberOfComponents()+7][4] = "[kg/m*sec]";
            
            buf = new StringBuffer();
            table[getPhases()[0].getNumberOfComponents()+8][0] = "Conductivity";
            table[getPhases()[0].getNumberOfComponents()+8][i+1] = nf.format(getPhase(phaseIndex[i]).getPhysicalProperties().getConductivity(), buf, test).toString();
            table[getPhases()[0].getNumberOfComponents()+8][4] = "[W/m*K]";
            
            buf = new StringBuffer();
            table[getPhases()[0].getNumberOfComponents()+10][0] = "Pressure";
            table[getPhases()[0].getNumberOfComponents()+10][i+1] = Double.toString(getPhase(phaseIndex[i]).getPressure());
            table[getPhases()[0].getNumberOfComponents()+10][4] = "[bar]";
            
            buf = new StringBuffer();
            table[getPhases()[0].getNumberOfComponents()+11][0] = "Temperature";
            table[getPhases()[0].getNumberOfComponents()+11][i+1] = Double.toString(getPhase(phaseIndex[i]).getTemperature());
            table[getPhases()[0].getNumberOfComponents()+11][4] = "[K]";Double.toString(getPhase(phaseIndex[i]).getTemperature());
            
            buf = new StringBuffer();
            table[getPhases()[0].getNumberOfComponents()+13][0] = "Stream";
            table[getPhases()[0].getNumberOfComponents()+13][i+1] = name;
            table[getPhases()[0].getNumberOfComponents()+13][4] = "-";
        }
        return table;
    }
    
    public void display(String name){
        JDialog dialog = new JDialog(new JFrame(), "System-Report");
        Container dialogContentPane = dialog.getContentPane();
        dialogContentPane.setLayout(new FlowLayout());
        
        String[] names = {"", "Phase 1", "Phase 2", "Phase 3", "Unit"};
        String[][] table = createTable(name);
        System.out.println("here");
        JTable Jtab = new JTable(table,names);
        JScrollPane scrollpane = new JScrollPane(Jtab);
        dialogContentPane.add(scrollpane);
        dialog.pack();
        dialog.show();
    }
    
    public void write(String name, String filename, boolean newfile){
        String[][] table = createTable(name);
        dataPresentation.fileHandeling.createTextFile.TextFile file = new dataPresentation.fileHandeling.createTextFile.TextFile();
        if(newfile) file.newFile(filename);
        file.setOutputFileName(filename);
        file.setValues(table);
        file.createFile();
    }
    
    public void resetDatabase(){
        util.database.NeqSimDataBase database = new util.database.NeqSimDataBase();
        database.execute("delete FROM intertemp");
        database.execute("delete FROM comptemp");
        System.out.println("ok - reseting");
    }
    
    public void createDatabase(boolean reset){
        if(reset) resetDatabase();
        util.database.NeqSimDataBase database = new util.database.NeqSimDataBase();
        String names = new String();
        
        for(int k=0; k<getPhase(0).getNumberOfComponents()-1; k++){
            names += "'" + this.getComponentNames()[k] + "', ";
            
        }
        names += "'" + this.getComponentNames()[getPhase(0).getNumberOfComponents()-1] + "'";
        
        database.execute("insert into comptemp SELECT * FROM comp WHERE name IN (" + names + ")");
        database.execute("insert into intertemp SELECT distinct * FROM INTER WHERE comp1 IN (" + names + ") AND comp2 IN (" + names + ")");
        database.execute("delete FROM intertemp WHERE comp1=comp2");
        System.out.println("ok " + names);
    }
    
    /** Indexed getter for property phaseIndex.
     * @param index Index of the property.
     * @return Value of the property at <CODE>index</CODE>.
     */
    public int getPhaseIndex(int index) {
        return phaseIndex[index];
    }
    
    /** Indexed setter for property phaseIndex.
     * @param index Index of the property.
     * @param phaseIndex New value of the property at <CODE>index</CODE>.
     */
    public void setPhaseIndex(int index, int phaseIndex) {
        this.phaseIndex[index] = phaseIndex;
    }
    
    /** Setter for property solidPhaseCheck.
     * @param solidPhaseCheck New value of property solidPhaseCheck.
     */
    public void setSolidPhaseCheck(boolean solidPhaseCheck) {
        this.solidPhaseCheck = solidPhaseCheck;
        init(0);
        if(solidPhaseCheck) addSolidPhase();
        init(0);
    }
    
    public void setHydrateCheck(boolean hydrateCheck) {
        this.hydrateCheck = hydrateCheck;
        init(0);
        if(hydrateCheck) addHydratePhase();
        init(0);
    }
    
    /** Getter for property multiPhaseCheck.
     * @return Value of property multiPhaseCheck.
     */
    public boolean doMultiPhaseCheck() {
        return multiPhaseCheck;
    }
    
    /** Setter for property multiPhaseCheck.
     * @param multiPhaseCheck New value of property multiPhaseCheck.
     */
    public void setMultiPhaseCheck(boolean multiPhaseCheck) {
        this.multiPhaseCheck = multiPhaseCheck;
    }
    
    /** Getter for property initType.
     * @return Value of property initType.
     */
    public int getInitType() {
        return initType;
    }
    
    /** Setter for property initType.
     * @param initType New value of property initType.
     */
    public void setInitType(int initType) {
        this.initType = initType;
    }
    
    /** Getter for property numericDerivatives.
     * @return Value of property numericDerivatives.
     */
    public boolean isNumericDerivatives() {
        return numericDerivatives;
    }
    
    /** Setter for property numericDerivatives.
     * @param numericDerivatives New value of property numericDerivatives.
     */
    public void setNumericDerivatives(boolean numericDerivatives) {
        this.numericDerivatives = numericDerivatives;
    }
    
    public void checkStability(boolean val){
        checkStability = val;
    }
    
    public boolean checkStability(){
        return checkStability;
    }
    
    /** Getter for property hydrateCheck.
     * @return Value of property hydrateCheck.
     */
    public boolean doHydrateCheck() {
        return hydrateCheck;
    }
    
    public void save(String name){
        FileOutputStream fout = null;
        ObjectOutputStream out = null;
        try{
            fout = new FileOutputStream(name);
            out = new ObjectOutputStream(fout);
            out.writeObject(this);
            out.close();
            
        }
        catch(Exception e){
            System.out.println(e.toString());
        }
    }
    
    public java.lang.String getMixingRuleName() {
        return ((PhaseEosInterface) getPhase(0)).getMixingRule().getMixingRuleName();
    }
    /** Getter for property info.
     * @return Value of property info.
     */
    public java.lang.String getFluidInfo() {
        return fluidInfo;
    }
    
    /** Setter for property info.
     * @param info New value of property info.
     */
    public void setFluidInfo(java.lang.String info) {
        this.fluidInfo = fluidInfo;
    }
    
    /** Getter for property fluidName.
     * @return Value of property fluidName.
     */
    public java.lang.String getFluidName() {
        return fluidName;
    }
    
    /** Setter for property fluidName.
     * @param fluidName New value of property fluidName.
     */
    public void setFluidName(java.lang.String fluidName) {
        this.fluidName = fluidName;
    }
    
    public boolean characterize(){
        characterization = new thermo.characterization.TBPCharacterize(this);
        if(characterization.groupTBPfractions()){
            characterization.solveABCD();
            return  true;
        }
        else{
            System.out.println("not able to generate pluss fraction");
            return false;
        }
    }
    
    public boolean addPlusFraction(int start, int end){
        if(characterization.groupTBPfractions()){
            characterization.generateTBPFractions(start,end);
            return true;
        }
        else{
            System.out.println("not able to generate pluss fraction");
            return false;
        }
    }
    
    /** Getter for property characterization.
     * @return Value of property characterization.
     */
    public thermo.characterization.TBPCharacterize getCharacterization() {
        return characterization;
    }
    
    public void calcKIJ(boolean ok){
        thermo.mixingRule.EosMixingRules.calcEOSInteractionParameters= ok;
        for(int i=0;i<numberOfPhases;i++){
            ((PhaseEosInterface)getPhase(i)).getMixingRule().setCalcEOSInteractionParameters(ok);
        }
    }
    
    /** Getter for property modelName.
     * @return Value of property modelName.
     */
    public java.lang.String getModelName() {
        return modelName;
    }
    
    /** Setter for property modelName.
     * @param modelName New value of property modelName.
     */
    public void setModelName(java.lang.String modelName) {
        this.modelName = modelName;
    }
    
  /*
    public void TPflash()
{
    init(0);
    calcBeta();
    calc_x_y();
    init(1);
    operations.TPflash(this, compar, numberOfPhases, numberOfComponents);
    }
   
    public void TPflash(double temp, double pres)
{
    setTemperature(temp);
    setPressure(pres);
    TPflash();
    }
   */
    
    /*
    public double constantDutyFlash(double duty){
        return operations.constantDutyFlash(this, compar, numberOfPhases, numberOfComponents, duty);
    }
     
    public double constantDutyFlash(double temp, double duty){
        setTemperature(temp);
        return constantDutyFlash(duty);
    }
     
    public double constantPDutyFlash(double duty, double dpdt){
        return operations.constantPDutyFlash(this, compar, numberOfPhases, numberOfComponents, duty, dpdt);
    }
     
    public double constantPDutyFlash(double pres, double duty, double dpdt){
        setPressure(pres);
        return constantPDutyFlash(duty, dpdt);
    }
     
     
    public double bubblePointPressureFlash(){
        return operations.bubblePointPressureFlash(this, compar, numberOfPhases, numberOfComponents);
    }
     
    public double bubblePointTemperatureFlash(){
        return operations.bubblePointTemperatureFlash(this, compar, numberOfPhases, numberOfComponents);
    }
     
    public double dewPointPressureFlash(){
        return operations.dewPointPressureFlash(this, compar, numberOfPhases, numberOfComponents);
    }
     
    public double dewPointTemperatureFlash(){
        return operations.dewPointTemperatureFlash(this, compar, numberOfPhases, numberOfComponents);
    }
     
     
    public double bubblePointPressureFlash(double temp){
        setTemperature(temp);
        beta[0]=1;
        beta[1]=0.000001;
        return bubblePointPressureFlash();
    }
     
    public double bubblePointTemperatureFlash(double pres){
        beta[0]=1;
        beta[1]=0.000001;
        setPressure(pres);
        return bubblePointTemperatureFlash();
    }
     
     
    public double dewPointPressureFlash(double temp){
        beta[0]=0.000001;
        beta[1]=1;
        setTemperature(temp);
        return dewPointPressureFlash();
    }
     
    public double dewPointTemperatureFlash(double pres){
        beta[0]=0.000001;
        beta[1]=1-beta[0];
        setPressure(pres);
        return dewPointTemperatureFlash();
    }
     
    //  public double calcDewPointPressure(){
    //          return operations.calcDewPointPressure(this, compar, numberOfPhases, numberOfComponents);
    //          }
     
     
    // public double calcDewPointPressure(double temp){
    //          setTemperature(temp);
    //          return calcDewPointPressure();
    //     }
  /*
  public double[][] calcBubblePointPressureLine(double tempLow, double tempHigh, int numbPoints){
            double temp;
            double dT = (tempHigh - tempLow) / numbPoints ;
            double[][] points = new double[3][numbPoints];
     
            for (int i=0; i<numbPoints;i++){
              temp = tempLow + dT*i;
              points[0][i] = temp;
              points[1][i] =   bubblePointPressureFlash(points[0][i]);
              //points[1][i] = bubblePointFlash(temp);
            }
     
            for (int i=0; i<numbPoints;i++){
             points[2][i] =    bubblePointPressureFlash(points[0][i], 1);
          }
            return points;
          }
     
    public double[][] calcBubblePointTemperatureLine(double presLow, double presHigh, int numbPoints){
        double pres;
        double dP = (presHigh - presLow) / numbPoints ;
        double[][] points = new double[2][numbPoints];
     
        for (int i=0; i<numbPoints;i++){
            pres = presLow + dP*i;
            points[1][i] = pres;
            points[0][i] =   bubblePointTemperatureFlash(points[1][i]);
            System.out.println("pres: " + points[0][i]);
            // points[1][i] = bubblePointFlash(temp);
        }
            /*
            for (int i=0; i<numbPoints;i++){
             pres = presLow + dP*i;
             points[3][i] = pres;
             points[2][i] =   dewPointTemperatureFlash(points[3][i]);
            }
        return points;
    }
     
     
    public double[][] calcBubblePointPressureLine(double tempLow, double tempHigh, int numbPoints){
        double temp;
        double dT = (tempHigh - tempLow) / numbPoints ;
        double[][] points = new double[2][];
     
        points[0] = new double[numbPoints];
        points[1] = new double[numbPoints];
     
        //points[2] = new double[numbPoints*2];
        //points[3] = new double[numbPoints*2];
     
     
        for (int i=0; i<numbPoints;i++){
            temp = tempLow + dT*i;
            points[0][i] = temp;
            points[1][i] =   bubblePointPressureFlash(points[0][i]);
            System.out.println(points[1][i]);
            //  points[1][i] = bubblePointFlash(temp);
        }
            /*
            tempLow = tempLow+30;
            setPressure(1);
            setTemperature(tempLow);
            init(0);
     
            for (int i=0; i<numbPoints;i++){
              temp = tempLow + dT*i;
            //  points[2][i] = dewPointTemperatureFlash(points[1][i]);
            //  System.out.println(points[2][i]);
            //  points[3][i] = points[1][i] ;
              //System.out.println(points[3][i]);
     
              if(i<=numbPoints){
              points[2][i] = temp;
              points[3][i] =  dewPointPressureFlash(points[2][i]);
              //System.out.println(points[3][i]);
              }
              else{
                points[2][i] = dewPointTemperatureFlash(points[3][i-1]+0.1);
            //   System.out.println(points[2][i]);
                points[3][i] = points[3][i-1]+0.1 ;
            //    System.out.println(points[3][i]);
              }
            }
     
        return points;
    }
     
     
     
    public double[][] calcPhaseEnvelope(double tempLow, double dPmax, double dTmax, double distCrit){
        double temp=0, pres=0, startPres=0;
        double[][] points = new double[2][];
        double[][] points2 = new double[4][];
        double[][] points3 = new double[8][];
        boolean moreLines=false;
        int np=0;
        points[0] = new double[10000];
        points[1] = new double[10000];
        //points[2] = new double[1000];
        int speceq=0;
        for (int i=0;i<numberOfComponents;i++)
        {
            if(compar[0][i].getTC()<compar[0][speceq].getTC()) {
                speceq = compar[0][i].getComponentNumber();
            }
        }
     
        pres = 1;
        temp =   compar[0][speceq].getAntoineVaporTemperature(pres);
     
        setPressure(pres);
        System.out.println("Ideal temp2: " + temp);
     
        setBeta(1e-10);
     
        for(int i=0;i<1000;i++){
            temp = temp + i*4;
            setTemperature(temp);
            setPressure(pres);
            init(0);
            double tempNy = bubblePointTemperatureFlash(pres);
            if(!Double.isNaN(tempNy)) temp=tempNy;
            System.out.println("Ideal temp3: " + tempNy);
            if(!Double.isNaN(tempNy)) break;
        }
     
        setPressure(pres);
        setTemperature(temp);
     
        System.out.println("Ideal temp3: " + temp);
     
        setBeta(1e-10);
        //init(0);
     
        //     System.out.println("Ideal pres: " + pres);
        //     System.out.println("Ideal temp: " + temp);
     
        sysNewtonRhapson nonLinSolver = new sysNewtonRhapson(this, 2, numberOfComponents);
        nonLinSolver.solve(1);
        nonLinSolver.calcInc(1);
     
        startPres = getPressure();
     
        for (np=1;np<9500;np++){
     
            nonLinSolver.calcInc(np);
            nonLinSolver.solve(np);
     
            if(Double.isNaN(getTemperature()) || getPressure()<startPres){
                points[0][np-1] = points[0][np-3];
                points[1][np-1] = points[1][np-3];
                //         System.out.println("avbryter" +  np);
                break;
            }
            //    System.out.println("Ideal pres: " + getPressure());
            //    System.out.println("Ideal temp: " + getTemperature());
            points[0][np-1]=getTemperature();
            points[1][np-1]=getPressure();
     
     
        }
     
        int ncr = nonLinSolver.getNpCrit();
        int ncr2 = np-ncr;
        System.out.println("ncr: " + ncr + "  ncr2 . " + ncr2);
     
        points2[0] = new double[ncr+1];
        points2[1] = new double[ncr+1];
        points2[2] = new double[ncr2-2];
        points2[3] = new double[ncr2-2];
     
        for (int i=0;i<ncr;i++){
            points2[0][i] = points[0][i];
            points2[1][i] = points[1][i];
        }
        points2[0][ncr] = getTC();
        points2[1][ncr] = getPC();
        points2[2][0] = getTC();
        points2[3][0] = getPC();
     
        for (int i=1;i<(ncr2-2);i++){
            points2[2][i] = points[0][i+ncr-1];
            points2[3][i] = points[1][i+ncr-1];
        }
        /*
        // ny test
        speceq=0;
        for (int i=0;i<numberOfComponents;i++)
        {
            if(compar[0][i].getTC()>compar[0][speceq].getTC()) {
                speceq = compar[0][i].getComponentNumber();
            }
        }
     
        pres = points2[3][ncr2-3];
        temp =   compar[0][speceq].getAntoineVaporTemperature(pres);
     
        setPressure(pres);
        System.out.println("Ideal temp2: " + temp);
     
        setPhaseType(0,0);
        setPhaseType(1,1);
        setBeta(0.9999999);
     
        for(int i=0;i<1000;i++){
            temp = temp - 2*i;
            setTemperature(temp);
            setPressure(pres);
            init(0);
            double tempNy = dewPointTemperatureFlash(pres);
            if(!Double.isNaN(tempNy)) temp=tempNy;
            System.out.println("Ideal temp3: " + tempNy);
            if(!Double.isNaN(tempNy)) break;
        }
     
        setPressure(pres);
        setTemperature(temp);
     
        System.out.println("Ideal temp3: " + temp + "  " + points2[2][ncr2-3]);
     
        if(Math.abs(getTemperature()-points2[2][ncr2-4])>2){
            moreLines=true;
     
            System.out.println("moreLines er true!");
            nonLinSolver = new sysNewtonRhapson(this, 2, numberOfComponents);
            nonLinSolver.solve(1);
            nonLinSolver.calcInc(1);
     
            startPres = getPressure();
     
            for (np=1;np<9500;np++){
     
                nonLinSolver.calcInc(np);
                nonLinSolver.solve(np);
     
                if(Double.isNaN(getTemperature()) || getPressure()<startPres-1){
     
                    System.out.println("avbryter" +  np);
                    points[0][np-1] = points[0][np-3];
                    points[1][np-1] = points[1][np-3];
                    break;
                }
                //    System.out.println("Ideal pres: " + getPressure());
                //    System.out.println("Ideal temp: " + getTemperature());
                points[0][np-1]=getTemperature();
                points[1][np-1]=getPressure();
     
     
            }
     
            ncr = nonLinSolver.getNpCrit();
            ncr2 = np-ncr;
            //     System.out.println("ncr: " + ncr + "  ncr2 . " + ncr2);
            points3[0] = new double[ncr+1];
            points3[1] = new double[ncr+1];
            points3[2] = new double[ncr2-2];
            points3[3] = new double[ncr2-2];
            points3[4] = new double[points2[0].length];
            points3[5] = new double[points2[0].length];
            points3[6] = new double[points2[3].length];
            points3[7] = new double[points2[3].length];
     
     
            for (int i=0;i<ncr;i++){
                points3[0][i] = points[0][i];
                points3[1][i] = points[1][i];
            }
            points3[0][ncr] = getTC();
            points3[1][ncr] = getPC();
            points3[2][0] = getTC();
            points3[3][0] = getPC();
     
            for (int i=1;i<(ncr2-2);i++){
                points3[2][i] = points[0][i+ncr-1];
                points3[3][i] = points[1][i+ncr-1];
            }
     
            for (int i=0;i<points2[0].length;i++){
                points3[4][i] = points2[0][i];
                points3[5][i] = points2[1][i];
            }
     
            for (int i=0;i<points2[3].length;i++){
                points3[6][i] = points2[2][i];
                points3[7][i] = points2[3][i];
            }
     
     
        }
        if(moreLines){
            return points3;
        }
        else{
            return points2;
        }
    }
     
     
    public double[][] calcPXcurve(double temp, int numbPoints){
     
        double xny=0;
        double dx = 0;
     
        double[][] points = new double[4][numbPoints];
     
        dx = 1 / (double)numbPoints;
     
     
        setPressure(compar[0][0].getAntoineVaporPressure(temp));
        init(0);
     
        for (int i=0; i<numbPoints;i++){
            xny = dx*i;
            compar[0][1].setNumberOfmoles(xny);
            compar[0][0].setNumberOfmoles(1-xny);
     
            init(2);
     
            points[0][i] = xny;
            points[1][i] = bubblePointPressureFlash(temp);
            //System.out.println(points[1][i]);
        }
     
        xny=0;
     
        setPressure(compar[0][0].getAntoineVaporPressure(temp));
        init(0);
     
        for (int i=0; i<numbPoints;i++){
            xny = dx*i;
            compar[0][1].setNumberOfmoles(xny);
            compar[0][0].setNumberOfmoles(1-xny);
     
            init(2);
            points[2][i] = xny;
            points[3][i] = dewPointPressureFlash(temp);
            //          System.out.println(points[3][i]);
        }
     
        return points;
    }
     
    public double[][] calcTXcurve(double pres, int numbPoints){
        double xny=0;
        double dx = 0;
     
        double[][] points = new double[4][numbPoints];
     
        dx = 1 / (double)numbPoints;
     
        setPressure(pres);
        setTemperature(compar[0][0].getAntoineVaporTemperature(pres));
        //    System.out.println("Temperature" + getTemperature());
        init(0);
     
        for (int i=0; i<numbPoints;i++){
            xny = dx*i;
            compar[0][1].setNumberOfmoles(xny);
            compar[0][0].setNumberOfmoles(1-xny);
     
            init(2);
     
            points[0][i] = xny;
     
            points[1][i] = bubblePointTemperatureFlash(pres);
            //  System.out.println("Temp : " + points[1][i]);
        }
     
        xny=0;
     
        setPressure(pres);
        setTemperature(compar[0][0].getAntoineVaporTemperature(pres));
        //System.out.println("Temperature" + getTemperature());
        init(0);
     
        for (int i=0; i<numbPoints;i++){
            xny = dx*i;
            compar[0][1].setNumberOfmoles(xny);
            compar[0][0].setNumberOfmoles(1-xny);
     
            init(2);
     
            points[2][i] = xny;
            points[3][i] = dewPointTemperatureFlash(pres);
            //System.out.println("Temp : " + points[3][i]);
        }
     
        return points;
    }
     
      /*
  public double[] calcDewPointPressureLine(double tempLow, double tempHigh, int numbPoints){
            double temp;
            double dT = (tempHigh - tempLow) / numbPoints ;
            double[] points = new double[numbPoints];
     
            for (int i=0; i<numbPoints;i++){
              temp = tempLow + dT*i;
              points[i] = calcDewPointPressure(temp);
            }
            return points;
          }
     
   public double[][] calcBubblePointPressureSurface(double tempLow, double tempHigh, double presLow, double presHigh,int numbPoints){
           double temp, pres;
            double dT = (tempHigh - tempLow) / numbPoints ;
            double dP = (presHigh - presLow) / numbPoints ;
     
            double[][] points = new double[numbPoints][numbPoints];
     
            for (int j=0; j<numbPoints;j++){
              pres = presLow + j*dP;
              setPressure(pres);
              for (int i=0; i<numbPoints;i++){
                temp = tempLow + dT*i;
              points[j][i] = calcBubblePointPressure(temp);
            }}
            return points;
          }
     
  public double[][] calcDewPointPressureSurface(double tempLow, double tempHigh, double presLow, double presHigh,int numbPoints){
            double temp, pres;
            double dT = (tempHigh - tempLow) / numbPoints ;
            double dP = (presHigh - presLow) / numbPoints ;
     
            double[][] points = new double[numbPoints][numbPoints];
     
            for (int j=0; j<numbPoints;j++){
              pres = presLow + j*dP;
              setPressure(pres);
              for (int i=0; i<numbPoints;i++){
                temp = tempLow + dT*i;
              points[j][i] = calcDewPointPressure(temp);
            }}
            return points;
          }
     
     
     
     
     
    public double[][] calcPXsurf3D(double temp,int type){
        double step = 0.1;
        int x2=0;
        double pres=0;
        int j=0;
     
        double[][] points = new double[100][3];
        setTemperature(temp);
     
        //setPressure(compar[0][0].getAntoineVaporPressure(temp));
        System.out.println("press: " + compar[0][0].getAntoineVaporPressure(temp));
        init(0);
        int dx=1;
        double oldpres=compar[0][0].getAntoineVaporPressure(temp);
     
        for (double x0=1; x0>=-0.0001;x0=x0-step){
            // System.out.println("x0 = " + x0);
            setPressure(oldpres);
            init(0);
            System.out.flush();
            if(Math.abs(x0)<0.00001){x0=0;}
     
            int k=0;
            for(double x1=(1-x0); x1>=-0.0001; x1=x1-step){
                k++;
                if(Math.abs(x1)<0.00001){x1=0;}
                if(x1==1){setPressure(compar[0][1].getAntoineVaporPressure(temp));init(0);}
                if((x1==0)&&(x0==0)){setPressure(compar[0][2].getAntoineVaporPressure(temp));init(0);}
     
     
                // System.out.println("j := " +j);
                System.out.flush();
                // System.out.println(" " +x0 + " " + x1 + " " + (1-x0-x1));
     
                compar[0][0].setNumberOfmoles(x0);
                compar[0][1].setNumberOfmoles(x1);
                compar[0][2].setNumberOfmoles(1-x0-x1);
     
                init(1);
                if(type==1){
                    pres = dewPointPressureFlash(temp);}
                else {
                    pres = bubblePointPressureFlash(temp);}
     
                if(k==0){oldpres=pres;};
                System.out.println(pres);
                points[j][0] = x0;
                points[j][1] = x1;
                //points[j][2] = 1-x0-x1;
                points[j][2] = pres;
     
                j++;
     
     
     
     
                // System.out.println("x0 = " + x0);
     
            }
     
            // System.out.println("ny x0 = " + x0);
     
        }
                /*
              xny=0;
     
              setPressure(compar[0][0].getAntoineVaporPressure(temp));
              init(0);
     
              for (int i=0; i<numbPoints;i++){
              xny = dx*i;
              compar[0][1].setNumberOfmoles(xny);
              compar[0][0].setNumberOfmoles(1-xny);
     
              init(1);
     
              points[2][i] = xny;
              points[3][i] = dewPointPressureFlash(temp);
                  System.out.println(points[3][i]);
              }
     
        return points;
    }
     
    public double[][] calcTXsurf3D(double pres, int type){
        double step = 0.1;
        int x2=0;
        double temp=0;
        int j=0;
        setPressure(pres);
     
        double[][] points = new double[100][3];
     
        //setPressure(compar[0][0].getAntoineVaporPressure(temp));
        System.out.println("temp : " + compar[0][0].getAntoineVaporTemperature(pres));
        init(0);
        int dx=1;
        double oldtemp=compar[0][0].getAntoineVaporTemperature(pres);
     
        for (double x0=1; x0>=-0.0001;x0=x0-step){
            // System.out.println("x0 = " + x0);
            setTemperature(oldtemp);
            init(0);
            System.out.flush();
            if(Math.abs(x0)<0.00001){x0=0;}
     
            int k=0;
            for(double x1=(1-x0); x1>=-0.0001; x1=x1-step){
                k++;
                if(Math.abs(x1)<0.00001){x1=0;}
                if(x1==1){setTemperature(compar[0][1].getAntoineVaporTemperature(pres));init(0);}
                if((x1==0)&&(x0==0)){setTemperature(compar[0][2].getAntoineVaporTemperature(pres));init(0);}
     
     
                // System.out.println("j := " +j);
                System.out.flush();
                // System.out.println(" " +x0 + " " + x1 + " " + (1-x0-x1));
     
                compar[0][0].setNumberOfmoles(x0);
                compar[0][1].setNumberOfmoles(x1);
                compar[0][2].setNumberOfmoles(1-x0-x1);
     
                init(1);
     
                if(type==1){
                    temp = dewPointTemperatureFlash(pres);}
                else {
                    temp = bubblePointTemperatureFlash(pres);}
     
                if(k==0){oldtemp=temp;};
                System.out.println(temp);
                points[j][0] = x0;
                points[j][1] = x1;
                //points[j][2] = 1-x0-x1;
                points[j][2] = temp;
     
                j++;
     
            }
     
     
        }
     
        return points;
    }
     */
}