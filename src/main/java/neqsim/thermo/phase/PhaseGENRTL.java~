/*
 * PhaseGENRTL.java
 *
 * Created on 17. juli 2000, 20:51
 */

package thermo.phase;

import thermo.component.*;

/**
 *
 * @author  Even Solbraa
 * @version 
 */
public class PhaseGENRTL extends PhaseGE {

    double[][] alpha;
    String[][] mixRule;
    double[][] intparam;
    double[][] Dij;
    double GE=0.0;
    /** Creates new PhaseGENRTLmodifiedHV */
   
    public PhaseGENRTL() {
        super();
    }
    
    public PhaseGENRTL(PhaseInterface phase, double[][] alpha, double[][] Dij, String[][] mixRule, double[][] intparam) {
        super();
        componentArray = new ComponentGeNRTL[alpha[0].length];
        this.mixRule = mixRule;
        this.alpha = alpha;
        this.Dij = Dij;
        this.intparam = intparam;
        for (int i=0; i < alpha[0].length; i++){
            componentArray[i] = new ComponentGeNRTL(phase.getComponents()[i].getName(), phase.getComponents()[i].getNumberOfmoles(), phase.getComponents()[i].getNumberOfMolesInPhase(), phase.getComponents()[i].getComponentNumber());
        }
    }
    
    public void addcomponent(String componentName, double moles, double molesInPhase, int compNumber){
        super.addcomponent(molesInPhase);
        componentArray[compNumber] = new ComponentGeNRTL(componentName, moles, molesInPhase,compNumber);
    }
    
    public void setAlpha(double[][] alpha){
        this.alpha = alpha;
    }
    
    public void setDij(double[][] Dij){
        this.Dij = Dij;
    }
   
    
    public double getExessGibbsEnergy(PhaseInterface phase, int numberOfComponents, double temperature, double pressure, int phasetype){
         GE = 0; 
        
        //   ComponentGeNRTLInterface[] comp_Array = new ComponentGeNRTLInterface[phase.getNumberOfComponents()];
        //    comp_Array = (ComponentGeNRTLInterface[]) this.getcomponentArray();
        //   comp_Array = new ComponentGENRTLmodifiedHV(componentArray[.getName());
        for (int i=0; i < numberOfComponents; i++){
         //   componentArray[i] = new ComponentGENRTLmodifiedHV(phase.getComponents()[i].getName(), phase.getComponents()[i].getNumberOfmoles(), phase.getComponents()[i].getNumberOfMolesInPhase(), phase.getComponents()[i].getComponentNumber());
        //    componentArray.init(temperature, pressure, phase.getComponents()[i].getNumberOfmoles(), phase.getBeta(), phaseType);
            GE += phase.getComponents()[i].getx()*Math.log(((ComponentGeNRTL) componentArray[i]).getGamma(phase, numberOfComponents, temperature,  pressure, phasetype, alpha, Dij, intparam, mixRule));
        //  System.out.println("gamma i : " + componentArray[i].getx());
        }
        
        return R*temperature*numberOfMolesInPhase*GE;//phase.getNumberOfMolesInPhase()*
    }
    
    public double getGibbsEnergy(){
        return R*temperature*numberOfMolesInPhase*(GE+Math.log(pressure));
    }
    
    public double getExessGibbsEnergy(){
        double GE = getExessGibbsEnergy(this, numberOfComponents, temperature,  pressure, phaseType);
        return GE;
    }
}
