/*
 * PhaseInterface.java
 *
 * Created on 3. juni 2000, 14:45
 */

package thermo.phase;

import thermo.component.*;
/**
 *
 * @author  Even Solbraa
 * @version
 */
public interface PhaseInterface extends Cloneable{
    
    public void addcomponent(String componentName, double molesInPhase, double moles,int compNumber);
    public void init(double totalNumberOfMoles, int numberOfComponents,int type, int phase, double beta);
    public void initPhysicalProperties();
    public ComponentInterface[] getcomponentArray();
    public double getMolarVolume();
    public void setComponentArray(ComponentInterface[] components);
    public double getDensity();
    public void removeComponent(String componentName, double moles,double molesInPhase, int compNumber);
    public double getFugacity(int compNumb);
    public double getTotalVolume();
    public double getMolalMeanIonicActivity(int comp1, int comp2);
    public double getMixGibbsEnergy();
    public double getExessGibbsEnergy();
    public void setBeta(double beta);
    public void setProperties(PhaseInterface phase);
    public void useVolumeCorrection(boolean volcor);
    public boolean useVolumeCorrection();
    public double getBeta();
    public double getWtFrac(int component);
    public ComponentInterface getComponent(int i);
    public double getActivityCoefficient(int k, int p);
    public void setPressure(double pres);
    public double getpH();
    public void normalize();
    public double getLogPureComponentFugacity(int k);
    public void addMolesChemReac(int component, double dn, double totdn);
    public void setPhysicalProperties();
    public ComponentInterface getComponent(String name);
    public int getInitType();
    public void setAtractiveTerm(int i);
    public void resetMixingRule(int type);
    public void setTemperature(double temperature);
    public void addMolesChemReac(int component, double dn);
    public physicalProperties.physicalPropertySystem.PhysicalPropertiesInterface getPhysicalProperties();
    double molarVolume(double pressure, double temperature,double  A, double B, int phase) throws util.exception.IsNaNException, util.exception.TooManyIterationsException;
    public double geta(PhaseInterface phase, double temperature, double pressure, int numbcomp);
    public double getb(PhaseInterface phase, double temperature, double pressure, int numbcomp);
    public double getAntoineVaporPressure(double temp);
    double calcA(PhaseInterface phase, double temperature, double pressure, int numbcomp);
    double calcB(PhaseInterface phase, double temperature, double pressure, int numbcomp);
    double calcAi(int compNumb, PhaseInterface phase, double temperature, double pressure, int numbcomp);
    double calcAiT(int compNumb, PhaseInterface phase, double temperature, double pressure, int numbcomp);
    double calcAij(int compNumb, int j, PhaseInterface phase, double temperature, double pressure, int numbcomp);
    double calcBij(int compNumb, int j,PhaseInterface phase, double temperature, double pressure, int numbcomp);
    double calcAT(int compNumb, PhaseInterface phase, double temperature, double pressure, int numbcomp);
    double calcBi(int compNumb,PhaseInterface phase, double temperature, double pressure, int numbcomp);
    double calcR();
    double getf();
    double getg();
    public void addMoles(int component, double dn);
    public double getEnthalpy();
    public double getEntropy();
    public double getCp();
    public double getHresTP();
    public double getGresTP();
    public double getCv();
    public double getCpres();
    public double getZ();
    public void setPhysicalProperties(int type);
    public double getPseudoCriticalPressure();
    public double getPseudoCriticalTemperature();
    PhaseInterface getPhase();
    public int getNumberOfComponents();
    public void setNumberOfComponents(int k);
    public double getJouleThomsonCoefficient();
    public void setMixingRule(int type);
    ComponentInterface[] getComponents();
    public double getNumberOfMolesInPhase();
    public int getPhaseType();
    public double getPureComponentFugacity(int k);
    // public double getInfiniteDiluteFugacity(int k);
    public double getInfiniteDiluteFugacity(int k, int p);
    public double getHelmholtzEnergy();
    public int getNumberOfMolecularComponents();
    public int getNumberOfIonicComponents();
    public double getFugacity(String compName);
    //double calcA2(PhaseInterface phase, double temperature, double pressure, int numbcomp);
    //double calcB2(PhaseInterface phase, double temperature, double pressure, int numbcomp);
    public double geta();
    public double getb();
    public double getA();
    public double getB();
    //      public double getBi();
    public double getAT();
    public double getATT();
    //     public double getAiT();
    public double getGibbsEnergy();
    public Object clone();
    public double getTemperature();
    public double getPressure();
    public double getMolarMass();
    public double getInternalEnergy();
    public double getdPdrho();
    public double getdPdTVn();
    public double getdPdVTn();
    public double Fn();
    public double FT();
    public double FV();
    public double FD();
    public double FB();
    public double gb();
    public double fb();
    public double gV();
    public double fv();
    public double FnV();
    public double FnB();
    public double FTT();
    public double FBT();
    public double FDT();
    public double FBV();
    public double FBB();
    public double FDV();
    public double FBD();
    public double FTV();
    public double FVV();
    public double gVV();
    public double gBV();
    public double gBB();
    public double fVV();
    public double fBV();
    public double fBB();
    public double dFdT();
    public double dFdV();
    public double dFdTdV();
    public double dFdVdV();
    public double dFdTdT();
    public double getOsmoticCoefficientOfWater();
    public double getOsmoticCoefficient(int watNumb);
    public double getMeanIonicActivity(int comp1, int comp2);
    public double getLogInfiniteDiluteFugacity(int k, int p);
    public double getActivityCoefficient(int k);
    public int getMixingRuleNumber();
    public void initRefPhases(boolean onlyPure);
    public thermo.phase.PhaseInterface getRefPhase(int index);
    public thermo.phase.PhaseInterface[] getRefPhase() ;
    public void setRefPhase(int index, thermo.phase.PhaseInterface refPhase);
    public void setRefPhase(thermo.phase.PhaseInterface[] refPhase);
    public int getPhysicalPropertyType();
    public void setPhysicalPropertyType(int physicalPropertyType);
    public void setParams(PhaseInterface phase, double[][] alpha, double[][] Dij, double[][] DijT, String[][] mixRule, double[][] intparam);
}