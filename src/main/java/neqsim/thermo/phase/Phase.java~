/*
 * Phase.java
 *
 * Created on 8. april 2000, 23:38
 */

package thermo.phase;

import thermo.component.*;
import thermo.phase.*;
import thermo.*;
import java.util.*;
/**
 *
 * @author  Even Solbraa
 * @version
 */
abstract class Phase extends Object implements  PhaseInterface, ThermodynamicConstantsInterface, Cloneable, java.io.Serializable {
    
    public ComponentInterface[] componentArray;
    public int numberOfComponents=0, physicalPropertyType = 1;
    protected boolean useVolumeCorrection = true;
    public physicalProperties.physicalPropertySystem.PhysicalPropertiesInterface physicalProperty;
    public double numberOfMolesInPhase = 0, molarVolume=1.0;
    public boolean chemSyst=false;
    public int numberOfIons=0;
    protected double diElectricConstant=0;
    double Z=1;
    double beta=1.0;
    int initType=0, mixingRuleNumber=0;
    double chem_ref [], TBPfractions[];
    double n_mol[];
    double b_element[];
    double temperature=0, pressure=0;
    PhaseInterface[] refPhase = null;
    int phaseType=0;
    
    // Class methods
    
    
    /** Creates new Phase */
    
    public Phase() {
        componentArray = new ComponentInterface[MAX_NUMBER_OF_COMPONENTS];
    }
    
    public Phase(Phase phase) {
        
    }
    
    public Object clone(){
        
        Phase clonedPhase = null;
        
        try{
            clonedPhase = (Phase) super.clone();
        }
        catch(Exception e) {
            e.printStackTrace(System.err);
        }
        
        clonedPhase.componentArray = (ComponentInterface[]) this.componentArray.clone();
        for(int i=0;i<numberOfComponents;i++){
            clonedPhase.componentArray[i] = (ComponentInterface) this.componentArray[i].clone();
        }
        //System.out.println("cloed length: " + componentArray.length);
        if(this.physicalProperty!=null) clonedPhase.physicalProperty = (physicalProperties.physicalPropertySystem.PhysicalPropertiesInterface) this.physicalProperty.clone();
        
        return clonedPhase;
    }
    
    public void addcomponent(double moles){
        numberOfMolesInPhase += moles;
        numberOfComponents++;
    }
    
    public void removeComponent(String componentName, double moles,double molesInPhase, int compNumber){
        java.util.ArrayList temp = new java.util.ArrayList();
        
        try{
            for(int i=0;i<numberOfComponents;i++){
                if(!componentArray[i].getName().equals(componentName)) temp.add((ComponentInterface)this.componentArray[i]);
            }
            System.out.println("length " + temp.size());
            for(int i=0;i<temp.size();i++){
                this.componentArray[i] = (ComponentInterface) temp.get(i);
                this.getComponent(i).setComponentNumber(i);
            }
        }
        catch(Exception e){
            System.out.println("not able to remove " + componentName);
        }
        
        //        componentArray = (ComponentInterface[])temp.toArray();
        componentArray[numberOfComponents-1] = null;
        numberOfMolesInPhase -= molesInPhase;
        numberOfComponents--;
    }
    
    public void addMoles(int component, double dn){
        numberOfMolesInPhase += dn;
        componentArray[component].addMoles(dn);
    }
    
    public void addMolesChemReac(int component, double dn){
        numberOfMolesInPhase += dn;
        componentArray[component].addMolesChemReac(dn);
    }
    
    public void addMolesChemReac(int component, double dn, double totdn){
        numberOfMolesInPhase += dn;
        componentArray[component].addMolesChemReac(dn, totdn);
    }
    
    public void setProperties(PhaseInterface phase){
        for (int i=0; i<phase.getNumberOfComponents(); i++){
            this.getComponent(i).setProperties(phase.getComponent(i));
        }
        this.numberOfMolesInPhase = phase.getNumberOfMolesInPhase();
        this.numberOfComponents = phase.getNumberOfComponents();
        this.setBeta(phase.getBeta());
        this.setTemperature(phase.getTemperature());
        this.setPressure(phase.getPressure());
    }
    
    public ComponentInterface[] getcomponentArray(){
        return componentArray;
    }
    
    public double getAntoineVaporPressure(double temp){
        double pres=0;
        for (int i=0; i<numberOfComponents; i++){
            pres = pres + componentArray[i].getx()* componentArray[i].getAntoineVaporPressure(temp);
            //            System.out.println(componentArray[i].getAntoineVaporPressure(temp));
        }
        return pres;
    }
    
    public double getWtFrac(int component){
        return getComponent(component).getMolarMass()*getComponent(component).getx()/this.getMolarMass();
    }
    
    public double getPseudoCriticalTemperature(){
        double temp=0;
        for (int i=0; i<numberOfComponents; i++){
            temp = temp + componentArray[i].getx()* componentArray[i].getTC();
        }
        return temp;
    }
    
    public double getPseudoCriticalPressure(){
        double pres=0;
        for (int i=0; i<numberOfComponents; i++){
            pres = pres + componentArray[i].getx()* componentArray[i].getPC();
        }
        return pres;
    }
    
    public void normalize(){
        double sumx=0;
        for (int i=0; i<numberOfComponents; i++){
            sumx += componentArray[i].getx();
        }
        for (int i=0; i<numberOfComponents; i++){
            componentArray[i].setx(componentArray[i].getx()/sumx);
        }
    }
    
    public double getTemperature(){
        return temperature;
    }
    
    public double getPressure(){
        return pressure;
    }
    
    public int getInitType(){
        return initType;
    }
    
    public double getMixGibbsEnergy(){
        double gmix=0.0;
        for (int i=0; i < numberOfComponents; i++){
            gmix += getComponent(i).getx()*Math.log(getComponent(i).getx());
        }
        return getExessGibbsEnergy()+R*temperature*gmix*numberOfMolesInPhase;
    }
    
    public double getExessGibbsEnergy(){
        double GE = 0.0;
        if(refPhase==null) initRefPhases(false);
        initRefPhases(false);
        for (int i=0; i < numberOfComponents; i++){
            GE += getComponent(i).getx()*Math.log(getActivityCoefficient(i));
        }
        return R*temperature*numberOfMolesInPhase*GE;
    }
    
    public double getZ(){
        return Z;
    }
    
    public void setPressure(double pres){
        this.pressure = pres;
    }
    
    public void setTemperature(double temp){
        this.temperature = temp;
    }
    
    public physicalProperties.physicalPropertySystem.PhysicalPropertiesInterface getPhysicalProperties(){
        return physicalProperty;
    }
    
    public void init(double totalNumberOfMoles, int numberOfComponents, int type, int phase, double beta){ // type = 0 start init type =1 gi nye betingelser
        this.beta = beta;
        numberOfMolesInPhase = beta*totalNumberOfMoles;
        if(this.phaseType!=phase){
            this.phaseType = phase;
            //setPhysicalProperties(physicalPropertyType);
        }
        this.initType = type;
        this.numberOfComponents = numberOfComponents;
        
        for (int i=0; i < numberOfComponents; i++){
            componentArray[i].init(temperature, pressure, totalNumberOfMoles, beta, type);
        }
    }
    
    public void setPhysicalProperties(){
        if(phaseType==1) physicalProperty = new physicalProperties.physicalPropertySystem.gasPhysicalProperties.GasPhysicalProperties(this,0,0);
        else physicalProperty = new physicalProperties.physicalPropertySystem.liquidPhysicalProperties.LiquidPhysicalProperties(this,0,0);
    }
    
    /** specify the type model for the physical properties you want to use.
     * Type:   Model
     * 0       Orginal/default
     * 1       Water
     * 2       Glycol
     * 3       Amine
     */
    public void setPhysicalProperties(int type){
        physicalPropertyType = type;
        System.out.println("phase type: " + phaseType);
        if(type==0){
            System.out.println("Physical properties:    Default model");
            if(phaseType==1) physicalProperty = new physicalProperties.physicalPropertySystem.gasPhysicalProperties.GasPhysicalProperties(this,0,0);
            else physicalProperty = new physicalProperties.physicalPropertySystem.liquidPhysicalProperties.LiquidPhysicalProperties(this,0,0);
        }
        else if(type==1){
            System.out.println("Physical properties:    Water model");
            if(phaseType==1) physicalProperty = new physicalProperties.physicalPropertySystem.gasPhysicalProperties.GasPhysicalProperties(this,0,0);
            else physicalProperty = new physicalProperties.physicalPropertySystem.liquidPhysicalProperties.WaterPhysicalProperties(this,0,0);
        }
        else if(type==2){
            System.out.println("Physical properties:    Glycol model");
            if(phaseType==1) physicalProperty = new physicalProperties.physicalPropertySystem.gasPhysicalProperties.GasPhysicalProperties(this,0,0);
            else physicalProperty = new physicalProperties.physicalPropertySystem.liquidPhysicalProperties.GlycolPhysicalProperties(this,0,0);
        }
        else if(type==3){
            System.out.println("Physical properties:    Amine model");
            if(phaseType==1) physicalProperty = new physicalProperties.physicalPropertySystem.gasPhysicalProperties.GasPhysicalProperties(this,0,0);
            else physicalProperty = new physicalProperties.physicalPropertySystem.liquidPhysicalProperties.AminePhysicalProperties(this,0,0);
        }
        else if(type==4){
            System.out.println("Physical properties:    Amine model");
            if(phaseType==1) physicalProperty = new physicalProperties.physicalPropertySystem.gasPhysicalProperties.GasPhysicalProperties(this,0,0);
            else physicalProperty = new physicalProperties.physicalPropertySystem.liquidPhysicalProperties.CO2waterPhysicalProperties(this,0,0);
        }
        else{
            System.out.println("error selecting physical properties model.\n Continue using default model...");
            setPhysicalProperties();
        }
        initPhysicalProperties();
    }
    
    public void initPhysicalProperties(){
        if(physicalProperty  == null) this.setPhysicalProperties();
        physicalProperty.init(this);
    }
    
    public double geta(PhaseInterface phase, double temperature, double pressure, int numbcomp){
        return 1;
    }
    
    public double getb(PhaseInterface phase, double temperature, double pressure, int numbcomp){
        return 1;
    }
    
    public double calcA(PhaseInterface phase, double temperature, double pressure, int numbcomp){
        return 1;
    }
    
    public double calcB(PhaseInterface phase, double temperature, double pressure, int numbcomp){
        return 1;
    }
    
    public double getf(){
        return 1;
    }
    
    public double getg(){
        return 1;
    }
    
    public double calcA(int comp, PhaseInterface phase, double temperature, double pressure, int numbcomp){
        return 1;
    }
    
    public double calcAi(int comp, PhaseInterface phase, double temperature, double pressure, int numbcomp){
        return 1;
    }
    
    public double calcAiT(int comp, PhaseInterface phase, double temperature, double pressure, int numbcomp){
        return 1;
    }
    
    public double calcAT(int comp, PhaseInterface phase, double temperature, double pressure, int numbcomp){
        return 1;
    }
    
    public double calcAij(int compNumb, int j, PhaseInterface phase, double temperature, double pressure, int numbcomp){return 0;}
    public double calcBij(int compNumb, int j,PhaseInterface phase, double temperature, double pressure, int numbcomp){return 0;}
    
    
    public double calcBi(int comp, PhaseInterface phase, double temperature, double pressure, int numbcomp){
        return 1;
    }
    
    public void setAtractiveTerm(int i){
        for(int k=0;k<numberOfComponents;k++){
            componentArray[k].setAtractiveTerm(i);
        }
    }
    
    public double getMolarVolume(){
        return molarVolume;
    }
    
    public int getNumberOfComponents(){
        return numberOfComponents;
    }
    
    public double geta(){return 0;}
    public double getb(){return 0;}
    public double getA(){return 0;}
    public double getB(){return 0;}
    public double getBi(){return 0;}
    public double getAT(){return 0;}
    
    public double getATT(){return 0;}
    public double getAiT(){return 0;}
    
    public PhaseInterface getPhase(){
        return this;
    }
    
    public double getNumberOfMolesInPhase(){
        return numberOfMolesInPhase;
    }
    
    public ComponentInterface[] getComponents(){
        return componentArray;
    }
    
    public void setComponentArray(ComponentInterface[] components){
        this.componentArray = components;
    }
    
    public double calcR(){
        
        double R =  8.314/getMolarMass();
        
        return R;
    }
    
    
    public double Fn() {
        return 1;
    }
    
    public double FT() {
        return 1;
    }
    
    public double FV() {
        return 1;
    }
    
    public double FD() {
        return 1;
    }
    public double FB() {
        return 1;
    }
    
    public double gb() {
        return 1;
    }
    public double fb() {
        return 1;
    }
    public double gV() {
        return 1;
    }
    public double fv() {
        return 1;
    }
    public double FnV() {
        return 1;
    }
    public double FnB() {
        return 1;
    }
    public double FTT() {
        return 1;
    }
    public double FBT() {
        return 1;
    }
    public double FDT() {
        return 1;
    }
    public double FBV() {
        return 1;
    }
    public double FBB() {
        return 1;
    }
    public double FDV() {
        return 1;
    }
    public double FBD() {
        return 1;
    }
    public double FTV() {
        return 1;
    }
    public double FVV() {
        return 1;
    }
    public double gVV() {
        return 1;
    }
    public double gBV() {
        return 1;
    }
    public double gBB() {
        return 1;
    }
    public double fVV() {
        return 1;
    }
    public double fBV() {
        return 1;
    }
    public double fBB() {
        return 1;
    }
    public double dFdT() {
        return 1;
    }
    public double dFdV() {
        return 1;
    }
    public double dFdTdV() {
        return 1;
    }
    public double dFdVdV() {
        return 1;
    }
    public double dFdTdT() {
        return 1;
    }
    
    public double getCpres(){
        return 1;
    }
    
    public double getCvres(){
        return 1;
    }
    
    public double getHresTP(){
        System.out.println("feil Hres");
        return 0;
    }
    
    public double getGresTP(){
        System.out.println("feil Gres");
        return 0;
    }
    
    public double getSresTV(){
        System.out.println("feil Hres");
        return 0;
    }
    
    
    public double getSresTP(){
        return 0;
    }
    
    public double getCp0(){
        double tempVar=0.0;
        for(int i = 0; i < numberOfComponents; i++) {
            tempVar += componentArray[i].getx()*componentArray[i].getCp0(temperature);
        }
        return tempVar;
    }
    
    public double getCp(){
        // System.out.println("Cp res:" + this.getCpres() + " Cp0: " + getCp0());
        return getCp0()*numberOfMolesInPhase+ this.getCpres();
    }
    
    public double getCv(){
        return getCp0()*numberOfMolesInPhase - R*numberOfMolesInPhase + getCvres();
    }
    
    public double getEnthalpy(){
        return getCp0()*numberOfMolesInPhase*(temperature-referenceTemperature) + this.getHresTP();
    }
    
    public void setNumberOfComponents(int numberOfComponents){
        this.numberOfComponents = numberOfComponents;
    }
    
    public int getNumberOfMolecularComponents(){
        int mol=0;
        for(int i = 0; i < numberOfComponents; i++) {
            if(componentArray[i].getIonicCharge()==0) mol++;
        }
        return mol;
    }
    
    public int getNumberOfIonicComponents(){
        int ion=0;
        for(int i = 0; i < numberOfComponents; i++) {
            if(componentArray[i].getIonicCharge()!=0) ion++;
        }
        return ion;
    }
    
    public double getEntropy(){
        double tempVar=0;
        for(int i = 0; i < numberOfComponents; i++) {
            tempVar += -R*componentArray[i].getx()*Math.log(componentArray[i].getx());
        }
        return getCp0()*Math.log(temperature/referenceTemperature)*numberOfMolesInPhase - R*Math.log(pressure/referencePressure)*numberOfMolesInPhase + tempVar*numberOfMolesInPhase + this.getSresTP();
    }
    
    public void initRefPhases(boolean onlyPure){
        initRefPhases(onlyPure, "water");
    }
    
    public void initRefPhases(boolean onlyPure, String name){
        refPhase = new PhaseInterface[numberOfComponents];
        for(int i=0;i<numberOfComponents;i++){
            try{
                refPhase[i] = (PhaseInterface) this.getClass().newInstance();
            }
            catch(Exception e){
                System.err.println("err " + e.toString());
            }
            refPhase[i].setTemperature(temperature);
            refPhase[i].setPressure(pressure);
            if(getComponent(i).getReferenceStateType().equals("solvent") || onlyPure){
                refPhase[i].addcomponent(getComponent(i).getComponentName(), 10.0, 10.0, 0);
                refPhase[i].setAtractiveTerm(this.getComponent(i).getAtractiveTermNumber());
                refPhase[i].setMixingRule(this.getMixingRuleNumber());
                // refPhase[i].setMixingRule(1);
            }
            else{
                refPhase[i].addcomponent(getComponent(i).getComponentName(), 1.0e-10, 1e-10, 0);
                refPhase[i].addcomponent(name, 10.0, 10.0, 1);
                refPhase[i].setAtractiveTerm(this.getComponent(i).getAtractiveTermNumber());
                refPhase[i].setMixingRule(this.getMixingRuleNumber());
            }
        }
    }
    
    
    public double getLogPureComponentFugacity(int k){
        if(refPhase==null) initRefPhases(false);
        refPhase[k].setTemperature(temperature);
        refPhase[k].setPressure(pressure);
        refPhase[k].init(refPhase[k].getNumberOfMolesInPhase(), 1, 0, this.getPhaseType(), 1.0);
        refPhase[k].init(refPhase[k].getNumberOfMolesInPhase(), 1, 1, this.getPhaseType(), 1.0);
        refPhase[k].getComponent(0).fugcoef(refPhase[k]);
        return refPhase[k].getComponent(0).getLogFugasityCoeffisient();
    }
    
    public double getPureComponentFugacity(int p){
        return Math.exp(getLogPureComponentFugacity(p));
    }
    
    public double getLogInfiniteDiluteFugacity(int k, int p){
        if(refPhase==null) initRefPhases(false,getComponent(p).getName());
        refPhase[k].setTemperature(temperature);
        refPhase[k].setPressure(pressure);
        refPhase[k].init(refPhase[k].getNumberOfMolesInPhase(), 2, 0, refPhase[k].getPhaseType(), 1.0);
        refPhase[k].init(refPhase[k].getNumberOfMolesInPhase(), 2, 1, refPhase[k].getPhaseType(), 1.0);
        refPhase[k].getComponent(0).fugcoef(refPhase[k]);
        return refPhase[k].getComponent(0).getLogFugasityCoeffisient();
    }
    
    public double getLogInfiniteDiluteFugacity(int k){
        PhaseInterface dilphase = (PhaseInterface)this.clone();
        dilphase.addMoles(k,-(1.0-1e-10)*dilphase.getComponent(k).getNumberOfMolesInPhase());
        dilphase.init(dilphase.getNumberOfMolesInPhase(), dilphase.getNumberOfComponents(), 0, dilphase.getPhaseType(), 1.0);
        dilphase.init(dilphase.getNumberOfMolesInPhase(), dilphase.getNumberOfComponents(), 1, dilphase.getPhaseType(), 1.0);
        dilphase.getComponent(k).fugcoef(dilphase);
        return dilphase.getComponent(k).getLogFugasityCoeffisient();
    }
    
    public double getInfiniteDiluteFugacity(int k, int p){
        return Math.exp(getLogInfiniteDiluteFugacity(k,p));
    }
    
    public double getInfiniteDiluteFugacity(int k){
        return Math.exp(getLogInfiniteDiluteFugacity(k));
    }
    
    public double getActivityCoefficient(int k, int p){
        double fug=0.0;
        double oldFug = getComponent(k).getLogFugasityCoeffisient();
        if(getComponent(k).getReferenceStateType().equals("solvent")) fug = getLogPureComponentFugacity(k);
        else fug=getLogInfiniteDiluteFugacity(k,p);
        //System.out.println("act " + Math.exp(oldFug - fug) + " name " + getComponent(k).getName());
        
        return Math.exp(oldFug - fug);
    }
    
    public double getActivityCoefficient(int k){
        double fug=0.0;
        double oldFug = getComponent(k).getLogFugasityCoeffisient();
        if(getComponent(k).getReferenceStateType().equals("solvent")) fug = getLogPureComponentFugacity(k);
        else fug=getLogInfiniteDiluteFugacity(k);
        //System.out.println("act " + Math.exp(oldFug - fug) + " name " + getComponent(k).getName());
        return Math.exp(oldFug - fug);
    }
    
    public double getMolalMeanIonicActivity(int comp1, int comp2){
        double act1 = 0.0;
        double act2 = 0.0;
        int watNumb=0;
        double vminus=0.0, vplus=0.0;
        double ions=0.0;
        for(int j=0;j<this.numberOfComponents;j++){
            if(getComponent(j).getIonicCharge()!=0) ions += getComponent(j).getx();
        }
        
        double val = ions/getComponent("water").getx();
        for(int j=0;j<this.numberOfComponents;j++){
            if(getComponent(j).getComponentName().equals("water")) watNumb=j;
        }
        
        act1 = Math.pow(getActivityCoefficient(comp1, watNumb), Math.abs(getComponent(comp2).getIonicCharge()));
        act2 = Math.pow(getActivityCoefficient(comp2, watNumb), Math.abs(getComponent(comp1).getIonicCharge()));
        
        return Math.pow(act1*act2, 1.0/(Math.abs(getComponent(comp1).getIonicCharge())+Math.abs(getComponent(comp2).getIonicCharge())))*1.0/(1.0+val);
    }
    
    public double getOsmoticCoefficientOfWater(){
        int watNumb=0;
        for(int j=0;j<this.numberOfComponents;j++){
            if(getComponent(j).getComponentName().equals("water")) watNumb=j;
        }
        return getOsmoticCoefficient(watNumb);
    }
    
    
    public double getOsmoticCoefficient(int watNumb){
        double oldFug = getComponent(watNumb).getFugasityCoeffisient();
        double pureFug = getPureComponentFugacity(watNumb);
        double ions=0.0;
        for(int j=0;j<this.numberOfComponents;j++){
            if(getComponent(j).getIonicCharge()!=0) ions += getComponent(j).getx();
        }
        double val = - Math.log(oldFug*getComponent(watNumb).getx()/pureFug) * getComponent(watNumb).getx()/ions;
        return val;
    }
    
    //    public double getOsmoticCoefficient(int watNumb, String refState){
    //        if(refState.equals("molality")){
    //            double oldFug = getComponent(watNumb).getFugasityCoeffisient();
    //            double pureFug = getPureComponentFugacity(watNumb);
    //            double ions=0.0;
    //            for(int j=0;j<this.numberOfComponents;j++){
    //                if(getComponent(j).getIonicCharge()!=0) ions += getComponent(j).getNumberOfMolesInPhase()/getComponent(watNumb).getNumberOfMolesInPhase()/getComponent(watNumb).getMolarMass();//*Math.abs(getComponent(j).getIonicCharge());
    //            }
    //            double val = - Math.log(oldFug*getComponent(watNumb).getx()/pureFug) * 1.0/ions/getComponent(watNumb).getMolarMass();
    //            return val;
    //        }
    //        else return getOsmoticCoefficient(watNumb);
    //    }
    
    public double getMeanIonicActivity(int comp1, int comp2){
        double act1 = 0.0;
        double act2 = 0.0;
        int watNumb=0;
        double vminus=0.0, vplus=0.0;
        
        for(int j=0;j<this.numberOfComponents;j++){
            if(getComponent(j).getComponentName().equals("water")) watNumb=j;
        }
        
        act1 = Math.pow(getActivityCoefficient(comp1, watNumb), Math.abs(getComponent(comp2).getIonicCharge()));
        act2 = Math.pow(getActivityCoefficient(comp2, watNumb), Math.abs(getComponent(comp1).getIonicCharge()));
        
        return Math.pow(act1*act2, 1.0/(Math.abs(getComponent(comp1).getIonicCharge())+Math.abs(getComponent(comp2).getIonicCharge())));
    }
    
    public int getPhaseType(){
        return phaseType;
    }
    
    public double getGibbsEnergy(){
        return getEnthalpy()-temperature*getEntropy();
    }
    
    public double getInternalEnergy(){
        return getEnthalpy()-pressure*getMolarVolume()*numberOfMolesInPhase;
    }
    
    public double getHelmholtzEnergy(){
        return getInternalEnergy()-temperature*getEntropy();
    }
    /**
     *Returns the molar mass of the phase.
     *Unit: kg/mol
     */
    public double getMolarMass(){
        double tempVar=0;
        for(int i = 0; i < numberOfComponents; i++) {
            tempVar = tempVar + componentArray[i].getx()*componentArray[i].getMolarMass();
        }
        
        return tempVar;
    }
    
    public double getJouleThomsonCoefficient(){
        return 0;
    }
    
    /**
     *Returns the density of the phase.
     *Unit: kg/m^3
     */
    public double getDensity(){
        return 1.0/getMolarVolume()*getMolarMass()*1.0e5;
    }
    
    public double getBeta(){
        return this.beta;
    }
    
    public double getdPdrho(){
        return 0;
    }
    
    public void setMixingRule(int type){
        mixingRuleNumber=type;
    }
    
    public double calcDiElectricConstant(double temperature){
        double tempVar=0;
        for(int i = 0; i<numberOfComponents; i++) {
            tempVar += componentArray[i].getNumberOfMolesInPhase()*componentArray[i].getDiElectricConstant(temperature);
        }
        return tempVar/numberOfMolesInPhase;
    }
    
    public double calcDiElectricConstantdT(double temperature){
        double tempVar=0;
        for(int i = 0; i<numberOfComponents; i++) {
            tempVar += componentArray[i].getNumberOfMolesInPhase()*componentArray[i].getDiElectricConstantdT(temperature);
        }
        return tempVar/numberOfMolesInPhase;
    }
    
    public double calcDiElectricConstantdTdT(double temperature){
        double tempVar=0;
        for(int i = 0; i<numberOfComponents; i++) {
            tempVar += componentArray[i].getNumberOfMolesInPhase()*componentArray[i].getDiElectricConstantdTdT(temperature);
        }
        return tempVar/numberOfMolesInPhase;
    }
    
    public double getDiElectricConstant(){
        return diElectricConstant;
    }
    
    public double getdPdTVn(){
        return 0;
    }
    
    public double getdPdVTn(){
        return 0;
    }
    
    public double getpH(){
        System.out.println("ph - old " + getpH_old());
        initPhysicalProperties();
        for(int i = 0; i<numberOfComponents; i++) {
            if(componentArray[i].getName().equals("H3O+")){
                return - MathLib.generalMath.GeneralMath.log10(componentArray[i].getNumberOfMolesInPhase()*getPhysicalProperties().getDensity()/(numberOfMolesInPhase*getMolarMass())*1e-3);
            }
        }
        System.out.println("no H3Oplus");
        return 7.0;
    }
    
    public double getpH_old(){
        for(int i = 0; i<numberOfComponents; i++) {
            if(componentArray[i].getName().equals("H3O+")){
                return - MathLib.generalMath.GeneralMath.log10(componentArray[i].getx()*getActivityCoefficient(i));
            }
        }
        System.out.println("no H3Oplus");
        return 7.0;
    }
    
    public ComponentInterface getComponent(int i){
        return componentArray[i];
    }
    
    public ComponentInterface getComponent(String name){
        for(int i=0;i<numberOfComponents;i++){
            if(componentArray[i].getName().equals(name)) return componentArray[i];
        }
        System.out.println("could not find component... " + name + " ..returning null");
        return null;
    }
    
    /** Getter for property mixingRuleNumber.
     * @return Value of property mixingRuleNumber.
     */
    public int getMixingRuleNumber() {
        return mixingRuleNumber;
    }
    
    /** Indexed getter for property refPhase.
     * @param index Index of the property.
     * @return Value of the property at <CODE>index</CODE>.
     */
    public thermo.phase.PhaseInterface getRefPhase(int index) {
        if(refPhase==null) initRefPhases(false);
        return refPhase[index];
    }
    
    /** Getter for property refPhase.
     * @return Value of property refPhase.
     */
    public thermo.phase.PhaseInterface[] getRefPhase() {
        if(refPhase==null) initRefPhases(false);
        return refPhase;
    }
    
    /** Indexed setter for property refPhase.
     * @param index Index of the property.
     * @param refPhase New value of the property at <CODE>index</CODE>.
     */
    public void setRefPhase(int index, thermo.phase.PhaseInterface refPhase) {
        this.refPhase[index] = refPhase;
    }
    
    public double getTotalVolume(){
        return numberOfMolesInPhase*getMolarVolume();
    }
    
    /** Setter for property refPhase.
     * @param refPhase New value of property refPhase.
     */
    public void setRefPhase(thermo.phase.PhaseInterface[] refPhase) {
        this.refPhase = refPhase;
    }
    
    /** Getter for property physicalPropertyType.
     * @return Value of property physicalPropertyType.
     */
    public int getPhysicalPropertyType() {
        return physicalPropertyType;
    }
    
    /** Setter for property physicalPropertyType.
     * @param physicalPropertyType New value of property physicalPropertyType.
     */
    public void setPhysicalPropertyType(int physicalPropertyType) {
        this.physicalPropertyType = physicalPropertyType;
    }
    
    public void setParams(PhaseInterface phase, double[][] alpha, double[][] Dij, double[][] DijT, String[][] mixRule, double[][] intparam){
    }
    
    public boolean useVolumeCorrection() {
        return useVolumeCorrection;
    }
    
    public void useVolumeCorrection(boolean volcor){
        useVolumeCorrection=volcor;
    }
    
    public double getFugacity(int compNumb) {
        return this.getComponent(compNumb).getx()*this.getComponent(compNumb).getFugasityCoefficient()*pressure;
    }
    
    public double getFugacity(String compName) {
        return this.getComponent(compName).getx()*this.getComponent(compName).getFugasityCoefficient()*pressure;
    }
    
    public double[] groupTBPfractions(){
        double[] TPBfrac = new double[20];
        
        for(int i=0;i<getNumberOfComponents();i++){
            double boilpoint = getComponent(i).getNormalBoilingPoint();
            
            if(boilpoint>=331.0) TPBfrac[19] += getComponent(i).getx();
            else if(boilpoint>=317.0) TPBfrac[18] += getComponent(i).getx();
            else if(boilpoint>=303.0) TPBfrac[17] += getComponent(i).getx();
            else if(boilpoint>=287.0) TPBfrac[16] += getComponent(i).getx();
            else if(boilpoint>=271.1) TPBfrac[15] += getComponent(i).getx();
            else if(boilpoint>=253.9) TPBfrac[14] += getComponent(i).getx();
            else if(boilpoint>=235.9) TPBfrac[13] += getComponent(i).getx();
            else if(boilpoint>=216.8) TPBfrac[12] += getComponent(i).getx();
            else if(boilpoint>=196.4) TPBfrac[11] += getComponent(i).getx();
            else if(boilpoint>=174.6) TPBfrac[10] += getComponent(i).getx();
            else if(boilpoint>=151.3) TPBfrac[ 9] += getComponent(i).getx();
            else if(boilpoint>=126.1) TPBfrac[ 8] += getComponent(i).getx();
            else if(boilpoint>= 98.9) TPBfrac[ 7] += getComponent(i).getx();
            else if(boilpoint>= 69.2) TPBfrac[ 6] += getComponent(i).getx();
            else {}
        }
        return TPBfrac;
    }
    
    /** Getter for property TBPfractions.
     * @return Value of property TBPfractions.
     */
    public double[] getTBPfractions() {
        return this.TBPfractions;
    }
    
    /** Setter for property TBPfractions.
     * @param TBPfractions New value of property TBPfractions.
     */
    public void setTBPfractions(double[] TBPfractions) {
        this.TBPfractions = TBPfractions;
    }
    
    /** Setter for property beta.
     * @param beta New value of property beta.
     *
     */
    public void setBeta(double beta) {
        this.beta = beta;
    }
    
}