/*
 * PhaseGEUniquac.java
 *
 * Created on 11. juli 2000, 21:01
 */

package thermo.phase;

import thermo.component.*;

/**
 *
 * @author  Even Solbraa
 * @version
 */
public class PhaseGEUnifac extends PhaseGEUniquac{
    
    /** Creates new PhaseGEUniquac */
    
    double[][] aij = new double[1][1];
    double[][] bij = new double[1][1];
    double[][] cij = new double[1][1];
    
    public PhaseGEUnifac() {
        super();
        componentArray = new ComponentGEUnifac[10];
    }
    
    public PhaseGEUnifac(PhaseInterface phase, double[][] alpha, double[][] Dij, String[][] mixRule, double[][] intparam) {
        super();
        componentArray = new ComponentGEUnifac[alpha[0].length];
        System.out.println("alpha length " + alpha[0].length);
        this.mixRule = mixRule;
        this.alpha = alpha;
        this.Dij = Dij;
        this.intparam = intparam;
        for (int i=0; i < alpha[0].length; i++){
            numberOfComponents++;
            componentArray[i] = new ComponentGEUnifac(phase.getComponents()[i].getName(), phase.getComponents()[i].getNumberOfmoles(), phase.getComponents()[i].getNumberOfMolesInPhase(), phase.getComponents()[i].getComponentNumber());
        }
    }
    
    public void addcomponent(String componentName, double moles,double molesInPhase,  int compNumber){
        super.addcomponent(molesInPhase);
        componentArray[compNumber] = new ComponentGEUnifac(componentName, moles, molesInPhase,compNumber);
    }
    
    public void init(double totalNumberOfMoles, int numberOfComponents, int type, int phase, double beta){ // type = 0 start init type =1 gi nye betingelser
        if(type==0){
            System.out.println("checking unifac groups...");
            checkGroups();
            calcaij();
              calcbij();
            calccij();
        
        }
        super.init(totalNumberOfMoles, numberOfComponents, type, phase, beta);
    }
    
    public void calcaij(){
        aij = new double[((ComponentGEUnifac)getComponent(0)).getNumberOfUNIFACgroups()][((ComponentGEUnifac)getComponent(0)).getNumberOfUNIFACgroups()];
        for (int i=0; i < ((ComponentGEUnifac)getComponent(0)).getNumberOfUNIFACgroups(); i++){
            for (int j=0; j < ((ComponentGEUnifac)getComponent(0)).getNumberOfUNIFACgroups(); j++){
                try{
                    util.database.NeqSimDataBase database = new util.database.NeqSimDataBase();
                    java.sql.ResultSet dataSet = null;
                    try{
                        dataSet =  database.getResultSet(("SELECT * FROM UNIFACInterParam WHERE MainGroup="+((ComponentGEUnifac)getComponent(0)).getUnifacGroup(i).getMainGroup() + ""));
                        dataSet.next();
                        dataSet.getClob("MainGroup");
                    }
                    catch(Exception e){
                        dataSet.close();
                        dataSet =  database.getResultSet(("SELECT * FROM UNIFACInterParam WHERE MainGroup="+((ComponentGEUnifac)getComponent(0)).getUnifacGroup(i).getMainGroup() + ""));
                        dataSet.next();
                    }
                    
                    aij[i][j] = Double.parseDouble(dataSet.getString("n"+((ComponentGEUnifac)getComponent(0)).getUnifacGroup(j).getMainGroup()+""));
                    //System.out.println("aij " + aij[i][j]);
                    dataSet.close();
                    database.getConnection().close();
                }
                
                catch (Exception e) {
                    String err = e.toString();
                    System.out.println(err);
                }
            }
        }
    }
    
    public void checkGroups(){
        java.util.ArrayList unifacGroups = new java.util.ArrayList();
        
        for (int i=0; i < numberOfComponents; i++){
            for (int j=0; j < ((ComponentGEUnifac)getComponent(i)).getNumberOfUNIFACgroups(); j++){
                if(!unifacGroups.contains(((ComponentGEUnifac)getComponent(i)).getUnifacGroup(j))) unifacGroups.add(((ComponentGEUnifac)getComponent(i)).getUnifacGroup(j));
                else System.out.println("no");
            }
        }
        
        for (int i=0; i < numberOfComponents; i++){
            for (int j=0; j < unifacGroups.size(); j++){
                if(!((ComponentGEUnifac)getComponent(i)).getUnifacGroups().contains(unifacGroups.get(j))) ((ComponentGEUnifac) getComponent(i)).addUNIFACgroup(((thermo.atomElement.UNIFACgroup)unifacGroups.get(j)).getSubGroup(),0);
            }
        }
        
        for (int i=0; i < numberOfComponents; i++){
            Object[] array = ((ComponentGEUnifac)getComponent(i)).getUnifacGroups().toArray();
            java.util.Arrays.sort(array);
            java.util.ArrayList phaseList = new java.util.ArrayList(0);
            for (int j=0;j<array.length;j++){
                phaseList.add(array[j]);
            }
            ((ComponentGEUnifac)getComponent(i)).setUnifacGroups(phaseList);
        }
        
        for (int i=0; i < numberOfComponents; i++){
            for (int j=0; j < ((ComponentGEUnifac)getComponent(i)).getNumberOfUNIFACgroups(); j++){
                ((ComponentGEUnifac)getComponent(i)).getUnifacGroup(j).setGroupIndex(j);
                //System.out.println("i " + i + " " + ((ComponentGEUnifac)getComponent(i)).getUnifacGroup(j).getSubGroup());
            }
        }
    }
    
    
    public double getExessGibbsEnergy(PhaseInterface phase, int numberOfComponents, double temperature, double pressure, int phasetype){
        double GE = 0.0;
        for (int i=0; i < numberOfComponents; i++){
            GE += phase.getComponents()[i].getx()*Math.log(((ComponentGEUnifac) componentArray[i]).getGamma(phase, numberOfComponents, temperature,  pressure, phasetype));
        }
        return R*phase.getTemperature()*GE*phase.getNumberOfMolesInPhase();//phase.getNumberOfMolesInPhase()*
    }
    
    public double getGibbsEnergy(){
        double val=0.0;
        for (int i=0; i < numberOfComponents; i++){
            val += getComponent(i).getNumberOfMolesInPhase()*(getComponent(i).getLogFugasityCoeffisient());
        }
        return R*temperature*((val)+Math.log(pressure)*numberOfMolesInPhase);
    }
    
    public double getAij(int i , int j){
        return aij[i][j];
    }
    
    public void setAij(int i , int j, double val){
        aij[i][j] = val;
    }
    
    public double getBij(int i , int j){
        return bij[i][j];
    }
    
    public void setBij(int i , int j, double val){
        bij[i][j] = val;
    }
    
    public double getCij(int i , int j){
        return cij[i][j];
    }
    
    public void setCij(int i , int j, double val){
        cij[i][j] = val;
    }
}