/*
 * PhaseSrkEos.java
 *
 * Created on 3. juni 2000, 14:38
 */

package thermo.phase;

import thermo.component.*;
import thermo.mixingRule.*;
/**
 *
 * @author  Even Solbraa
 * @version
 */
public class PhaseSrkCPA extends PhaseSrkEos implements PhaseCPAInterface{
    
    public CPAMixing cpaSelect = new CPAMixing();
    public CPAMixingInterface cpamix;
    double hcpatot=1.0, gcpav=1.0, gcpavv=1.0, gcpavvv=1.0;
    int cpaon = 1;
    
    /** Creates new PhaseSrkEos */
    public PhaseSrkCPA(){
        super();
        cpamix = cpaSelect.getMixingRule(1);
    }
    
    public Object clone(){
        PhaseSrkCPA clonedPhase = null;
        try{
            clonedPhase = (PhaseSrkCPA) super.clone();
        }
        catch(Exception e){
            e.printStackTrace(System.err);
        }
        return clonedPhase;
    }
    
    public void init(double totalNumberOfMoles, int numberOfComponents, int type, int phase, double beta){ // type = 0 start init type =1 gi nye betingelser
        boolean Xsolved=true;
        int totiter =0;
        do{
            super.init(totalNumberOfMoles, numberOfComponents, type, phase, beta);
            //if(getPhaseType()==1) cpaon=0;
            totiter++;
            if(cpaon==1){
                Xsolved = solveX();
                hcpatot = calc_hCPA();
                gcpav = calc_lngV();
                gcpavv = calc_lngVV();
                gcpavvv = calc_lngVVV();
            }
        }
        while(Xsolved!=true && totiter<20);
        //System.out.println("tot iter " + totiter);
    }
    
    
    public void addcomponent(String componentName, double moles,double molesInPhase, int compNumber){
        super.addcomponent(componentName,moles,molesInPhase,compNumber);
        componentArray[compNumber] = new ComponentSrkCPA(componentName, moles, molesInPhase, compNumber);
    }
    
    public double getF(){
        return super.getF() + cpaon*FCPA();
    }
    
    
    public double dFdT(){
        return super.dFdT();
    }
    
    public double dFdTdV(){
        return 	super.dFdTdV();
    }
    
    public double dFdV(){
        //double dv = super.dFdV();
        double dv2 = dFCPAdV();
        //System.out.println("dv " + dv + "  dvcpa " + dv2);
        return super.dFdV() + cpaon*dv2;
    }
    
    public double dFdVdV(){
        return super.dFdVdV() + cpaon*dFCPAdVdV();
    }
    
    public double dFdVdVdV(){
        return super.dFdVdVdV()+ cpaon*dFCPAdVdVdV();
    }
    
    public double dFdTdT(){
        return super.dFdTdT();
    }
    
    public double FCPA(){
        double tot=0.0;
        double ans= 0.0;
        for(int i = 0;i<numberOfComponents;i++){
            tot = 0.0;
            for(int j=0;j<getComponent(i).getNumberOfAssociationSites();j++){
                double xai = ((ComponentSrkCPA) getComponent(i)).getXsite()[j];
                tot += (Math.log(xai)-1.0/2.0*xai+1.0/2.0);
            }
            ans += getComponent(i).getNumberOfMolesInPhase()*tot;
        }
        return ans;
    }
    
    public double dFCPAdV(){
        return 1.0/(2.0*getTotalVolume())*(1.0-getTotalVolume()*gcpav)*hcpatot;
    }
    
    public double dFCPAdVdV(){
        return -1.0/getTotalVolume()*dFCPAdV() + hcpatot/(2.0*getTotalVolume())*(-gcpav-getTotalVolume()*gcpavv);
    }
    
    public double dFCPAdVdVdV(){
        return -1.0/getTotalVolume()*dFCPAdVdV() + 1.0/Math.pow(getTotalVolume(),2.0)*dFCPAdV()
        - hcpatot/(2.0*Math.pow(getTotalVolume(),2.0))*(-gcpav-getTotalVolume()*gcpavv)
        + hcpatot/(2.0*getTotalVolume())*(-2.0*gcpavv - getTotalVolume()*gcpavvv);
    }
    
    public double calc_hCPA(){
        double htot=0.0;
        double tot=0.0;
        for(int i = 0;i<numberOfComponents;i++){
            htot = 0.0;
            for(int j=0;j<getComponent(i).getNumberOfAssociationSites();j++){
                htot += (1.0-((ComponentSrkCPA) getComponent(i)).getXsite()[j]);
            }
            tot += getComponent(i).getNumberOfMolesInPhase()*htot;
        }
        //System.out.println("tot " +tot );
        return tot;
    }
    
    
    
    public double calc_lngV(){
        double x = 1.9/4.0*getB()/getTotalVolume();
        double gv = (x/getTotalVolume())/(1.0-x);//;//-2.0*getB()*(10.0*getTotalVolume()-getB())/getTotalVolume()/((8.0*getTotalVolume()-getB())*(4.0*getTotalVolume()-getB()));
        return -gv;
    }
    
    public double calc_lngVV(){
        double gvv =0.225625/Math.pow(1.0-0.475*getB()/getTotalVolume(),2.0)*Math.pow(getB(),2.0)/(Math.pow(getTotalVolume(),4))+0.95/(1.0-0.475*getB()/getTotalVolume())*getB()/(Math.pow(getTotalVolume(),3));
        return gvv;
    }
    
    public double calc_lngVVV(){
        double gvv =-0.21434375/Math.pow(1.0-0.475*getB()/getTotalVolume(),3.0)*Math.pow(getB(),3.0)/(Math.pow(getTotalVolume(),6))-0.135375E1/Math.pow(1.0-0.475*getB()/getTotalVolume(),2.0)*Math.pow(getB(),2.0)/(Math.pow(getTotalVolume(),5))-0.285E1/(1.0
        -0.475*getB()/getTotalVolume())*getB()/(Math.pow(getTotalVolume(),4));
        return gvv;
    }
    
    public double calc_lngV2(){
        double gv =0.0;
        gv = -2.0*getB()*(10.0*getTotalVolume()-getB())/getTotalVolume()/((8.0*getTotalVolume()-getB())*(4.0*getTotalVolume()-getB()));
        return gv;
    }
    
    public double calc_lngVV2(){
        double gvv =0.0;
        gvv = 2.0*(640.0*Math.pow(getTotalVolume(),3.0)-216.0*getB()*getTotalVolume()*getTotalVolume()+24.0*Math.pow(getB(),2.0)*getTotalVolume()-Math.pow(getB(),3.0))*getB()/(getTotalVolume()*getTotalVolume())/Math.pow(8.0*getTotalVolume()-getB(),2.0)/Math.pow(4.0*getTotalVolume()-getB(),2.0);
        return gvv;
    }
    
    public double calc_lngVVV2(){
        double gvvv =0.0;
        gvvv = 4.0*(Math.pow(getB(),5.0)+17664.0*Math.pow(getTotalVolume(),4.0)*getB()-4192.0*Math.pow(getTotalVolume(),3.0)*Math.pow(getB(),2.0)+528.0*Math.pow(getB(),3.0)*getTotalVolume()*getTotalVolume()-36.0*getTotalVolume()*Math.pow(getB(),4.0)-30720.0*Math.pow(getTotalVolume(),5.0))*getB()/(Math.pow(getTotalVolume(),3.0))/Math.pow(-8.0*getTotalVolume()+getB(),3.0)/Math.pow(-4.0*getTotalVolume()+getB(),3.0);
        return gvvv;
    }
    
    
    
    
    public boolean solveX(){
        double err =.0;
        int iter=0;
        try{
            molarVolume(pressure,temperature,A,B,phaseType);
        }
        catch(Exception e){
            e.printStackTrace();
        }
        do{
            iter ++;
            err = 0.0;
            for(int i = 0;i<numberOfComponents;i++){
                for(int j=0;j<getComponent(i).getNumberOfAssociationSites();j++){
                    double old = ((ComponentSrkCPA) getComponent(i)).getXsite()[j];
                    double neeval = cpamix.calcXi(j,i,this,temperature,pressure,numberOfComponents);
                    ((ComponentSrkCPA) getComponent(i)).setXsite(j,neeval);
                    err += Math.abs((old-neeval)/neeval);
                }
            }
            //System.out.println("err " + err);
        }
        while(Math.abs(err)>1e-6 && iter<100);
        //System.out.println("iter " +iter);
        if(iter<2) return true;
        else return false;
    }
    /** Getter for property hcpatot.
     * @return Value of property hcpatot.
     */
    public double getHcpatot() {
        return hcpatot;
    }
    
    /** Setter for property hcpatot.
     * @param hcpatot New value of property hcpatot.
     */
    public void setHcpatot(double hcpatot) {
        this.hcpatot = hcpatot;
    }
    
}