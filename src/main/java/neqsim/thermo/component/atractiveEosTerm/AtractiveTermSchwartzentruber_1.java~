/*
 * AtractiveTermSrk.java
 *
 * Created on 13. mai 2001, 21:59
 */

package thermo.component.atractiveEosTerm;

import thermo.component.*;
/**
 *
 * @author  esol
 * @version
 */
public class AtractiveTermSchwartzentruber extends AtractiveTermBaseClass{
    
    /** Creates new AtractiveTermSrk */
    public AtractiveTermSchwartzentruber(ComponentEosInterface component) {
        super(component);
        m = (0.48508 + 1.55191 * component.getAcentricFactor() - 0.15613 * component.getAcentricFactor() * component.getAcentricFactor());
    }
    
    /** Creates new AtractiveTermSrk */
    public AtractiveTermSchwartzentruber(ComponentEosInterface component, double[] params) {
        this(component);
        System.arraycopy(params,0,this.parameters,0,params.length);
    }
    
    public Object clone(){
        AtractiveTermSchwartzentruber atractiveTerm = null;
        try{
            atractiveTerm = (AtractiveTermSchwartzentruber) super.clone();
        }
        catch(Exception e) {
            e.printStackTrace(System.err);
        }
        
        return atractiveTerm;
    }
    
    
    public double alpha(double temperature){
       // System.out.println("alpha here " + Math.pow( 1.0 + m*(1.0-Math.sqrt(temperature/component.getTC()))-parameters[0]*(1.0-temperature/component.getTC())*(1.0+parameters[1]*temperature/component.getTC()+parameters[2]*Math.pow(temperature/component.getTC(),2.0)),2.0));
       return Math.pow( 1.0 + m*(1.0-Math.sqrt(temperature/component.getTC()))-parameters[0]*(1.0-temperature/component.getTC())*(1.0+parameters[1]*temperature/component.getTC()+parameters[2]*Math.pow(temperature/component.getTC(),2.0)),2.0);
    }
    
    public double aT(double temperature){
        return component.geta() * alpha(temperature);
    }
    
    public double diffalphaT(double temperature) {
        return  2.0*(1.0+m*(1.0-Math.sqrt(temperature/component.getTC()))-parameters[0]*(1.0-temperature/component.getTC())*(1.0+parameters[1]*temperature/component.getTC()+parameters[2]*temperature*temperature/(component.getTC()*component.getTC())))*(-m/Math.sqrt(temperature/component.getTC())
        /component.getTC()/2.0+parameters[0]/component.getTC()*(1.0+parameters[1]*temperature/component.getTC()+parameters[2]*temperature*temperature/(component.getTC()*component.getTC()))-parameters[0]*(
        1.0-temperature/component.getTC())*(parameters[1]/component.getTC()+2.0*parameters[2]*temperature/(component.getTC()*component.getTC())));
    }
    
    public double diffdiffalphaT(double temperature) {
        return  2.0*Math.pow(-m/Math.sqrt(temperature/component.getTC())/component.getTC()/2.0+parameters[0]/component.getTC()*(1.0+parameters[1]*temperature/component.getTC()+parameters[2]*temperature*temperature/(component.getTC()*component.getTC()))-parameters[0]*(1.0-temperature/component.getTC())*(parameters[1]/component.getTC()+2.0*parameters[2]*
        temperature/(component.getTC()*component.getTC())),2.0)+2.0*(1.0+m*(1.0-Math.sqrt(temperature/component.getTC()))-parameters[0]*(1.0-
        temperature/component.getTC())*(1.0+parameters[1]*temperature/component.getTC()+parameters[2]*temperature*temperature/(component.getTC()*component.getTC())))*(m/
        Math.sqrt(temperature*temperature*temperature/(component.getTC()*component.getTC()*component.getTC()))/(component.getTC()*component.getTC())/4.0+2.0*parameters[0]/component.getTC()*(parameters[1]/
        component.getTC()+2.0*parameters[2]*temperature/(component.getTC()*component.getTC()))-2.0*parameters[0]*(1.0-temperature/component.getTC())*parameters[2]/(component.getTC()*component.getTC()));
    }
    
    public double diffaT(double temperature) {
        return component.geta()*diffalphaT(temperature);
    }
    
    public double diffdiffaT(double temperature) {
        return component.geta()*diffdiffalphaT(temperature);
    }
    
}
