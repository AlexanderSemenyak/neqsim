/*
 * AtractiveTermSrk.java
 *
 * Created on 13. mai 2001, 21:59
 */

package thermo.component.atractiveEosTerm;

import thermo.component.*;
/**
 *
 * @author  esol
 * @version 
 */
public class AtractiveMollerup extends AtractiveTermBaseClass{
   
    /** Creates new AtractiveTermSrk */
    public AtractiveMollerup(ComponentEosInterface component) {
        super(component);
    }
  
    public double alpha(double temperature){
        return Math.pow( 1 + (0.48 + 1.574 * component.getAcentricFactor() - 0.176* component.getAcentricFactor() * component.getAcentricFactor())*(1-Math.sqrt(temperature/component.getTC())),2.0);
    }
    
    public double aT(double temperature){
        return component.geta() * alpha(temperature);
    }
    
    public double diffalphaT(double temperature) {
        return 0.4e-5*(740.0-240.0*Math.sqrt(temperature/component.getTC())+787.0*component.getAcentricFactor()-787.0*component.getAcentricFactor()*Math.sqrt(temperature/component.getTC())-88.0*component.getAcentricFactor()*component.getAcentricFactor()+88.0*component.getAcentricFactor()*component.getAcentricFactor()*Math.sqrt(temperature/component.getTC()))*(-240.0-787.0*component.getAcentricFactor()+88.0*component.getAcentricFactor()*component.getAcentricFactor())/Math.sqrt(
        temperature/component.getTC())/component.getTC();
        
        //return -(1.0+(0.48 + 1.574 * component.getAcentricFactor() - 0.176* component.getAcentricFactor() * component.getAcentricFactor() )*(1.0-Math.sqrt(temperature/component.getTC())))*(0.48 + 1.574 * component.getAcentricFactor() - 0.176* component.getAcentricFactor() * component.getAcentricFactor() )/Math.sqrt(temperature/component.getTC())/component.getTC();
    }
    
    public double diffdiffalphaT(double temperature) {
        
        return 0.2e-5*(-240.0-787.0*component.getAcentricFactor()+88.0*component.getAcentricFactor()*component.getAcentricFactor())*(-740.0-787.0*component.getAcentricFactor()+88.0*component.getAcentricFactor()*component.getAcentricFactor())/temperature/component.getTC()/Math.sqrt(temperature/component.getTC());
        
        //2.0*Math.pow(0.48+0.1574e1*component.getAcentricFactor()-0.176*component.getAcentricFactor()*component.getAcentricFactor(),2.0)/(component.getTC()*component.getTC());
    }
    
    public double diffaT(double temperature) {
        return component.geta()*diffalphaT(temperature);
    }
    
    public double diffdiffaT(double temperature) {
        return component.geta()*diffdiffalphaT(temperature);
    }
    
}
