  /*
   * System_SRK_EOS.java
   *
   * Created on 8. april 2000, 23:14
   */

package thermo.component;

import thermo.phase.*;
import thermo.mixingRule.*;
import thermo.component.atractiveEosTerm.*;
import MathLib.nonLinearSolver.*;
/**
 *
 * @author  Even Solbraa
 * @version
 */
public class ComponentPR extends ComponentEos{
    
    /** Creates new System_SRK_EOS
     */
    
    public ComponentPR() {
    }
    
    public ComponentPR(double moles) {
        numberOfMoles = moles;
    }
    
    public ComponentPR(String component_name,double moles,  double molesInPhase, int compnumber){
        super(component_name, moles, molesInPhase, compnumber);
        
        a  			= .45724333333 * R * R * criticalTemperature * criticalTemperature / criticalPressure;
        b  			= .077803333 * R * criticalTemperature / criticalPressure;
        //   m			= 0.37464 + 1.54226 * acentricFactor - 0.26992* acentricFactor * acentricFactor;
        
        delta1 = 1.0 + Math.sqrt(2.0);
        delta2 = 1.0 - Math.sqrt(2.0);
        atractiveParameter = new AtractiveTermPr(this);
    }
    
    public ComponentPR(int number,double TC,double PC,double M,double a,double moles) {
        super(number, TC, PC, M, a, moles);
    }
    
    public Object clone(){
        
        ComponentPR clonedComponent = null;
        try{
            clonedComponent = (ComponentPR) super.clone();
        }
        catch(Exception e) {
            e.printStackTrace(System.err);
        }
        
        return clonedComponent;
    }
    
    public void init(double temperature,double pressure,double totalNumberOfMoles, double beta,int type){
        super.init(temperature, pressure, totalNumberOfMoles, beta, type);
     }
    
    public void init(double temperature,double pressure,double totalNumberOfMoles, double beta,int type){
        super.init(temperature, pressure, totalNumberOfMoles, beta, type);
    }
    
    public double getVolumeCorrection(){
        if(this.getRacketZ()<1e-10) return 0.0;
        else return 0.40768*(0.29441-this.getRacketZ())*R*criticalTemperature/criticalPressure;
    }
    
    public double getQpure(double temperature){
        return this.getaT()/(this.getb()*R*temperature);
    }
    
    public double getdQpuredT(double temperature){
        return dqPuredT;
    }
    
    public double getdQpuredTdT(double temperature){
        return dqPuredTdT;
    }
}
