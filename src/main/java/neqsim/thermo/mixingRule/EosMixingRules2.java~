/*
 * EosMixingRules.java
 *
 * Created on 4. juni 2000, 12:38
 */

package thermo.mixingRule;

import thermo.component.*;
import thermo.*;
import thermo.phase.*;
import java.util.*;
import MathLib.JamaLinAlg.*;
import java.io.*;

/**
 * @author  Even Solbraa
 * @version
 */
public class EosMixingRules2 extends Object implements Cloneable,  java.io.Serializable,ThermodynamicConstantsInterface{
    
    double A,B;
    public double intparam[][];
    
    /** Creates new EosMixingRules */
    
    public EosMixingRules2() {
    }
    
    
    
    public Object clone(){
        EosMixingRules2 clonedSystem = null;
        try{
            clonedSystem = (EosMixingRules2) super.clone();
        }
        catch(Exception e)
        {
            e.printStackTrace(System.err);
        }
        
        clonedSystem.intparam = (double[][]) clonedSystem.intparam.clone();
        
        return clonedSystem;
    }
    
    
    public class ClassicVdW implements EosMixingRulesInterface, Cloneable, java.io.Serializable{
        
        public double calcA(PhaseInterface phase, double temperature, double pressure, int numbcomp){
            
            double aij=0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            A = 0;
            for (int i=0;i<numbcomp;i++){
                for (int j=0;j<numbcomp;j++){
                    aij = Math.sqrt(compArray[i].getaT()*compArray[j].getaT());
                    A = A + compArray[i].getNumberOfMolesInPhase() * compArray[j].getNumberOfMolesInPhase() * aij;
                }
            }
            return A;
        }
        
        
        public double calcB(PhaseInterface phase, double temperature, double pressure, int numbcomp){
            B = 0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            for (int i=0;i<numbcomp;i++){
                for (int j=0;j<numbcomp;j++){
                    B = B + compArray[i].getNumberOfMolesInPhase()*compArray[j].getNumberOfMolesInPhase() * (compArray[i].getb()+compArray[j].getb())/2;
                }
            }
            
            return B/phase.getNumberOfMolesInPhase();
        }
        
        
        public double calcAi(int compNumb, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            
            double aij=0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            A = 0;
            for (int j=0;j<numbcomp;j++){
                aij = Math.sqrt(compArray[compNumb].getaT()*compArray[j].getaT());
                A = A +  compArray[j].getNumberOfMolesInPhase() * aij;
            }
            
            return 2*A;
        }
        
        
        public double calcBi(int compNumb, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            double Bi=0;
            
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            for (int j=0;j<numbcomp;j++){
                Bi = Bi + compArray[j].getNumberOfMolesInPhase() * (compArray[compNumb].getb()+compArray[j].getb())/2.0;
            }
            
            return (2*Bi-phase.calcB(phase,temperature, pressure, numbcomp))/phase.getNumberOfMolesInPhase();
        }
        
        public double calcBij(int compNumb, int compNumbj, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            
            double bij=0;
            
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            bij = (compArray[compNumb].getb()+compArray[compNumbj].getb())/2.0;
            
            
            return (2*bij-phase.calcBi(compNumb, phase,temperature, pressure, numbcomp)-calcBi(compNumbj, phase,temperature, pressure, numbcomp))/phase.getNumberOfMolesInPhase();
        }
        
        
        
        public double calcAiT(int compNumb, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            double A;
            double aij=0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            A = 0;
            for (int j=0;j<numbcomp;j++){
                aij = 0.5/Math.sqrt(compArray[compNumb].getaT()*compArray[j].getaT())*(compArray[compNumb].getaT() * compArray[j].getaDiffT() +compArray[j].getaT() * compArray[compNumb].getaDiffT());
                A = A +  compArray[j].getNumberOfMolesInPhase() * aij;
            }
            
            return 2.0*A;
        }
        
        public double calcAij(int compNumb, int compNumbj, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            
            double aij=0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            aij = Math.sqrt(compArray[compNumb].getaT()*compArray[compNumbj].getaT());
            
            
            return 2.0*aij;
        }
        
        
        public double calcAT(PhaseInterface phase, double temperature, double pressure, int numbcomp){
            double A;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            A = 0;
            for (int i=0;i<numbcomp;i++){
                A = A +  compArray[i].getNumberOfMolesInPhase() * phase.calcAiT(i, phase, temperature, pressure, numbcomp);
                
                // System.out.println("mles: " + phase.calcAiT(i, phase, temperature, pressure, numbcomp));
            }
            
            return 0.5*A;
        }
        
        
        public double calcATT(PhaseInterface phase, double temperature, double pressure, int numbcomp){
            
            double aij=0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            A = 0;
            for (int i=0;i<numbcomp;i++){
                for (int j=0;j<numbcomp;j++){
                    aij = 0.5*((2.0*compArray[i].getaDiffT()*compArray[j].getaDiffT()+compArray[i].getaT()*compArray[j].getaDiffDiffT()+compArray[j].getaT()*compArray[i].getaDiffDiffT())/
                    Math.sqrt(compArray[i].getaT()*compArray[j].getaT())-Math.pow(compArray[i].getaT()*compArray[j].getaDiffT()+compArray[j].getaT()*compArray[i].getaDiffT(),2)/(2*Math.sqrt(compArray[i].getaT()*
                    compArray[j].getaT())*compArray[i].getaT()*compArray[j].getaT()));
                    A = A + compArray[i].getNumberOfMolesInPhase() * compArray[j].getNumberOfMolesInPhase() * aij;
                }
            }
            return A;
        }
        
        public Object clone(){
            ClassicVdW clonedSystem = null;
            try{
                clonedSystem = (ClassicVdW) super.clone();
            }
            catch(Exception e)
            {
                e.printStackTrace(System.err);
            }
            
            return clonedSystem;
        }
        
        
        
        
        
    }
    
    
    
    public class ClassicSRK extends ClassicVdW implements EosMixingRulesInterface, Cloneable, java.io.Serializable{
        
        
        public double calcA(PhaseInterface phase, double temperature, double pressure, int numbcomp){
            
            double aij=0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            A = 0;
            for (int i=0;i<numbcomp;i++){
                for (int j=0;j<numbcomp;j++){
                    aij = Math.sqrt(compArray[i].getaT()*compArray[j].getaT())*(1-intparam[i][j]);
                    A = A + compArray[i].getNumberOfMolesInPhase() * compArray[j].getNumberOfMolesInPhase() * aij;
                }
            }
            //     System.out.println("A SRK: " + (A));
            return A;
        }
        
        
        public double calcB(PhaseInterface phase, double temperature, double pressure, int numbcomp){
            B = 0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            for (int i=0;i<numbcomp;i++){
                for (int j=0;j<numbcomp;j++){
                    B = B + compArray[i].getNumberOfMolesInPhase()*compArray[j].getNumberOfMolesInPhase() * (compArray[i].getb()+compArray[j].getb())/2;
                }
            }
            
            return B/phase.getNumberOfMolesInPhase();
        }
        
        
        public double calcAi(int compNumb, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            
            double aij=0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            A = 0;
            for (int j=0;j<numbcomp;j++){
                aij = Math.sqrt(compArray[compNumb].getaT()*compArray[j].getaT())*(1-intparam[compNumb][j]);
                A = A +  compArray[j].getNumberOfMolesInPhase() * aij;
            }
       //     System.out.println("Ai SRK : " + (2*A));
            return 2*A;
        }
        
        
        public double calcBi(int compNumb, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            double Bi=0;
            
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            for (int j=0;j<numbcomp;j++){
                Bi = Bi + compArray[j].getNumberOfMolesInPhase() * (compArray[compNumb].getb()+compArray[j].getb())/2.0;
            }
            
            return (2*Bi-phase.calcB(phase,temperature, pressure, numbcomp))/phase.getNumberOfMolesInPhase();
        }
        
        public double calcBij(int compNumb, int compNumbj, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            
            double bij=0;
            
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            bij = (compArray[compNumb].getb()+compArray[compNumbj].getb())/2.0;
            
            
            return (2*bij-phase.calcBi(compNumb, phase,temperature, pressure, numbcomp)-calcBi(compNumbj, phase,temperature, pressure, numbcomp))/phase.getNumberOfMolesInPhase();
        }
        
        
        
        public double calcAiT(int compNumb, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            double A;
            double aij=0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            A = 0;
            for (int j=0;j<numbcomp;j++){
                aij = 0.5/Math.sqrt(compArray[compNumb].getaT()*compArray[j].getaT())*(compArray[compNumb].getaT() * compArray[j].getaDiffT() +compArray[j].getaT() * compArray[compNumb].getaDiffT())*(1-intparam[compNumb][j]);
                A = A +  compArray[j].getNumberOfMolesInPhase() * aij;
            }
      //      System.out.println("Ait SRK : " + (2*A));
            return 2.0*A;
        }
        
        public double calcAij(int compNumb, int compNumbj, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            
            double aij=0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            aij = Math.sqrt(compArray[compNumb].getaT()*compArray[compNumbj].getaT())*(1-intparam[compNumb][compNumbj]);
            
        //      System.out.println("aij SRK: " + 2*aij);
            return 2.0*aij;
        }
        
        
        public double calcAT(PhaseInterface phase, double temperature, double pressure, int numbcomp){
            double A;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            A = 0;
            for (int i=0;i<numbcomp;i++){
                A = A +  compArray[i].getNumberOfMolesInPhase() * phase.calcAiT(i, phase, temperature, pressure, numbcomp);
                
                // System.out.println("mles: " + phase.calcAiT(i, phase, temperature, pressure, numbcomp));
            }
          //  System.out.println("AT SRK: " + (0.5*A));
            return 0.5*A;
        }
        
        
        public double calcATT(PhaseInterface phase, double temperature, double pressure, int numbcomp){
            
            double aij=0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            A = 0;
            for (int i=0;i<numbcomp;i++){
                for (int j=0;j<numbcomp;j++){
                    aij = 0.5*((2.0*compArray[i].getaDiffT()*compArray[j].getaDiffT()+compArray[i].getaT()*compArray[j].getaDiffDiffT()+compArray[j].getaT()*compArray[i].getaDiffDiffT())/
                    Math.sqrt(compArray[i].getaT()*compArray[j].getaT())-Math.pow(compArray[i].getaT()*compArray[j].getaDiffT()+compArray[j].getaT()*compArray[i].getaDiffT(),2)/(2*Math.sqrt(compArray[i].getaT()*
                    compArray[j].getaT())*compArray[i].getaT()*compArray[j].getaT()))*(1-intparam[i][j]);
                    A = A + compArray[i].getNumberOfMolesInPhase() * compArray[j].getNumberOfMolesInPhase() * aij;
                }
            }
            return A;
        }
        
        public Object clone(){
            ClassicSRK clonedSystem = null;
            try{
                clonedSystem = (ClassicSRK) super.clone();
            }
            catch(Exception e)
            {
                e.printStackTrace(System.err);
            }
            
            //     clonedSystem.intparam = (double[][]) clonedSystem.intparam.clone();
            
            return clonedSystem;
        }
        
        
        
    }
    
    
    
    public class SRKHuronVidal extends ClassicSRK  implements EosMixingRulesInterface{
        
        PhaseInterface orgPhase;
        PhaseGENRTLmodifiedHV_1 gePhase;
        //   double[][] HValpha, HVgij;
        
        public SRKHuronVidal(PhaseInterface phase, double[][] HValpha, double[][] HVgij, String[][] mixRule){
            this.orgPhase = phase;
            gePhase = new PhaseGENRTLmodifiedHV_1(orgPhase, HValpha, HVgij, mixRule, intparam);
            gePhase.getExessGibbsEnergy(phase, phase.getNumberOfComponents(), phase.getTemperature(), phase.getPressure(), 1);
        }
        
        public double calcA(PhaseInterface phase, double temperature, double pressure, int numbcomp){
            double A=0;
            double aij=0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            for (int i=0;i<numbcomp;i++){
                aij = compArray[i].getaT()/compArray[i].getb();
                A = A + compArray[i].getNumberOfMolesInPhase() * aij;
            }
            A = calcB(phase, temperature, pressure, numbcomp)*(A-phase.getNumberOfMolesInPhase()*gePhase.getExessGibbsEnergy(phase, phase.getNumberOfComponents(), phase.getTemperature(), phase.getPressure(), 0)/Math.log(2.0));
            //     System.out.println("A HV : " + A);
            return A;
        }//phase.getNumberOfMolesInPhase()*
        
        public double calcAi(int compNumb, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            double A=0;
            double aij=0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            A = 0;
            aij = compArray[compNumb].getaT()/compArray[compNumb].getb();
            A = calcB(phase, temperature, pressure, numbcomp)*(aij-R*temperature*Math.log(((ComponentGEInterface)gePhase.getComponents()[compNumb]).getGamma())/Math.log(2.0));
            
            A = A+calcA(phase, temperature, pressure, numbcomp)*calcBi(compNumb, phase, temperature, pressure, numbcomp)/calcB(phase, temperature, pressure, numbcomp);
        //    System.out.println("Ai HV : " + A);
            return A;
        }
        
        public double calcAiT(int compNumb, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            double A=0;
            
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            A = calcB(phase, temperature, pressure, numbcomp) * (compArray[compNumb].getaDiffT()/compArray[compNumb].getb() - R*Math.log(((ComponentGEInterface)gePhase.getComponents()[compNumb]).getGamma())/Math.log(2.0) - R*temperature*((ComponentGEInterface)gePhase.getComponents()[compNumb]).getlnGammadt()/Math.log(2.0)) + compArray[compNumb].getb()*calcAT(phase, temperature, pressure, numbcomp)/calcB(phase, temperature, pressure, numbcomp);//....); 0.5/Math.sqrt(compArray[compNumb].getaT()*compArray[j].getaT())*(compArray[compNumb].getaT() * compArray[j].getaDiffT() +compArray[j].getaT() * compArray[compNumb].getaDiffT())*(1-intparam[compNumb][j]);
         //   System.out.println("Ait HV: " + A);
            return A;
        }
        
        public double calcAT(PhaseInterface phase, double temperature, double pressure, int numbcomp){
            double A=0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            for (int i=0;i<numbcomp;i++){
                A += compArray[i].getNumberOfMolesInPhase() * (compArray[i].getaDiffT()/compArray[i].getb() - R*Math.log(((ComponentGEInterface)gePhase.getComponents()[i]).getGamma())/Math.log(2.0) - R*temperature*((ComponentGEInterface)gePhase.getComponents()[i]).getlnGammadt()/Math.log(2.0));//....); 0.5/Math.sqrt(compArray[compNumb].getaT()*compArray[j].getaT())*(compArray[compNumb].getaT() * compArray[j].getaDiffT() +compArray[j].getaT() * compArray[compNumb].getaDiffT())*(1-intparam[compNumb][j]);
                //     System.out.println("dgdt: " + ((ComponentGEInterface)gePhase.getComponents()[i]).getlnGammadt());
            }
            
            A = A*calcB(phase, temperature, pressure, numbcomp);
         //   System.out.println("AT HV: " + A);
            return A;
        }
        
        public double calcAij(int compNumb, int compNumbj, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            double aij = compArray[compNumbj].getb()*(compArray[compNumb].getaT()/compArray[compNumb].getb()-R*temperature*Math.log(((ComponentGEInterface)gePhase.getComponents()[compNumb]).getGamma())/Math.log(2.0))-calcB(phase, temperature, pressure, numbcomp)*R*temperature/Math.log(2.0)*((ComponentGEInterface)gePhase.getComponents()[compNumb]).getlnGammadn(compNumbj)+compArray[compNumb].getb()*(compArray[compNumbj].getaT()/compArray[compNumbj].getb()-R*temperature*Math.log(((ComponentGEInterface)gePhase.getComponents()[compNumbj]).getGamma())/Math.log(2.0));
            //     System.out.println("aij HV : " + aij);//compArray[compNumbj].getb()*
            
            //    aij = calcBi(compNumbj, phase, temperature, pressure, numbcomp)*(compArray[compNumb].getaT()/compArray[compNumb].getb()-R*temperature*Math.log(((ComponentGEInterface)gePhase.getComponents()[compNumb]).getGamma())/Math.log(2.0))-calcB(phase, temperature, pressure, numbcomp)*R*temperature/Math.log(2.0)*((ComponentGEInterface)gePhase.getComponents()[compNumb]).getlnGammadn(compNumbj)+ compArray[compNumb].getb()*calcAi(compNumbj, phase, temperature, pressure, numbcomp)/calcB(phase, temperature, pressure, numbcomp) - compArray[compNumb].getb()*calcA(phase, temperature, pressure, numbcomp)/(calcB(phase, temperature, pressure, numbcomp)*calcB(phase, temperature, pressure, numbcomp))*calcBi(compNumbj, phase, temperature, pressure, numbcomp);
            //    System.out.println("dlngamma dn: " + "  " + ((ComponentGEInterface)gePhase.getComponents()[compNumb]).getlnGammadn(compNumbj));
            //    System.out.println("aij HV2 : " + aij);//compArray[compNumbj].getb()*
            return aij;
        }
        
    }
    
    
    
    public class ElectrolyteMixRule extends SRKHuronVidal implements ElectrolyteMixingRulesInterface, Cloneable, java.io.Serializable{
        
         public ElectrolyteMixRule(PhaseInterface phase, double[][] HValpha, double[][] HVgij, String[][] mixRule, double[][] wij){
             super(phase, HValpha, HVgij, mixRule);
             this.orgPhase = phase;
            gePhase = new PhaseGENRTLmodifiedHV_1(orgPhase, HValpha, HVgij, mixRule, intparam);
            gePhase.getExessGibbsEnergy(phase, phase.getNumberOfComponents(), phase.getTemperature(), phase.getPressure(), 1);
        }
        
        public double calcW(PhaseInterface phase, double temperature, double pressure, int numbcomp){
            
            double aij=0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            double A = 0;
            for (int i=0;i<numbcomp;i++){
                for (int j=0;j<numbcomp;j++){
                    aij = Math.sqrt(compArray[i].getaT()*compArray[j].getaT());
                    A = A + compArray[i].getNumberOfMolesInPhase() * compArray[j].getNumberOfMolesInPhase() * aij;
                }
            }
            return A;
        }
        
           public double calcWi(int compNumb, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            
            double aij=0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            double A = 0;
                    
            return 2*A;
        }
     }
    
    
    
    
    public EosMixingRulesInterface getMixingRule(int i){
        if(i==1){
            return new ClassicVdW();}
        else if(i==2){
            return new ClassicSRK();}
        else if(i==3){
            return new ClassicVdW();
        }
        else return new ClassicVdW();
    }
    
    public EosMixingRulesInterface getMixingRule(int i, PhaseInterface phase){
        RandomAccessFile file;
        intparam = new double[phase.getNumberOfComponents()][phase.getNumberOfComponents()];
        StringTokenizer tokenizer;
        double wij[][];
        double[][] HVgij, HValpha;
        String token;
        HVgij = new double[phase.getNumberOfComponents()][phase.getNumberOfComponents()];
        HValpha =  new double[phase.getNumberOfComponents()][phase.getNumberOfComponents()];
        String[][] classicOrHV = new String[phase.getNumberOfComponents()][phase.getNumberOfComponents()];
        
        for(int k=0; k<phase.getNumberOfComponents(); k++){
            String nameOfComponent = phase.getComponents()[k].getComponentName();
            
            
            String path = "D:/Java/Thermo_with_Java/thermo/component/componentData/" + nameOfComponent + ".txt";
            
            //    System.out.println(path);
            
            try	{
                
                file = new RandomAccessFile(path, "r");
                long filepointer = 0;
                int index;
                long length = file.length();
                String s;
                
                for(int l=0; l<phase.getNumberOfComponents(); l++){
                    if(l==k){
                        intparam[k][l]=0.0;
                        classicOrHV[k][l] = "Classic";
                    }
                    else{
                        
                        
                        file = new RandomAccessFile(path, "r");
                        s = file.readLine();
                        s = file.readLine();
                        s = file.readLine();
                        s = file.readLine();
                        do
                        {
                            
                            s = file.readLine();
                            tokenizer = new StringTokenizer(s);
                            index = Integer.parseInt(tokenizer.nextToken());
                            //      System.out.println("index : " + index + "  " + phase.getComponents()[l].getIndex());
                            
                            filepointer = file.getFilePointer();
                            
                        }
                        while (!(index==phase.getComponents()[l].getIndex()));
                        
                        tokenizer.nextToken();                                                             //AW
                        classicOrHV[k][l] = tokenizer.nextToken();
                        intparam[k][l] =  Double.parseDouble( tokenizer.nextToken()) ;
                        tokenizer.nextToken();
                        if(i==3){
                            HValpha[k][l] = Double.parseDouble( tokenizer.nextToken()) ;
                            HVgij[k][l] = Double.parseDouble( tokenizer.nextToken()) ;
                        }
                    }
                    
                    // System.out.println("hei");
                    
                    //    System.out.println("intpram: " + intparam[k][l]);
                    
                }
            }
            
            catch (Exception e)
            {
                String err = e.toString();
                System.out.println(err);
            }
        }
        
   /*     Matrix mat = new Matrix(HValpha);
        mat.print(10,3);
        Matrix mat2 = new Matrix(HVgij);
        mat2.print(10,3);*/
        
        if(i==1){
            return new ClassicVdW();}
        else if(i==2){
            return new ClassicSRK();}
        else if(i==3){
             return new SRKHuronVidal(phase, HValpha, HVgij, classicOrHV);}
        else if(i==10){
             return new ElectrolyteMixRule(phase, HValpha, HVgij, classicOrHV, wij);}
        
        else return new ClassicVdW();
    }
}