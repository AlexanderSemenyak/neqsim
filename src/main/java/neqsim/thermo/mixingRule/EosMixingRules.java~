/*
 * EosMixingRules.java
 *
 * Created on 4. juni 2000, 12:38
 */

package thermo.mixingRule;

import thermo.component.*;
import thermo.*;
import thermo.phase.*;
import java.util.*;
import MathLib.JamaLinAlg.*;
import java.io.*;

/**
 * @author  Even Solbraa
 * @version
 */
public class EosMixingRules extends Object implements Cloneable, java.io.Serializable, ThermodynamicConstantsInterface{
    
    public double Atot=0, Btot=0, Ai=0, Bi=0;
    public double A,B;
    public String mixingRuleGEModel ="NRTL";
    public String mixingRuleName = "no (kij=0)";
    public double intparam[][], WSintparam[][], intparamCPA[][];
    double[][] HVDij, HValpha, HVDijT;
    double[][] NRTLDij, NRTLalpha, NRTLDijT;
    double[][][] wij;
    String[][] classicOrHV,classicOrWS;
    public double nEOSkij=3.0;
    public static boolean calcEOSInteractionParameters = false;
    
    /** Creates new EosMixingRules */
    
    public EosMixingRules() {
    }
    
    
    
    public Object clone(){
        EosMixingRules clonedSystem = null;
        try{
            clonedSystem = (EosMixingRules) super.clone();
        }
        catch(Exception e) {
            e.printStackTrace(System.err);
        }
        
        //        clonedSystem.intparam = (double[][]) intparam.clone();
        //        clonedSystem.wij = (double[][][]) wij.clone();
        //        clonedSystem.WSintparam = (double[][]) WSintparam.clone() ;
        //        clonedSystem.HVDij = (double[][]) HVDij.clone();
        //        clonedSystem.HValpha = (double[][]) HValpha.clone();
        //        clonedSystem.HVDijT = (double[][]) HVDijT.clone();
        //        clonedSystem.NRTLDij  = (double[][]) NRTLDij.clone();
        //        clonedSystem.NRTLalpha = (double[][]) NRTLalpha.clone();
        //        clonedSystem.NRTLDijT = (double[][]) NRTLDijT.clone();
        //        clonedSystem.classicOrHV = (String[][]) classicOrHV.clone();
        
        return clonedSystem;
    }
    
    
    
    public class ClassicVdW implements EosMixingRulesInterface, Cloneable, java.io.Serializable{
        
        public java.lang.String getMixingRuleName() {
            return mixingRuleName;
        }
        
        public void setMixingRuleGEModel(java.lang.String GEmodel) {
            mixingRuleGEModel = GEmodel;
        }
        
        public double getBinaryInteractionParameter(int i, int j){
            return intparam[i][j];
        }
        
        public void setBinaryInteractionParameter(int i, int j, double value){
            // System.out.println("intparam:  " + intparam[i][j]  + "  value " + value);
            intparam[i][j] = value;
            intparam[j][i] = value;
        }
        
        /** Setter for property CalcEOSInteractionParameters.
         * @param CalcEOSInteractionParameters New value of property CalcEOSInteractionParameters.
         */
        public void setCalcEOSInteractionParameters(boolean CalcEOSInteractionParameters2) {
            calcEOSInteractionParameters = CalcEOSInteractionParameters2;
        }
        
        public void setnEOSkij(double n){
            nEOSkij = n;
        }
        
        public double getA(){
            return Atot;
        }
        
        public double getB(){
            return Btot;
        }
        
        public double calcA(PhaseInterface phase, double temperature, double pressure, int numbcomp){
            double aij=0.0, A=0.0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            for (int i=0;i<numbcomp;i++){
                for (int j=0;j<numbcomp;j++){
                    aij = Math.sqrt(compArray[i].getaT()*compArray[j].getaT());
                    A += compArray[i].getNumberOfMolesInPhase() * compArray[j].getNumberOfMolesInPhase() * aij;
                }
            }
            Atot = A;
            return A;
        }
        
        
        public double calcB(PhaseInterface phase, double temperature, double pressure, int numbcomp){
            B = 0.0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            for (int i=0;i<numbcomp;i++){
                for (int j=0;j<numbcomp;j++){
                    B += compArray[i].getNumberOfMolesInPhase()*compArray[j].getNumberOfMolesInPhase() * (compArray[i].getb()+compArray[j].getb())/2;
                }
            }
            B = B/phase.getNumberOfMolesInPhase();
            Btot = B;
            return B;
        }
        
        
        public double calcAi(int compNumb, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            
            double aij=0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            Ai = 0.0;
            for (int j=0;j<numbcomp;j++){
                aij = Math.sqrt(compArray[compNumb].getaT()*compArray[j].getaT());
                Ai = Ai +  compArray[j].getNumberOfMolesInPhase() * aij;
            }
            
            return 2*Ai;
        }
        
        
        public double calcBi(int compNumb, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            double Bi=0.0;
            
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            for (int j=0;j<numbcomp;j++){
                Bi += compArray[j].getNumberOfMolesInPhase() * (compArray[compNumb].getb()+compArray[j].getb())/2.0;
            }
            Bi = (2*Bi-getB())/phase.getNumberOfMolesInPhase();
            return Bi;
        }
        
        public double calcBij(int compNumb, int compNumbj, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            double bij=0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            bij = (compArray[compNumb].getb()+compArray[compNumbj].getb())/2.0;
            return (2*bij-phase.calcBi(compNumb, phase,temperature, pressure, numbcomp)-calcBi(compNumbj, phase,temperature, pressure, numbcomp))/phase.getNumberOfMolesInPhase();
        }
        
        
        
        public double calcAiT(int compNumb, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            double A = 0.0;
            double aij=0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            for (int j=0;j<numbcomp;j++){
                aij = 0.5/Math.sqrt(compArray[compNumb].getaT()*compArray[j].getaT())*(compArray[compNumb].getaT() * compArray[j].getaDiffT() +compArray[j].getaT() * compArray[compNumb].getaDiffT());
                A = A +  compArray[j].getNumberOfMolesInPhase() * aij;
            }
            
            return 2.0*A;
        }
        
        public double calcAij(int compNumb, int compNumbj, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            double aij=0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            aij = Math.sqrt(compArray[compNumb].getaT()*compArray[compNumbj].getaT());
            
            
            return 2.0*aij;
        }
        
        
        public double calcAT(PhaseInterface phase, double temperature, double pressure, int numbcomp){
            double A = 0.0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            for (int i=0;i<numbcomp;i++){
                A = A +  compArray[i].getNumberOfMolesInPhase() * phase.calcAiT(i, phase, temperature, pressure, numbcomp);
                
                // System.out.println("mles: " + phase.calcAiT(i, phase, temperature, pressure, numbcomp));
            }
            
            return 0.5*A;
        }
        
        
        public double calcATT(PhaseInterface phase, double temperature, double pressure, int numbcomp){
            
            double aij=0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            A = 0.0;
            for (int i=0;i<numbcomp;i++){
                for (int j=0;j<numbcomp;j++){
                    aij = 0.5*((2.0*compArray[i].getaDiffT()*compArray[j].getaDiffT()+compArray[i].getaT()*compArray[j].getaDiffDiffT()+compArray[j].getaT()*compArray[i].getaDiffDiffT())/
                    Math.sqrt(compArray[i].getaT()*compArray[j].getaT())-Math.pow(compArray[i].getaT()*compArray[j].getaDiffT()+compArray[j].getaT()*compArray[i].getaDiffT(),2)/(2*Math.sqrt(compArray[i].getaT()*
                    compArray[j].getaT())*compArray[i].getaT()*compArray[j].getaT()));
                    A += compArray[i].getNumberOfMolesInPhase() * compArray[j].getNumberOfMolesInPhase() * aij;
                }
            }
            return A;
        }
        
        public Object clone(){
            ClassicVdW clonedSystem = null;
            try{
                clonedSystem = (ClassicVdW) super.clone();
            }
            catch(Exception e) {
                e.printStackTrace(System.err);
            }
            
            return clonedSystem;
        }
        
        
    }
    
    
    
    public class ClassicSRK extends ClassicVdW implements EosMixingRulesInterface, Cloneable, java.io.Serializable{
        
        
        public double calcA(PhaseInterface phase, double temperature, double pressure, int numbcomp){
            
            double aij=0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            A = 0.0;
            for (int i=0;i<numbcomp;i++){
                for (int j=0;j<numbcomp;j++){
                    aij = Math.sqrt(compArray[i].getaT()*compArray[j].getaT())*(1.0-intparam[i][j]);
                    A += compArray[i].getNumberOfMolesInPhase() * compArray[j].getNumberOfMolesInPhase() * aij;
                }
            }
            Atot = A;
            return A;
        }
        
        
        public double calcB(PhaseInterface phase, double temperature, double pressure, int numbcomp){
            B = 0.0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            for (int i=0;i<numbcomp;i++){
                for (int j=0;j<numbcomp;j++){
                    B += compArray[i].getNumberOfMolesInPhase()*compArray[j].getNumberOfMolesInPhase() * (compArray[i].getb()+compArray[j].getb())/2.0;
                }
            }
            Btot = B/phase.getNumberOfMolesInPhase();
            return Btot;
        }
        
        
        public double calcAi(int compNumb, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            double aij=0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            A = 0;
            for (int j=0;j<numbcomp;j++){
                aij = Math.sqrt(compArray[compNumb].getaT()*compArray[j].getaT())*(1-intparam[compNumb][j]);
                A  +=  compArray[j].getNumberOfMolesInPhase() * aij;
            }
            return 2*A;
        }
        
        
        public double calcBi(int compNumb, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            double Bi=0.0;
            
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            for (int j=0;j<numbcomp;j++){
                Bi += compArray[j].getNumberOfMolesInPhase() * (compArray[compNumb].getb()+compArray[j].getb())/2.0;
            }
            
            return (2*Bi-getB())/phase.getNumberOfMolesInPhase();
        }
        
        public double calcBij(int compNumb, int compNumbj, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            double bij = (compArray[compNumb].getb()+compArray[compNumbj].getb())/2.0;
            return (2*bij-phase.calcBi(compNumb, phase,temperature, pressure, numbcomp)-calcBi(compNumbj, phase,temperature, pressure, numbcomp))/phase.getNumberOfMolesInPhase();
        }
        
        
        
        public double calcAiT(int compNumb, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            double A = 0.0;
            double aij=0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            for (int j=0;j<numbcomp;j++){
                aij = 0.5/Math.sqrt(compArray[compNumb].getaT()*compArray[j].getaT())*(compArray[compNumb].getaT() * compArray[j].getaDiffT() +compArray[j].getaT() * compArray[compNumb].getaDiffT())*(1-intparam[compNumb][j]);
                A +=  compArray[j].getNumberOfMolesInPhase() * aij;
            }
            //   System.out.println("Ait SRK : " + (2*A));
            return 2.0*A;
        }
        
        public double calcAij(int compNumb, int compNumbj, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            double aij=0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            aij = Math.sqrt(compArray[compNumb].getaT()*compArray[compNumbj].getaT())*(1-intparam[compNumb][compNumbj]);
            return 2.0*aij;
        }
        
        
        public double calcAT(PhaseInterface phase, double temperature, double pressure, int numbcomp){
            double A=0.0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            for (int i=0;i<numbcomp;i++){
                A += compArray[i].getNumberOfMolesInPhase() * phase.calcAiT(i, phase, temperature, pressure, numbcomp);
            }
            //  System.out.println("AT SRK: " + (0.5*A));
            return 0.5*A;
        }
        
        
        public double calcATT(PhaseInterface phase, double temperature, double pressure, int numbcomp){
            double aij=0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            A = 0.0;
            for (int i=0;i<numbcomp;i++){
                for (int j=0;j<numbcomp;j++){
                    aij = 0.5*((2.0*compArray[i].getaDiffT()*compArray[j].getaDiffT()+compArray[i].getaT()*compArray[j].getaDiffDiffT()+compArray[j].getaT()*compArray[i].getaDiffDiffT())/
                    Math.sqrt(compArray[i].getaT()*compArray[j].getaT())-Math.pow(compArray[i].getaT()*compArray[j].getaDiffT()+compArray[j].getaT()*compArray[i].getaDiffT(),2)/(2*Math.sqrt(compArray[i].getaT()*
                    compArray[j].getaT())*compArray[i].getaT()*compArray[j].getaT()))*(1-intparam[i][j]);
                    A += compArray[i].getNumberOfMolesInPhase() * compArray[j].getNumberOfMolesInPhase() * aij;
                }
            }
            return A;
        }
        
        public Object clone(){
            ClassicSRK clonedSystem = null;
            try{
                clonedSystem = (ClassicSRK) super.clone();
            }
            catch(Exception e) {
                e.printStackTrace(System.err);
            }
            
            //     clonedSystem.intparam = (double[][]) clonedSystem.intparam.clone();
            
            return clonedSystem;
        }
        
        
    }
    
    
    
    public class SRKHuronVidal extends ClassicSRK  implements HVmixingRuleInterface, EosMixingRulesInterface{
        
        PhaseInterface orgPhase;
        PhaseGENRTLmodifiedHV gePhase;
        double hwfc=0;
        //   double[][] HValpha, HVgij;
        
        
        public SRKHuronVidal(PhaseInterface phase, double[][] HValpha, double[][] HVDij, String[][] mixRule){
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            this.orgPhase = phase;
            hwfc =  1.0/(compArray[0].getDeltaEosParameters()[1]-compArray[0].getDeltaEosParameters()[0]) * Math.log((1.0+compArray[0].getDeltaEosParameters()[1])/(1.0+compArray[0].getDeltaEosParameters()[0]));
            gePhase = new PhaseGENRTLmodifiedHV(orgPhase, HValpha, HVDij, mixRule, intparam);
            gePhase.getExessGibbsEnergy(phase, phase.getNumberOfComponents(), phase.getTemperature(), phase.getPressure(), 1);
        }
        
        public SRKHuronVidal(PhaseInterface phase, double[][] HValpha, double[][] HVDij, double[][] HVDijT, String[][] mixRule){
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            this.orgPhase = phase;
            hwfc =  1.0/(compArray[0].getDeltaEosParameters()[1]-compArray[0].getDeltaEosParameters()[0]) * Math.log((1.0+compArray[0].getDeltaEosParameters()[1])/(1.0+compArray[0].getDeltaEosParameters()[0]));
            gePhase = new PhaseGENRTLmodifiedHV(orgPhase, HValpha, HVDij, HVDijT, mixRule, intparam);
            gePhase.getExessGibbsEnergy(phase, phase.getNumberOfComponents(), phase.getTemperature(), phase.getPressure(), 1);
        }
        
        public void setHVDijParameter(int i, int j, double value){
            HVDij[i][j] = value;
            //System.out.println("hv " + value);
            // HVDij[j][i] = value;
            gePhase.setDij(HVDij);
        }
        
        public double getHVDijParameter(int i, int j){
            return HVDij[i][j];
        }
        
        public void setHVDijTParameter(int i, int j, double value){
            HVDijT[i][j] = value;
            //HVDijT[j][i] = value;
            gePhase.setDijT(HVDijT);
        }
        
        public double getHVDijTParameter(int i, int j){
            return HVDijT[i][j];
        }
        
        public void setHValphaParameter(int i, int j, double value){
            HValpha[i][j] = value;
            HValpha[j][i] = value;
            gePhase.setAlpha(HValpha);
        }
        
        public double getHValphaParameter(int i, int j){
            return HValpha[i][j];
        }
        
        public double getKijWongSandler(int i, int j){
            return WSintparam[i][j];
        }
        
        public void setKijWongSandler(int i, int j, double value){
            WSintparam[i][j] = value;
            WSintparam[j][i] = value;
        }
        
        
        public double calcA(PhaseInterface phase, double temperature, double pressure, int numbcomp){
            double A=0.0;
            double aij=0.0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            for (int i=0;i<numbcomp;i++){
                aij = compArray[i].getaT()/compArray[i].getb();
                A += compArray[i].getNumberOfMolesInPhase() * aij;
            }
            A = calcB(phase, temperature, pressure, numbcomp)*(A-phase.getNumberOfMolesInPhase()*gePhase.getExessGibbsEnergy(phase, phase.getNumberOfComponents(), phase.getTemperature(), phase.getPressure(), 0)/gePhase.getNumberOfMolesInPhase()/hwfc);
            Atot = A;
            return A;
        }
        
        public double calcAi(int compNumb, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            double A=0.0;
            double aij=0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            aij = compArray[compNumb].getaT()/compArray[compNumb].getb();
            A = getB()*(aij-R*temperature*Math.log(((ComponentGEInterface)gePhase.getComponents()[compNumb]).getGamma())/hwfc);
            
            A = A+getA()*calcBi(compNumb, phase, temperature, pressure, numbcomp)/getB();
            // System.out.println("Ai HV : " + A);
            return A;
        }
        
        public double calcAiT(int compNumb, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            double A=0;
            
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            A = getB() * (compArray[compNumb].getaDiffT()/compArray[compNumb].getb() - R*Math.log(((ComponentGEInterface)gePhase.getComponents()[compNumb]).getGamma())/hwfc - R*temperature*((ComponentGEInterface)gePhase.getComponents()[compNumb]).getlnGammadt()/hwfc) + compArray[compNumb].getb()*calcAT(phase, temperature, pressure, numbcomp)/getB();//....); 0.5/Math.sqrt(compArray[compNumb].getaT()*compArray[j].getaT())*(compArray[compNumb].getaT() * compArray[j].getaDiffT() +compArray[j].getaT() * compArray[compNumb].getaDiffT())*(1-intparam[compNumb][j]);
            //   System.out.println("Ait HV: " + A);
            return A;
        }
        
        public double calcAT(PhaseInterface phase, double temperature, double pressure, int numbcomp){
            double A=0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            for (int i=0;i<numbcomp;i++){
                A += compArray[i].getNumberOfMolesInPhase() * (compArray[i].getaDiffT()/compArray[i].getb() - R*Math.log(((ComponentGEInterface)gePhase.getComponents()[i]).getGamma())/hwfc - R*temperature*((ComponentGEInterface)gePhase.getComponents()[i]).getlnGammadt()/Math.log(2.0));//....); 0.5/Math.sqrt(compArray[compNumb].getaT()*compArray[j].getaT())*(compArray[compNumb].getaT() * compArray[j].getaDiffT() +compArray[j].getaT() * compArray[compNumb].getaDiffT())*(1-intparam[compNumb][j]);
            }
            
            A = A*getB();
            //   System.out.println("AT HV: " + A);
            return A;
        }
        
        public double calcAij(int compNumb, int compNumbj, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            double aij = compArray[compNumbj].getb()*(compArray[compNumb].getaT()/compArray[compNumb].getb()-R*temperature*Math.log(((ComponentGEInterface)gePhase.getComponents()[compNumb]).getGamma())/hwfc)-getB()*R*temperature/hwfc*((ComponentGEInterface)gePhase.getComponents()[compNumb]).getlnGammadn(compNumbj)+compArray[compNumb].getb()*(compArray[compNumbj].getaT()/compArray[compNumbj].getb()-R*temperature*Math.log(((ComponentGEInterface)gePhase.getComponents()[compNumbj]).getGamma())/hwfc);
            return aij;
        }
    }
    
    
    
    
    public class SRKHuronVidal2 extends ClassicSRK  implements HVmixingRuleInterface, EosMixingRulesInterface{
        
        PhaseInterface orgPhase;
        PhaseGE gePhase;
        double Q=0, QT=0, DDE2;
        double alpha_mix=0, dadt=0, b_mix=0, dbdt=0, bdert=0, d2adt2=0, d2bdt2=0;
        double[] ader, adert, qf1, d2qp;
        double[] qPure, qPuredT, qPuredTdT;
        double[][] ad2,qf2, qft, bd2;
        double hwfc=0, gex=0, hex=0, cpex=0;
        double[] oneSubAlf, abf, bc, abft2, abft, QFTD, BDER,BDERT;
        
        
        public SRKHuronVidal2(PhaseInterface phase, double[][] HValpha, double[][] HVDij, String[][] mixRule){
            this.orgPhase = phase;
            phase.init(phase.getNumberOfMolesInPhase(),phase.getNumberOfComponents(),phase.getPhaseType(),phase.getPhaseType(),phase.getBeta());
            
            //gePhase = new PhaseGENRTLmodifiedHV(orgPhase, HValpha, HVDij, mixRule, intparam);
            if(mixingRuleGEModel.equals("NRTL")){
                gePhase = new PhaseGENRTLmodifiedHV(orgPhase, HValpha, HVDij, mixRule, intparam);
            }
            else if(mixingRuleGEModel.equals("UNIQUAQ")){
                gePhase = new PhaseGENRTLmodifiedWS(orgPhase, HValpha, HVDij, mixRule, intparam);
            }
            else if(mixingRuleGEModel.equals("UNIFAC_PSRK")){
                gePhase = new PhaseGEUnifacPSRK(orgPhase, HValpha, HVDij, mixRule, intparam);
            }
            else{
                gePhase = new PhaseGEUnifac(orgPhase, HValpha, HVDij, mixRule, intparam);
            }
            gePhase.setProperties(phase);
            gePhase.init(phase.getNumberOfMolesInPhase(),phase.getNumberOfComponents(),0,phase.getPhaseType(),phase.getBeta());
            //     gePhase.getExessGibbsEnergy(phase, phase.getNumberOfComponents(), phase.getTemperature(), phase.getPressure(), 0);
        }
        
        public SRKHuronVidal2(PhaseInterface phase, double[][] HValpha, double[][] HVDij, double[][] HVDijT, String[][] mixRule){
            this.orgPhase = phase;
            phase.init(phase.getNumberOfMolesInPhase(),phase.getNumberOfComponents(),phase.getPhaseType(),phase.getPhaseType(),phase.getBeta());
            
            if(mixingRuleGEModel.equals("NRTL")){
                gePhase = new PhaseGENRTLmodifiedHV(orgPhase, HValpha, HVDij,HVDijT, mixRule, intparam);
            }
            else if(mixingRuleGEModel.equals("UNIQUAQ")){
                gePhase = new PhaseGENRTLmodifiedHV(orgPhase, HValpha, HVDij, HVDijT, mixRule, intparam);
            }
            else if(mixingRuleGEModel.equals("UNIFAC_PSRK")){
                System.out.println("unifac psrk");
                gePhase = new PhaseGEUnifacPSRK(orgPhase, HValpha, HVDij, mixRule, intparam);
            }
            else{
                System.out.println("unifac");
                gePhase = new PhaseGEUnifac(orgPhase, HValpha, HVDij, mixRule, intparam);
            }
            gePhase.setProperties(phase);
            gePhase.init(phase.getNumberOfMolesInPhase(),phase.getNumberOfComponents(),0,phase.getPhaseType(),phase.getBeta());
        }
        
        
        public void init(PhaseInterface phase, double temperature, double pressure, int numbcomp){
            
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            gePhase.setProperties(phase);
            if(mixingRuleGEModel.equals("NRTL")){
                gePhase.getExessGibbsEnergy(phase, numbcomp, temperature, pressure, phase.getPhaseType());
            }
            else{
                gePhase.init(phase.getNumberOfMolesInPhase(),phase.getNumberOfComponents(),1,phase.getPhaseType(),phase.getBeta());
            }
            
            hwfc =  -1.0/(1.0/(compArray[0].getDeltaEosParameters()[1]-compArray[0].getDeltaEosParameters()[0]) * Math.log((1.0+compArray[0].getDeltaEosParameters()[1])/(1.0+compArray[0].getDeltaEosParameters()[0])));
            if(mixingRuleGEModel.equals("UNIFAC_PSRK")){
                hwfc=-1.0/0.64663;
            }
            //System.out.println("hwfc " + 1.0/hwfc);
            double term= 0.0;
            qPure = new double[numbcomp];
            qPuredT = new double[numbcomp];
            qPuredTdT = new double[numbcomp];
            ader = new double[numbcomp];
            adert = new double[numbcomp];
            ad2 = new double[numbcomp][numbcomp];
            qf2 = new double[numbcomp][numbcomp];
            bd2 = new double[numbcomp][numbcomp];
            qft = new double[numbcomp][numbcomp];
            qf1 = new double[numbcomp];
            oneSubAlf= new double[numbcomp];
            abf = new double[numbcomp];
            bc = new double[numbcomp];
            QFTD = new double[numbcomp];
            
            // first part
            hex = phase.getHresTP()/phase.getNumberOfMolesInPhase();
            cpex = phase.getCpres()/phase.getNumberOfMolesInPhase();
            
            
            for(int i=0;i<numbcomp;i++) {
                qPure[i] = compArray[i].getaT()/(compArray[i].getb() * R * temperature);
                qPuredT[i] =  - compArray[i].getaT()/(compArray[i].getb() * R * temperature*temperature) + compArray[i].diffaT(temperature)/(compArray[i].getb() * R * temperature);
                qPuredTdT[i] =  2.0*compArray[i].getaT()/(compArray[i].getb() * R * Math.pow(temperature,3.0)) - compArray[i].getaDiffT()/(compArray[i].getb() * R * Math.pow(temperature,2.0))
                + compArray[i].getaDiffDiffT()/(compArray[i].getb() * R * temperature) -  compArray[i].getaDiffT()/(compArray[i].getb() * R * Math.pow(temperature,2.0));
            }
            
            
            double sd2 = (2.0*hex-cpex*temperature)/Math.pow(temperature,3.0);
            double cnt2 = 0.0;
            for(int i=0;i<numbcomp;i++) cnt2 += phase.getComponents()[i].getNumberOfMolesInPhase()/phase.getNumberOfMolesInPhase()*qPuredTdT[i];
            
            // second part
            alpha_mix = 0.0;
            dadt = 0.0;
            for(int i=0;i<numbcomp;i++) {
                term = qPure[i] + hwfc*Math.log(((ComponentGEInterface)gePhase.getComponents()[i]).getGamma());
                alpha_mix += phase.getComponents()[i].getNumberOfMolesInPhase()/phase.getNumberOfMolesInPhase() * term;
                ader[i] = term;
                compArray[i].setAder(ader[i]);
                
                term = qPuredT[i] + hwfc * ((ComponentGEInterface)gePhase.getComponents()[i]).getlnGammadt();
                dadt += term * phase.getComponents()[i].getNumberOfMolesInPhase()/phase.getNumberOfMolesInPhase();
                adert[i] = term;
                compArray[i].setdAdTdn(adert[i]);
            }
            d2adt2 = cnt2 + hwfc*sd2;
            
            for(int i=0;i<numbcomp;i++) {
                for(int j=0;j<numbcomp;j++) {
                    ad2[i][j] = hwfc*((ComponentGEInterface)gePhase.getComponents()[i]).getlnGammadn(j);
                    compArray[i].setdAdndn(j, ad2[i][j]);
                }
            }
        }
        
        public void setHVDijParameter(int i, int j, double value){
            HVDij[i][j] = value;
            gePhase.setDij(HVDij);
        }
        
        public double getHVDijParameter(int i, int j){
            return HVDij[i][j];
        }
        
        public void setHVDijTParameter(int i, int j, double value){
            HVDijT[i][j] = value;
            gePhase.setDijT(HVDijT);
        }
        
        public double getHVDijTParameter(int i, int j){
            return HVDijT[i][j];
        }
        
        public void setHValphaParameter(int i, int j, double value){
            HValpha[i][j] = value;
            HValpha[j][i] = value;
            gePhase.setAlpha(HValpha);
        }
        
        public double getHValphaParameter(int i, int j){
            return HValpha[i][j];
        }
        
        
        public double getKijWongSandler(int i, int j){
            return WSintparam[i][j];
        }
        
        public void setKijWongSandler(int i, int j, double value){
            WSintparam[i][j] = value;
            WSintparam[j][i] = value;
        }
        
        
        public double calcA(PhaseInterface phase, double temperature, double pressure, int numbcomp){
            double A=0.0;
            this.init(phase, temperature, pressure, numbcomp);
            A = Math.pow(phase.getNumberOfMolesInPhase(),1.0) * calcB(phase, temperature, pressure, numbcomp) * R * temperature * alpha_mix;
            // System.out.println("A: " + A);
            Atot = A;
            return A;
        }
        
        public double calcAi(int compNumb, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            double A=0.0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            A = getB() * R * temperature * compArray[compNumb].getAder()
            +   Math.pow(phase.getNumberOfMolesInPhase(),1.0) * calcBi(compNumb, phase, temperature, pressure, numbcomp)* R * temperature * alpha_mix;
            //      System.out.println("Ai: " + A);
            return A;
        }
        
        public double calcAT(PhaseInterface phase, double temperature, double pressure, int numbcomp){
            double A=0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            A = Math.pow(phase.getNumberOfMolesInPhase(),1.0) * getB() * R * temperature * dadt
            +   Math.pow(phase.getNumberOfMolesInPhase(),1.0) * getB() * R * alpha_mix;
            
            return A;
        }
        
        public double calcATTT(PhaseInterface phase, double temperature, double pressure, int numbcomp){
            double A=0;
            A = Math.pow(phase.getNumberOfMolesInPhase(),1.0) * getB() * R * temperature * d2adt2
            + Math.pow(phase.getNumberOfMolesInPhase(),1.0) * getB() * R * dadt
            + Math.pow(phase.getNumberOfMolesInPhase(),1.0) * getB() * R * dadt;
            
            return A;
        }
        
        public double calcAiT(int compNumb, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            double A = getB() * R * compArray[compNumb].getAder()
            + getB() * R * temperature * compArray[compNumb].getdAdTdn()
            +  Math.pow(phase.getNumberOfMolesInPhase(),1.0) * calcBi(compNumb, phase, temperature, pressure, numbcomp)* R *temperature *  dadt
            +  Math.pow(phase.getNumberOfMolesInPhase(),1.0) * calcBi(compNumb, phase, temperature, pressure, numbcomp)* R * alpha_mix;
            
            return A;
        }
        
        public double calcAij(int compNumb, int compNumbj, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            double A=0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            A = Math.pow(phase.getNumberOfMolesInPhase(),0.0)*calcBi(compNumbj, phase, temperature, pressure, numbcomp) * R * temperature * compArray[compNumb].getAder()
            +  Math.pow(phase.getNumberOfMolesInPhase(),0.0)*calcB(phase, temperature, pressure, numbcomp) * R * temperature * compArray[compNumb].getdAdndn(compNumbj)
            +  Math.pow(phase.getNumberOfMolesInPhase(),0.0)*calcBi(compNumb, phase, temperature, pressure, numbcomp)* R * temperature * compArray[compNumbj].getAder()
            +  Math.pow(phase.getNumberOfMolesInPhase(),0.0) * calcBij(compNumb, compNumbj, phase, temperature, pressure, numbcomp)* R * temperature * alpha_mix;
            
            return A;
        }
    }
    
    
    
    public class WongSandlerMixingRule extends SRKHuronVidal2  implements HVmixingRuleInterface, EosMixingRulesInterface{
        
        PhaseGE gePhase = null;
        double Q=0, QT=0, DDE2;
        double alpha_mix=0, dadt=0, b_mix=0, dbdt=0, bdert=0, d2adt2=0, d2bdt2=0;
        double[] ader, adert, qf1, d2qp;
        double[] qPure, qPuredT, qPuredTdT;
        double[][] ad2,qf2, qft, bd2;
        double hwfc=0, gex=0, hex=0, cpex=0;
        double[] oneSubAlf, abf, bc, abft2, abft, QFTD, BDER,BDERT;
        
        public WongSandlerMixingRule(PhaseInterface phase, double[][] WSalpha, double[][] WSDij,  String[][] mixRule){
            super(phase, WSalpha, WSDij, mixRule);
            this.orgPhase = phase;
            
            phase.init(phase.getNumberOfMolesInPhase(),phase.getNumberOfComponents(),phase.getPhaseType(),phase.getPhaseType(),phase.getBeta());
            System.out.println(mixingRuleGEModel);
            
            if(mixingRuleGEModel.equals("NRTL")){
                gePhase = new PhaseGENRTLmodifiedWS(orgPhase, WSalpha, WSDij, mixRule, intparam);
            }
            else if(mixingRuleGEModel.equals("UNIQUAQ")){
                gePhase = new PhaseGENRTLmodifiedWS(orgPhase, WSalpha, WSDij, mixRule, intparam);
            }
            else{
                gePhase = new PhaseGEUnifac(orgPhase, WSalpha, WSDij, mixRule, intparam);
            }
            gePhase.init(phase.getNumberOfMolesInPhase(),phase.getNumberOfComponents(),0,phase.getPhaseType(),phase.getBeta());
            gePhase.setProperties(phase);
            
            //gePhase.init(phase.getNumberOfMolesInPhase(),phase.getNumberOfComponents(),phase.getPhaseType(),phase.getPhaseType(),phase.getBeta());
            //   gePhase.getExessGibbsEnergy(gePhase, phase.getNumberOfComponents(), phase.getTemperature(), phase.getPressure(), 1);
        }
        
        public WongSandlerMixingRule(PhaseInterface phase, double[][] WSalpha, double[][] WSDij, double[][] WSDijT, String[][] mixRule){
            super(phase, WSalpha, WSDij,WSDijT, mixRule);
            this.orgPhase = phase;
            phase.init(phase.getNumberOfMolesInPhase(),phase.getNumberOfComponents(),phase.getPhaseType(),phase.getPhaseType(),phase.getBeta());
            //gePhase = new PhaseGENRTLmodifiedWS(orgPhase, WSalpha, WSDij, WSDijT, mixRule, intparam);
            System.out.println(mixingRuleGEModel);
            
            if(mixingRuleGEModel.equals("NRTL")){
                gePhase = new PhaseGENRTLmodifiedWS(orgPhase, WSalpha, WSDij,WSDijT, mixRule, intparam);
            }
            else if(mixingRuleGEModel.equals("UNIQUAQ")){
                gePhase = new PhaseGENRTLmodifiedWS(orgPhase, WSalpha, WSDij, WSDijT, mixRule, intparam);
            }
            else{
                gePhase = new PhaseGEUnifac(orgPhase, WSalpha, WSDij, mixRule, intparam);
            }
            gePhase.init(phase.getNumberOfMolesInPhase(),phase.getNumberOfComponents(), 0,phase.getPhaseType(),phase.getBeta());
            gePhase.setProperties(gePhase);
            
            //  gePhase.getExessGibbsEnergy(gePhase, phase.getNumberOfComponents(), phase.getTemperature(), phase.getPressure(), 1);
        }
        
        public void init(PhaseInterface phase, double temperature, double pressure, int numbcomp){
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            gePhase.setProperties(phase);
            
            if(mixingRuleGEModel.equals("NRTL")){
                gePhase.getExessGibbsEnergy(phase, numbcomp, temperature, pressure, phase.getPhaseType());
            }
            else{
                gePhase.init(phase.getNumberOfMolesInPhase(),phase.getNumberOfComponents(),1,phase.getPhaseType(),phase.getBeta());
            }
            
            //gePhase.getExessGibbsEnergy(gePhase, numbcomp, temperature, pressure, 1);
            //hwfc =  -1.0/(1.0/(0.0-1.0) * Math.log((1.0+0.0)/(1.0+1.0)));
            hwfc =  -1.0/(1.0/(compArray[0].getDeltaEosParameters()[1]-compArray[0].getDeltaEosParameters()[0]) * Math.log((1.0+compArray[0].getDeltaEosParameters()[1])/(1.0+compArray[0].getDeltaEosParameters()[0])));
            double term=0.0;
            qPure = new double[numbcomp];
            qPuredT = new double[numbcomp];
            qPuredTdT = new double[numbcomp];
            ader = new double[numbcomp];
            adert = new double[numbcomp];
            ad2 = new double[numbcomp][numbcomp];
            qf2 = new double[numbcomp][numbcomp];
            bd2 = new double[numbcomp][numbcomp];
            qft = new double[numbcomp][numbcomp];
            qf1 = new double[numbcomp];
            oneSubAlf= new double[numbcomp];
            abf = new double[numbcomp];
            bc = new double[numbcomp];
            abft2 = new double[numbcomp];
            abft = new double[numbcomp];
            QFTD = new double[numbcomp];
            BDER = new double[numbcomp];
            BDERT = new double[numbcomp];
            // first part
            hex = phase.getHresTP()/phase.getNumberOfMolesInPhase();
            cpex = phase.getCpres()/phase.getNumberOfMolesInPhase();
            
            for(int i=0;i<numbcomp;i++) {
                qPure[i] = compArray[i].getaT()/(compArray[i].getb() * R * temperature);
                qPuredT[i] =  - compArray[i].getaT()/(compArray[i].getb() * R * temperature*temperature) + compArray[i].diffaT(temperature)/(compArray[i].getb() * R * temperature);
                qPuredTdT[i] =  2.0*compArray[i].getaT()/(compArray[i].getb() * R * Math.pow(temperature,3.0)) - compArray[i].getaDiffT()/(compArray[i].getb() * R * Math.pow(temperature,2.0))
                + compArray[i].getaDiffDiffT()/(compArray[i].getb() * R * temperature) -  compArray[i].getaDiffT()/(compArray[i].getb() * R * Math.pow(temperature,2.0));
            }
            
            
            
            double sd2 = (2*hex-cpex*temperature)/Math.pow(temperature,3.0);
            double cnt2 = 0.0;
            for(int i=0;i<numbcomp;i++) cnt2 += phase.getComponents()[i].getNumberOfMolesInPhase()/phase.getNumberOfMolesInPhase()*qPuredTdT[i];
            
            // second part
            alpha_mix = 0.0;
            dadt = 0.0;
            for(int i=0;i<numbcomp;i++) {
                term = qPure[i] + hwfc*Math.log(((ComponentGEInterface)gePhase.getComponents()[i]).getGamma());
                alpha_mix += phase.getComponents()[i].getNumberOfMolesInPhase()/phase.getNumberOfMolesInPhase() * term;
                ader[i] = term;
                compArray[i].setAder(ader[i]);
                
                term = qPuredT[i] + hwfc * ((ComponentGEInterface)gePhase.getComponents()[i]).getlnGammadt();
                dadt += term * phase.getComponents()[i].getNumberOfMolesInPhase()/phase.getNumberOfMolesInPhase();
                adert[i] = term;
                compArray[i].setdAdTdn(adert[i]);
            }
            d2adt2 = cnt2 + hwfc*sd2;
            
            for(int i=0;i<numbcomp;i++) {
                for(int j=0;j<numbcomp;j++) {
                    ad2[i][j] = hwfc*((ComponentGEInterface)gePhase.getComponents()[i]).getlnGammadn(j);
                    compArray[i].setdAdndn(j, ad2[i][j]);
                }
            }
            
            double rhs = 0.0;
            for(int i=0;i<numbcomp;i++) {
                oneSubAlf[i] = 1.0 - qPure[i];
                abf[i] = compArray[i].getb() * oneSubAlf[i];
                abft[i] = -compArray[i].getb()* qPuredT[i];
                abft2[i] = -compArray[i].getb()* qPuredTdT[i];
            }
            
            double dd2 = 0.0;
            for(int i=0;i<numbcomp;i++) {
                double ssi = 0.0;
                for(int j=0;j<numbcomp;j++) {
                    ssi += (1.0-WSintparam[i][j])*(abft2[i]+abft2[j])*phase.getComponents()[j].getNumberOfMolesInPhase()/phase.getNumberOfMolesInPhase();
                }
                dd2 += phase.getComponents()[i].getNumberOfMolesInPhase()/phase.getNumberOfMolesInPhase()*ssi;
            }
            dd2 = 0.5*dd2;
            
            for(int i=0;i<numbcomp;i++) {
                for(int j=i;j<numbcomp;j++) {
                    double ee = 1.0 - WSintparam[i][j];
                    qf2[i][j] = ee*(abf[i]+abf[j]);
                    qf2[j][i] = qf2[i][j];
                    
                    qft[i][j] = ee*(abft[i]+abft[j]);
                    qft[j][i] = qft[i][j];
                }
            }
            Q = 0.0;
            QT = 0.0;
            
            for(int i=0;i<numbcomp;i++) {
                double ss =0.0;
                for(int j=0;j<numbcomp;j++) {
                    ss += qf2[j][i]*phase.getComponents()[j].getNumberOfMolesInPhase()/phase.getNumberOfMolesInPhase();
                }
                qf1[i] = ss;
                Q += phase.getComponents()[i].getNumberOfMolesInPhase()/phase.getNumberOfMolesInPhase()*ss;
                double sst = 0.0;
                for(int j=0;j<numbcomp;j++) {
                    sst += qft[j][i]* phase.getComponents()[j].getNumberOfMolesInPhase()/phase.getNumberOfMolesInPhase();
                }
                QFTD[i] = sst;
                QT +=  phase.getComponents()[i].getNumberOfMolesInPhase()/phase.getNumberOfMolesInPhase()*sst;
            }
            double d_mix = 0.5*Q;
            double d_mixt = 0.5*QT;
            
            double enum = 1.0 - alpha_mix;
            double enumr = 1.0/enum;
            b_mix = d_mix*enumr;
            dbdt = (d_mixt + b_mix*dadt)*enumr;
            
            for(int i=0;i<numbcomp;i++) {
                BDER[i] = (qf1[i] - b_mix*(1.0-ader[i]))*enumr;
                compArray[i].setBder(BDER[i]);
                double ss = QFTD[i] + b_mix*adert[i]+BDER[i]*dadt + dbdt*(ader[i]-1.0);
                BDERT[i] = ss*enumr;
                compArray[i].setdBdndT(BDERT[i]);
            }
            
            double DD2E = dd2 + b_mix*d2adt2 + 2.0*dbdt*dadt;
            d2bdt2 = DD2E/(1.0-alpha_mix);
            
            for(int i=0;i<numbcomp;i++) {
                for(int j=0;j<numbcomp;j++) {
                    bd2[i][j] = (qf2[i][j] + b_mix*ad2[i][j] + BDER[j]*ader[i] + BDER[i]*ader[j])*enumr;
                    compArray[i].setdBdndn(j, ad2[i][j]);
                }
            }
        }
        
        
        public double calcA(PhaseInterface phase, double temperature, double pressure, int numbcomp){
            double A=0;
            //super.calcA(phase, temperature,  pressure, numbcomp);
            this.init(phase, temperature, pressure, numbcomp);
            A = Math.pow(phase.getNumberOfMolesInPhase(),1.0) * calcB(phase, temperature, pressure, numbcomp) * R * temperature * alpha_mix;
            Atot = A;
            return A;
        }
        
        public double calcAi(int compNumb, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            double A=0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            A = getB() * R * temperature * compArray[compNumb].getAder()
            +   Math.pow(phase.getNumberOfMolesInPhase(),1.0) * calcBi(compNumb, phase, temperature, pressure, numbcomp)* R * temperature * alpha_mix;
            
            // System.out.println("Ai: " + A);
            return A;
        }
        
        public double calcAT(PhaseInterface phase, double temperature, double pressure, int numbcomp){
            double A=0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            A = Math.pow(phase.getNumberOfMolesInPhase(),1.0) * getB() * R * temperature * dadt
            +   Math.pow(phase.getNumberOfMolesInPhase(),1.0) * getB() * R * alpha_mix
            +   Math.pow(phase.getNumberOfMolesInPhase(),1.0) * calcBT(phase, temperature, pressure, numbcomp) * R * temperature * alpha_mix;
            
            return A;
        }
        
        public double calcATT(PhaseInterface phase, double temperature, double pressure, int numbcomp){
            double A=0;
            
            A = Math.pow(phase.getNumberOfMolesInPhase(),1.0) * getB() * R * temperature * d2adt2
            + Math.pow(phase.getNumberOfMolesInPhase(),1.0) * getB() * R * dadt
            + Math.pow(phase.getNumberOfMolesInPhase(),1.0) * getB() * R * dadt
            
            + Math.pow(phase.getNumberOfMolesInPhase(),1.0) * calcBTT(phase, temperature, pressure, numbcomp) * R * temperature * alpha_mix
            + Math.pow(phase.getNumberOfMolesInPhase(),1.0) * calcBT(phase, temperature, pressure, numbcomp) * R * alpha_mix
            + Math.pow(phase.getNumberOfMolesInPhase(),1.0) * calcBT(phase, temperature, pressure, numbcomp) * R*temperature*dadt;
            
            return A;
        }
        
        public double calcAiT(int compNumb, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            double A = getB() * R * compArray[compNumb].getAder()
            + getB() * R * temperature * compArray[compNumb].getdAdTdn()
            + Math.pow(phase.getNumberOfMolesInPhase(),1.0) * calcBi(compNumb, phase, temperature, pressure, numbcomp)* R *temperature *  dadt
            + Math.pow(phase.getNumberOfMolesInPhase(),1.0) * calcBi(compNumb, phase, temperature, pressure, numbcomp)* R * alpha_mix
            
            + calcBT(phase, temperature, pressure, numbcomp) * R * temperature * compArray[compNumb].getAder()
            + Math.pow(phase.getNumberOfMolesInPhase(),1.0) * calcBiT(compNumb, phase, temperature, pressure, numbcomp)* R * temperature * alpha_mix;
            
            return A;
        }
        
        public double calcAij(int compNumb, int compNumbj, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            double A=0;
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            A = Math.pow(phase.getNumberOfMolesInPhase(),0.0)*calcBi(compNumbj, phase, temperature, pressure, numbcomp) * R * temperature * compArray[compNumb].getAder()
            +  Math.pow(phase.getNumberOfMolesInPhase(),0.0)*calcB(phase, temperature, pressure, numbcomp) * R * temperature * compArray[compNumb].getdAdndn(compNumbj)
            +  Math.pow(phase.getNumberOfMolesInPhase(),0.0)*calcBi(compNumb, phase, temperature, pressure, numbcomp)* R * temperature * compArray[compNumbj].getAder()
            +  Math.pow(phase.getNumberOfMolesInPhase(),0.0) * calcBij(compNumb, compNumbj, phase, temperature, pressure, numbcomp)* R * temperature * alpha_mix;
            
            return A;
        }
        
        
        public double calcB(PhaseInterface phase, double temperature, double pressure, int numbcomp){
            double B = b_mix*phase.getNumberOfMolesInPhase();
            Btot = B;
            return B;
        }
        
        public double calcBi(int compNumb, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            return compArray[compNumb].getBder();
        }
        
        public double calcBT(PhaseInterface phase, double temperature, double pressure, int numbcomp){
            return dbdt*phase.getNumberOfMolesInPhase();
        }
        
        public double calcBTT(PhaseInterface phase, double temperature, double pressure, int numbcomp){
            return d2bdt2*phase.getNumberOfMolesInPhase();
        }
        
        public double calcBiT(int compNumb, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            double bit =   compArray[compNumb].getdBdndT();
            return bit;
        }
        
        public double calcBij(int compNumb, int compNumbj, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            return compArray[compNumb].getdBdndn(compNumbj);
        }
        
    }
    
    
    public class ElectrolyteMixRule implements ElectrolyteMixingRulesInterface, Cloneable, java.io.Serializable{
        
        public ElectrolyteMixRule(PhaseInterface phase){
            calcWij(phase);
        }
        
        public void calcWij(PhaseInterface phase){
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            int numbcomp = phase.getNumberOfComponents();
            //System.out.println("numb comp " + numbcomp);
            for (int i=0;i<numbcomp;i++){
                if(compArray[i].doElectrolyteInteractionCalc() && compArray[i].getIonicCharge()>0){
                    for (int j=0;j<numbcomp;j++){
                        wij[0][i][j]=0.0;
                        if(compArray[j].getComponentName().equals("water")){
                            wij[0][i][j] = thermo.util.constants.FurstElectrolyteConstants.getFurstParam(2) * compArray[i].getStokesCationicDiameter() + thermo.util.constants.FurstElectrolyteConstants.getFurstParam(3);
                        }
                        if(compArray[j].getIonicCharge()<-0.01){
                            wij[0][i][j] = thermo.util.constants.FurstElectrolyteConstants.getFurstParam(4) * Math.pow(compArray[i].getStokesCationicDiameter()+compArray[j].getPaulingAnionicDiameter(),4.0) + thermo.util.constants.FurstElectrolyteConstants.getFurstParam(5);
                        }
                        if(compArray[j].getComponentName().equals("MDEA")){
                            wij[0][i][j] = thermo.util.constants.FurstElectrolyteConstants.getFurstParam(2) * compArray[i].getStokesCationicDiameter() + thermo.util.constants.FurstElectrolyteConstants.getFurstParam(3);
                            wij[0][i][j] = wij[0][i][j]*5.0;
                        }
                        if(compArray[i].getComponentName().equals("MDEA+")){
                            if(compArray[j].getComponentName().equals("water")){
                            //    wij[0][i][j]=0.0001046762;
                            }
                            if(compArray[j].getComponentName().equals("MDEA")){
                            //    wij[0][i][j]= 0.0001092540;
                            }
                            if(compArray[j].getComponentName().equals("CO2")){
                             //   wij[0][i][j]= 0.0000231069*10;
                            }
                            if(compArray[j].getComponentName().equals("methane") || compArray[j].getComponentName().equals("nitrogen")){
                           //     wij[0][i][j]=  0.0000044284;
                            }
                            if(compArray[j].getComponentName().equals("HCO3-")){
                           //     wij[0][i][j]=-0.0001190554;
                            }
                            else if(compArray[j].getIonicCharge()<-0.01){
                                //  wij[0][i][j]=-0.0001190554;
                            }
                        }
                        wij[0][j][i] = wij[0][i][j];
                    }
                }
            }
            // System.out.println("phase " + phase.getDielectricConstant());
            //Matrix ma = new Matrix(wij[0]).copy();
            //ma.print(10,10);
        }
        
        public void setWijParameter(int i, int j, double value){
            // System.out.println("intparam: " + value);
            wij[0][i][j] = value;
            wij[0][j][i] = value;
        }
        
        public double getWijParameter(int i, int j){
            return wij[0][i][j];
        }
        
        public void setWijT1Parameter(int i, int j, double value){
            wij[1][i][j] = value;
            wij[1][j][i] = value;
        }
        
        public double gettWijT1Parameter(int i, int j){
            return wij[1][i][j];
        }
        
        public void setWijT2Parameter(int i, int j, double value){
            wij[2][i][j] = value;
            wij[2][j][i] = value;
        }
        
        public double gettWijT2Parameter(int i, int j){
            return wij[2][i][j];
        }
        
        public double getWij(int i, int j, double temperature){
            return wij[0][i][j] + wij[1][i][j]*(1.0/temperature - 1.0/298.15) + wij[2][i][j]*((298.15-temperature)/temperature + Math.log(temperature/298.15));
        }
        
        public double getWijT(int i, int j, double temperature){
            return (-wij[1][i][j]/(temperature*temperature)-wij[2][i][j]*(298.15-temperature)/(temperature*temperature));
        }
        
        public double getWijTT(int i, int j, double temperature){
            return (2.0*wij[1][i][j]/(temperature*temperature*temperature)+wij[2][i][j]/(temperature*temperature)+2.0*wij[2][i][j]*(298.15-temperature)/(temperature*temperature*temperature));
        }
        
        public double calcW(PhaseInterface phase, double temperature, double pressure, int numbcomp){
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            double W = 0.0;
            for (int i=0;i<numbcomp;i++){
                for (int j=0;j<numbcomp;j++){
                    W += compArray[i].getNumberOfMolesInPhase() * compArray[j].getNumberOfMolesInPhase() * getWij(i,j,temperature);//wij[0][i][j];
                }
            }
            return -W;
        }
        
        public double calcWi(int compNumb, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            double Wi = 0.0;
            for (int j=0;j<numbcomp;j++){
                Wi +=  compArray[j].getNumberOfMolesInPhase() * getWij(compNumb,j,temperature);
            }
            return -2.0*Wi;
        }
        
        public double calcWiT(int compNumb, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            double WiT = 0;
            for (int j=0;j<numbcomp;j++){
                WiT +=  compArray[j].getNumberOfMolesInPhase() * getWijT(compNumb,j,temperature);
            }
            return -2.0*WiT;
        }
        
        public double calcWT(PhaseInterface phase, double temperature, double pressure, int numbcomp){
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            double WT = 0;
            for (int i=0;i<numbcomp;i++){
                for (int j=0;j<numbcomp;j++){
                    WT += compArray[i].getNumberOfMolesInPhase() * compArray[j].getNumberOfMolesInPhase() * getWijT(i,j,temperature);//wij[0][i][j];
                }
            }
            return -WT;
        }
        
        public double calcWTT(PhaseInterface phase, double temperature, double pressure, int numbcomp){
            ComponentEosInterface[] compArray = (ComponentEosInterface[]) phase.getcomponentArray();
            
            double WTT = 0;
            for (int i=0;i<numbcomp;i++){
                for (int j=0;j<numbcomp;j++){
                    WTT += compArray[i].getNumberOfMolesInPhase() * compArray[j].getNumberOfMolesInPhase() * getWijTT(i,j,temperature);//wij[0][i][j];
                }
            }
            return -WTT;
        }
        
        public double calcWij(int compNumbi, int compNumj, PhaseInterface phase, double temperature, double pressure, int numbcomp){
            return -2.0*getWij(compNumbi,compNumj,temperature);// iwij[0][compNumbi][compNumj];
        }
    }
    
    
    
    
    public EosMixingRulesInterface getMixingRule(int i){
        if(i==1){
            return new ClassicVdW();}
        else if(i==2){
            return new ClassicSRK();}
        else if(i==3){
            return new ClassicVdW();
        }
        else return new ClassicVdW();
    }
    
    
    public EosMixingRulesInterface getMixingRule(int i, PhaseInterface phase){
        this.wij = new double[3][phase.getNumberOfComponents()][phase.getNumberOfComponents()];
        
        if(i==1){
            return new ClassicVdW();
        }
        intparamCPA = new double[phase.getNumberOfComponents()][phase.getNumberOfComponents()];
        intparam = new double[phase.getNumberOfComponents()][phase.getNumberOfComponents()];
        HVDij = new double[phase.getNumberOfComponents()][phase.getNumberOfComponents()];
        HVDijT = new double[phase.getNumberOfComponents()][phase.getNumberOfComponents()];
        NRTLDij = new double[phase.getNumberOfComponents()][phase.getNumberOfComponents()];
        NRTLDijT = new double[phase.getNumberOfComponents()][phase.getNumberOfComponents()];
        WSintparam = new double[phase.getNumberOfComponents()][phase.getNumberOfComponents()];
        HValpha =  new double[phase.getNumberOfComponents()][phase.getNumberOfComponents()];
        NRTLalpha =  new double[phase.getNumberOfComponents()][phase.getNumberOfComponents()];
        classicOrHV = new String[phase.getNumberOfComponents()][phase.getNumberOfComponents()];
        classicOrWS = new String[phase.getNumberOfComponents()][phase.getNumberOfComponents()];
        util.database.NeqSimDataBase database = new util.database.NeqSimDataBase();
        
        for(int k=0; k<phase.getNumberOfComponents(); k++){
            String component_name = phase.getComponents()[k].getComponentName();
            
            for(int l=k; l<phase.getNumberOfComponents(); l++){
                try{
                    if(k==l || (phase.getComponent(k).getIonicCharge()!=0 && phase.getComponent(k).doElectrolyteInteractionCalc())){
                        classicOrHV[k][l] = "Classic";
                        classicOrWS[k][l] = "Classic";
                        classicOrHV[l][k] = classicOrHV[k][l];
                        classicOrWS[l][k] = classicOrWS[k][l];
                    }
                    else{
                        int templ = l, tempk=k;
                        //database = new util.database.NeqSimDataBase();
                        java.sql.ResultSet dataSet =  database.getResultSet("SELECT * FROM INTERTEMP WHERE (comp1='" + component_name + "' AND comp2='"+phase.getComponents()[l].getComponentName() + "') OR (comp1='" + phase.getComponents()[l].getComponentName() + "' AND comp2='"+component_name + "')");
                        dataSet.next();
                        if(dataSet.getString("comp1").trim().equals(phase.getComponents()[l].getComponentName())){
                            templ = k;
                            tempk = l;
                        }
                        
                        classicOrHV[k][l] = dataSet.getString("HVTYPE").trim();
                        classicOrHV[l][k] = classicOrHV[k][l];
                        
                        if(isCalcEOSInteractionParameters()){
                            intparam[k][l] = 1.0-Math.pow((2*Math.sqrt(Math.pow(phase.getComponent(l).getCriticalVolume(),1/3)*Math.pow(phase.getComponent(k).getCriticalVolume(),1/3))/(Math.pow(phase.getComponent(l).getCriticalVolume(),1/3)+Math.pow(phase.getComponent(k).getCriticalVolume(),1/3))),nEOSkij);
                            System.out.println("kij " + intparam[k][l]);
                        }
                        else{
                            intparam[k][l] =  Double.parseDouble(dataSet.getString("kijsrk"));
                        }
                        intparam[l][k] = intparam[k][l];
                        
                        if(phase.getClass().getName().equals("thermo.phase.PhasePrCPA")){
                            intparamCPA[k][l] = Double.parseDouble(dataSet.getString("cpakij-PR")) ;
                        }
                        else {
                            intparamCPA[k][l] = Double.parseDouble(dataSet.getString("cpakij-SRK")) ;
                        }
                        
                        intparamCPA[l][k] = intparamCPA[k][l];
                        
                        HValpha[k][l] = Double.parseDouble(dataSet.getString("HValpha")) ;
                        HValpha[l][k] = HValpha[k][l];
                        HVDij[tempk][templ] = Double.parseDouble(dataSet.getString("HVgij")) ;
                        HVDij[templ][tempk] = Double.parseDouble(dataSet.getString("HVgji")) ;
                        wij[0][k][l] = Double.parseDouble(dataSet.getString("w1"));
                        wij[0][l][k] = wij[0][k][l];
                        wij[1][k][l] = Double.parseDouble(dataSet.getString("w2"));
                        wij[1][l][k] = wij[1][k][l];
                        wij[2][k][l] = Double.parseDouble(dataSet.getString("w3"));
                        wij[2][l][k] = wij[2][k][l];
                        
                        classicOrWS[k][l] = dataSet.getString("WSTYPE").trim();
                        classicOrWS[l][k] = classicOrWS[k][l];
                        
                        WSintparam[k][l] =  Double.parseDouble(dataSet.getString("kijWS")) ;
                        WSintparam[k][l] =  Double.parseDouble(dataSet.getString("KIJWSunifac")) ;
                        WSintparam[l][k] = WSintparam[k][l];
                        
                        NRTLalpha[k][l] = Double.parseDouble(dataSet.getString("NRTLalpha")) ;
                        NRTLalpha[l][k] = NRTLalpha[k][l];
                        
                        
                        NRTLDij[tempk][templ] = Double.parseDouble(dataSet.getString("NRTLgij")) ;
                        NRTLDij[templ][tempk] = Double.parseDouble(dataSet.getString("NRTLgji")) ;
                        
                        HVDijT[tempk][templ] = Double.parseDouble(dataSet.getString("HVgijT")) ;
                        HVDijT[templ][tempk] = Double.parseDouble(dataSet.getString("HVgjiT")) ;
                        
                        NRTLDijT[tempk][templ] = Double.parseDouble(dataSet.getString("WSgijT"));
                        NRTLDijT[templ][tempk] = Double.parseDouble(dataSet.getString("WSgjiT"));
                        dataSet.close();
                        //database.getConnection().close();
                    }
                }
                catch (Exception e) {
                    System.out.println("err in thermo mix.....");
                    String err = e.toString();
                    System.out.println(err);
                    
                    if(isCalcEOSInteractionParameters()){
                        intparam[k][l] = 1.0-Math.pow((2.0*Math.sqrt(Math.pow(phase.getComponent(l).getCriticalVolume(),1.0/3.0)*Math.pow(phase.getComponent(k).getCriticalVolume(),1.0/3.0))/(Math.pow(phase.getComponent(l).getCriticalVolume(),1.0/3.0)+Math.pow(phase.getComponent(k).getCriticalVolume(),1.0/3.0))),nEOSkij);
                        System.out.println("kij" + intparam[k][l]);
                    }
                    else{
                        intparam[k][l] =  0.0;
                    }
                    intparam[l][k] = intparam[k][l];
                    
                    classicOrHV[k][l] = "Classic";
                    classicOrHV[l][k] = classicOrHV[k][l];
                    
                    classicOrWS[k][l] = "Classic";
                    classicOrWS[l][k] = classicOrWS[k][l];
                }
            }
        }
        
        phase.setParams(phase, NRTLalpha, NRTLDij, NRTLDijT, classicOrWS, intparam);
        try{
            database.getConnection().close();
            //System.out.println("test");
        }
        catch(Exception e){
            System.out.println("err closing database IN MIX2");
        }
        if(i==2){
            mixingRuleName = "classic";
            return new ClassicSRK();
        }
        else if(i==3){
            // Classic Huron-Vidal
            mixingRuleName = "Huron-Vidal";
            return new SRKHuronVidal2(phase, HValpha, HVDij, HVDijT, classicOrHV);}
        else if(i==4){
            mixingRuleName = "Huron-Vidal";
            return new SRKHuronVidal2(phase, HValpha, HVDij, HVDijT, classicOrHV);}
        else if(i==5){
            mixingRuleName = "Wong-Sandler";
            return new WongSandlerMixingRule(phase, NRTLalpha, NRTLDij, NRTLDijT, classicOrWS);}
        else if(i==6){
            mixingRuleName = "Wong-Sandler";
            return new WongSandlerMixingRule(phase, NRTLalpha, NRTLDij, NRTLDijT, classicOrWS);}
        else if(i==7){
            intparam = intparamCPA;
            return new ClassicSRK();}
        //  else if(i==10){
        //  return new ElectrolyteMixRule(phase, HValpha, HVgij, HVgii, classicOrHV, wij);}
        
        else return new ClassicVdW();
    }
    
    public EosMixingRulesInterface resetMixingRule(int i, PhaseInterface phase){
        if(i==1){
            mixingRuleName = "no (kij=0)";
            return new ClassicVdW();
        }
        else if(i==2){
            mixingRuleName = "classic";
            return new ClassicSRK();}
        else if(i==3){
            // Classic Huron-Vidal
            mixingRuleName = "Huron-Vidal";
            return new SRKHuronVidal2(phase, HValpha, HVDij, HVDijT, classicOrHV);}
        else if(i==4){
            mixingRuleName = "Huron-Vidal";
            return new SRKHuronVidal2(phase, HValpha, HVDij, HVDijT, classicOrHV);}
        else if(i==5){
            mixingRuleName = "Wong-Sandler";
            return new WongSandlerMixingRule(phase, NRTLalpha, NRTLDij, NRTLDijT, classicOrWS);}
        else if(i==6){
            mixingRuleName = "Wong-Sandler";
            return new WongSandlerMixingRule(phase, NRTLalpha, NRTLDij, NRTLDijT, classicOrWS);}
        else if(i==7){
            mixingRuleName = "classic-CPA";
            intparam = intparamCPA;
            return new ClassicSRK();}
        //  else if(i==10){
        //  return new ElectrolyteMixRule(phase, HValpha, HVgij, HVgii, classicOrHV, wij);}
        
        else return new ClassicVdW();
    }
    
    public ElectrolyteMixingRulesInterface getElectrolyteMixingRule(PhaseInterface phase){
        return new ElectrolyteMixRule(phase);
    }
    
    /** Getter for property CalcEOSInteractionParameters.
     * @return Value of property CalcEOSInteractionParameters.
     */
    public boolean isCalcEOSInteractionParameters() {
        return calcEOSInteractionParameters;
    }
    
    public void setCalcEOSInteractionParameters(boolean CalcEOSInteractionParameters2) {
        calcEOSInteractionParameters = CalcEOSInteractionParameters2;
    }
    
    /** Getter for property mixingRuleName.
     * @return Value of property mixingRuleName.
     */
    public java.lang.String getMixingRuleName() {
        return mixingRuleName;
    }
    
    /** Setter for property mixingRuleName.
     * @param mixingRuleName New value of property mixingRuleName.
     */
    public void setMixingRuleName(java.lang.String mixingRuleName) {
        this.mixingRuleName = mixingRuleName;
    }
    
    public void setMixingRuleGEModel(java.lang.String GEmodel) {
        this.mixingRuleGEModel = GEmodel;
    }
    
}
