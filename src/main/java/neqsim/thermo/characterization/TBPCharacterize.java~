/*
 * TBPCharacterize.java
 *
 * Created on 3. januar 2003, 10:03
 */

package thermo.characterization;
import thermo.system.*;
/**
 *
 * @author  ESOL
 */
public class TBPCharacterize extends Object implements java.io.Serializable{
    
    double TBPfractions[] = null;
    int startPlus = 7, endPlus=20;
    double MPlus=300.0, zPlus=0.3;
    double calcTBPfractions[] = null;
    double TBPdens[] = null;
    double TBP_M[] = null;
    int carbonNumberVector[] = null;
    int length=0;
    int firstPlusFractionNumber = 7;
    double[] coefs = {4.4660105006, -1.1266303727, 8.1927423578, -3.4668277785};
    double[] plusCoefs = { 0.7774204804, -0.5721666929};
    SystemInterface system = null;
    
    /** Creates a new instance of TBPCharacterize */
    public TBPCharacterize() {
    }
    
    public TBPCharacterize(SystemInterface system) {
        this.system = system;
    }
    
    public boolean groupTBPfractions(){
        system.init(0);
        double old=0;
        
        for(int i=0;i<system.getPhase(0).getNumberOfComponents();i++){
            double boilpoint = system.getPhase(0).getComponent(i).getNormalBoilingPoint();
            if(boilpoint>old){
                old = boilpoint;
                if(boilpoint>=331.0) length = 14;
                else if(boilpoint>=317.0) length = 13;
                else if(boilpoint>=303.0) length = 12;
                else if(boilpoint>=287.0) length = 11;
                else if(boilpoint>=271.1) length = 10;
                else if(boilpoint>=253.9) length = 9;
                else if(boilpoint>=235.9) length = 8;
                else if(boilpoint>=216.8) length = 7;
                else if(boilpoint>=196.4) length = 6;
                else if(boilpoint>=174.6) length = 5;
                else if(boilpoint>=151.3) length = 4;
                else if(boilpoint>=126.1) length = 3;
                else if(boilpoint>= 98.9) length = 2;
                else if(boilpoint>= 69.2) length = 1;
                else {}
            }
        }
        System.out.println("length " +length);
        
        double[] TPBfrac = new double[length];
        carbonNumberVector = new int[length];
        
        for(int i=0;i<system.getPhase(0).getNumberOfComponents();i++){
            double boilpoint = system.getPhase(0).getComponent(i).getNormalBoilingPoint();
            
            if(boilpoint>=331.0) TPBfrac[13] += system.getPhase(0).getComponent(i).getz();
            else if(boilpoint>=317.0) TPBfrac[12] += system.getPhase(0).getComponent(i).getz();
            else if(boilpoint>=303.0) TPBfrac[11] += system.getPhase(0).getComponent(i).getz();
            else if(boilpoint>=287.0) TPBfrac[10] += system.getPhase(0).getComponent(i).getz();
            else if(boilpoint>=271.1) TPBfrac[9] += system.getPhase(0).getComponent(i).getz();
            else if(boilpoint>=253.9) TPBfrac[8] += system.getPhase(0).getComponent(i).getz();
            else if(boilpoint>=235.9) TPBfrac[7] += system.getPhase(0).getComponent(i).getz();
            else if(boilpoint>=216.8) TPBfrac[6] += system.getPhase(0).getComponent(i).getz();
            else if(boilpoint>=196.4) TPBfrac[5] += system.getPhase(0).getComponent(i).getz();
            else if(boilpoint>=174.6) TPBfrac[4] += system.getPhase(0).getComponent(i).getz();
            else if(boilpoint>=151.3) TPBfrac[3] += system.getPhase(0).getComponent(i).getz();
            else if(boilpoint>=126.1) TPBfrac[2] += system.getPhase(0).getComponent(i).getz();
            else if(boilpoint>= 98.9) TPBfrac[1] += system.getPhase(0).getComponent(i).getz();
            else if(boilpoint>= 69.2) TPBfrac[0] += system.getPhase(0).getComponent(i).getz();
            else {}
        }
        TBPfractions = TPBfrac;
        
        TPBfrac = new double[length];
        for(int i=0;i<system.getPhase(0).getNumberOfComponents();i++){
            double boilpoint = system.getPhase(0).getComponent(i).getNormalBoilingPoint();
            
            if(boilpoint>=331.0) TPBfrac[13] += system.getPhase(0).getComponent(i).getz();
            else if(boilpoint>=317.0) TPBfrac[12] += system.getPhase(0).getComponent(i).getNormalLiquidDensity();
            else if(boilpoint>=303.0) TPBfrac[11] += system.getPhase(0).getComponent(i).getNormalLiquidDensity();
            else if(boilpoint>=287.0) TPBfrac[10] += system.getPhase(0).getComponent(i).getNormalLiquidDensity();
            else if(boilpoint>=271.1) TPBfrac[9] += system.getPhase(0).getComponent(i).getNormalLiquidDensity();
            else if(boilpoint>=253.9) TPBfrac[8] += system.getPhase(0).getComponent(i).getNormalLiquidDensity();
            else if(boilpoint>=235.9) TPBfrac[7] += system.getPhase(0).getComponent(i).getNormalLiquidDensity();
            else if(boilpoint>=216.8) TPBfrac[6] += system.getPhase(0).getComponent(i).getNormalLiquidDensity();
            else if(boilpoint>=196.4) TPBfrac[5] += system.getPhase(0).getComponent(i).getNormalLiquidDensity();
            else if(boilpoint>=174.6) TPBfrac[4] += system.getPhase(0).getComponent(i).getNormalLiquidDensity();
            else if(boilpoint>=151.3) TPBfrac[3] += system.getPhase(0).getComponent(i).getNormalLiquidDensity();
            else if(boilpoint>=126.1) TPBfrac[2] += system.getPhase(0).getComponent(i).getNormalLiquidDensity();
            else if(boilpoint>= 98.9) TPBfrac[1] += system.getPhase(0).getComponent(i).getNormalLiquidDensity();
            else if(boilpoint>= 69.2) TPBfrac[0] += system.getPhase(0).getComponent(i).getNormalLiquidDensity();
            else {}
        }
        TBPdens = TPBfrac;
        
        TBP_M = new double[length];
        for(int i=0;i<length;i++){
            carbonNumberVector[i] = i+firstPlusFractionNumber;
            TBP_M[i] = 14.0*(i+1.0)-4.0;
        }
        
        if(length>1) return true;
        else return false;
    }
    
    /** Getter for property TBPfractions.
     * @return Value of property TBPfractions.
     */
    public double[] getTBPfractions() {
        return this.TBPfractions;
    }
    
    public double getTBPfractions(int i) {
        return this.TBPfractions[i];
    }
    /** Setter for property TBPfractions.
     * @param TBPfractions New value of property TBPfractions.
     */
    public void setTBPfractions(double[] TBPfractions) {
        this.TBPfractions = TBPfractions;
    }
    
    public void solveABCD(){
        NewtonSolveABCD solver = new NewtonSolveABCD(system, this);
        solver.solve();
    }
    
    public void solveAB(){
        NewtonSolveAB solver = new NewtonSolveAB(system, this);
        solver.solve();
    }
    
    /** Getter for property coefs.
     * @return Value of property coefs.
     */
    public double[] getCoefs(){
        return this.coefs;
    }
    
    public double getCoef(int i){
        return this.coefs[i];
    }
    /** Setter for property coefs.
     * @param coefs New value of property coefs.
     */
    public void setCoefs(double[] coefs) {
        this.coefs = coefs;
    }
    
    /** Getter for property TBPdens.
     * @return Value of property TBPdens.
     */
    public double[] getTBPdens() {
        return this.TBPdens;
    }
    
    public double getTBPdens(int i) {
        return this.TBPdens[i];
    }
    /** Setter for property TBPdens.
     * @param TBPdens New value of property TBPdens.
     */
    public void setTBPdens(double[] TBPdens) {
        this.TBPdens = TBPdens;
    }
    
    /** Getter for property length.
     * @return Value of property length.
     */
    public int getLength() {
        return length;
    }
    
    /** Getter for property TBP_M.
     * @return Value of property TBP_M.
     */
    public double[] getTBP_M() {
        return this.TBP_M;
    }
    
    /** Setter for property TBP_M.
     * @param TBP_M New value of property TBP_M.
     */
    public void setTBP_M(double[] TBP_M) {
        this.TBP_M = TBP_M;
    }
    
    public void generatePlusFractions(int start, int end, double zplus, double Mplus){
        endPlus = end;
        startPlus = start;
        this.zPlus = zplus;
        this.MPlus = Mplus;
        plusCoefs[0] = Math.log(zplus)/(start*0.5);
        plusCoefs[1] = plusCoefs[0];
        solveAB();
        System.out.println("ok generating plusfraction");
        
    }
    
    public void generateTBPFractions(int start, int end){
        calcTBPfractions = new double[end-start];
        double ztot =0;
        
        for(int i=0;i<(end-start);i++){
            calcTBPfractions[i] = Math.exp(getCoef(0)+getCoef(1)*(start+i));
            ztot += Math.exp(getCoef(0)+getCoef(1)*(start+i));
        }
        System.out.println("ztot " + ztot + " tot " + (end-start));
        if(start<7 && end>=7) system.addComponent("n-heptane",(Math.exp(getCoef(0)+getCoef(1)*7))*1.0/(1.0-ztot)*system.getNumberOfMoles());
        if(start<8 && end>=8) system.addComponent("n-octane",(Math.exp(getCoef(0)+getCoef(1)*8))*1.0/(1.0-ztot)*system.getNumberOfMoles());
        if(start<9 && end>=9) system.addComponent("n-nonane",(Math.exp(getCoef(0)+getCoef(1)*9))*1.0/(1.0-ztot)*system.getNumberOfMoles());
        if(start<10 && end>=10) system.addComponent("nC10",(Math.exp(getCoef(0)+getCoef(1)*10))*1.0/(1.0-ztot)*system.getNumberOfMoles());
        if(start<11 && end>=11) system.addComponent("nC11",(Math.exp(getCoef(0)+getCoef(1)*11))*1.0/(1.0-ztot)*system.getNumberOfMoles());
        if(start<12 && end>=12) system.addComponent("nC12",(Math.exp(getCoef(0)+getCoef(1)*12))*1.0/(1.0-ztot)*system.getNumberOfMoles());
        if(start<13 && end>=13) system.addComponent("nC13",(Math.exp(getCoef(0)+getCoef(1)*13))*1.0/(1.0-ztot)*system.getNumberOfMoles());
        if(start<14 && end>=14) system.addComponent("nC14",(Math.exp(getCoef(0)+getCoef(1)*14))*1.0/(1.0-ztot)*system.getNumberOfMoles());
        if(start<15 && end>=15) system.addComponent("nC15",(Math.exp(getCoef(0)+getCoef(1)*15))*1.0/(1.0-ztot)*system.getNumberOfMoles());
        if(start<16 && end>=16) system.addComponent("nC16",(Math.exp(getCoef(0)+getCoef(1)*16))*1.0/(1.0-ztot)*system.getNumberOfMoles());
        if(start<17 && end>=17) system.addComponent("nC17",(Math.exp(getCoef(0)+getCoef(1)*17))*1.0/(1.0-ztot)*system.getNumberOfMoles());
        if(start<18 && end>=18) system.addComponent("nC18",(Math.exp(getCoef(0)+getCoef(1)*18))*1.0/(1.0-ztot)*system.getNumberOfMoles());
        if(start<19 && end>=19) system.addComponent("nC19",(Math.exp(getCoef(0)+getCoef(1)*19))*1.0/(1.0-ztot)*system.getNumberOfMoles());
        if(start<20 && end>=20) system.addComponent("nC20",(Math.exp(getCoef(0)+getCoef(1)*20))*1.0/(1.0-ztot)*system.getNumberOfMoles());
        if(start<21 && end>=21) system.addComponent("nC21",(Math.exp(getCoef(0)+getCoef(1)*21))*1.0/(1.0-ztot)*system.getNumberOfMoles());
        if(start<22 && end>=22) system.addComponent("nC22",(Math.exp(getCoef(0)+getCoef(1)*22))*1.0/(1.0-ztot)*system.getNumberOfMoles());
    }
    
    public void removeTBPfraction(){
        java.util.ArrayList list = new java.util.ArrayList();
        for(int i=0;i<system.getPhase(0).getNumberOfComponents();i++){
            double boilpoint = system.getPhase(0).getComponent(i).getNormalBoilingPoint();
            if(boilpoint>= 69.2){
                list.add(system.getPhase(0).getComponent(i).getName());
            }
        }
        
        for(int i=0;i<list.size();i++){
            try{
                system.removeComponent((String) list.get(i));
                System.out.println("removing " + (String) list.get(i));
            }
            catch(Exception e){
                System.out.println("not able to remove " + (String) list.get(i));
                //return;
            }
        }
        return;
    }
    
    public void addPseudoTBPfraction(int start, int end){
        calcTBPfractions = new double[end-start];
        double ztot =0;
        
        for(int i=0;i<(end-start);i++){
            calcTBPfractions[i] = Math.exp(getCoef(0)+getCoef(1)*(start+i));
            ztot += Math.exp(getCoef(0)+getCoef(1)*(start+i));
        }
        System.out.println("ztot " + ztot + " tot " + (end-start));
        for(int i=start;i<=end;i++){
            double TC=109, PC=80, acs=0.12;
            system.addComponent("C"+Integer.toString(i),(Math.exp(getCoef(0)+getCoef(1)*i))*1.0/(1.0-ztot)*system.getNumberOfMoles(), TC, PC, acs);
        }
    }
    
    
    /** Getter for property carbonNumberVector.
     * @return Value of property carbonNumberVector.
     */
    public int[] getCarbonNumberVector() {
        return this.carbonNumberVector;
    }
    
    /** Setter for property carbonNumberVector.
     * @param carbonNumberVector New value of property carbonNumberVector.
     */
    public void setCarbonNumberVector(int[] carbonNumberVector) {
        this.carbonNumberVector = carbonNumberVector;
    }
    
    /** Getter for property calcTBPfractions.
     * @return Value of property calcTBPfractions.
     */
    public double[] getCalcTBPfractions() {
        return this.calcTBPfractions;
    }
    
    /** Setter for property calcTBPfractions.
     * @param calcTBPfractions New value of property calcTBPfractions.
     */
    public void setCalcTBPfractions(double[] calcTBPfractions) {
        this.calcTBPfractions = calcTBPfractions;
    }
    
    
    /** Getter for property firstPlusFractionNumber.
     * @return Value of property firstPlusFractionNumber.
     */
    public int getFirstPlusFractionNumber() {
        return firstPlusFractionNumber;
    }
    
    /** Setter for property firstPlusFractionNumber.
     * @param firstPlusFractionNumber New value of property firstPlusFractionNumber.
     */
    public void setFirstPlusFractionNumber(int firstPlusFractionNumber) {
        this.firstPlusFractionNumber = firstPlusFractionNumber;
    }
    
    /** Getter for property startPlus.
     * @return Value of property startPlus.
     */
    public int getStartPlus() {
        return startPlus;
    }
    
    /** Setter for property startPlus.
     * @param startPlus New value of property startPlus.
     */
    public void setStartPlus(int startPlus) {
        this.startPlus = startPlus;
    }
    
    /** Getter for property MPlus.
     * @return Value of property MPlus.
     */
    public double getMPlus() {
        return MPlus;
    }
    
    /** Setter for property MPlus.
     * @param MPlus New value of property MPlus.
     */
    public void setMPlus(double MPlus) {
        this.MPlus = MPlus;
    }
    
    /** Getter for property zPlus.
     * @return Value of property zPlus.
     */
    public double getZPlus() {
        return zPlus;
    }
    
    /** Setter for property zPlus.
     * @param zPlus New value of property zPlus.
     */
    public void setZPlus(double zPlus) {
        this.zPlus = zPlus;
    }
    
    /** Getter for property plusCoefs.
     * @return Value of property plusCoefs.
     */
    public double[] getPlusCoefs() {
        return this.plusCoefs;
    }
    
    public double getPlusCoefs(int i){
        return this.plusCoefs[i];
    }
    /** Setter for property plusCoefs.
     * @param plusCoefs New value of property plusCoefs.
     */
    public void setPlusCoefs(double[] plusCoefs) {
        this.plusCoefs = plusCoefs;
    }
    
    /** Getter for property endPlus.
     * @return Value of property endPlus.
     */
    public int getEndPlus() {
        return endPlus;
    }
    
    /** Setter for property endPlus.
     * @param endPlus New value of property endPlus.
     */
    public void setEndPlus(int endPlus) {
        this.endPlus = endPlus;
    }
    
}
