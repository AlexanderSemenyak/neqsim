/*
 * TPflash.java
 *
 * Created on 2. oktober 2000, 22:26
 */

package thermodynamicOperations.flashOps;


import thermo.system.*;
import javax.swing.*;
import javax.swing.event.*;
import java.awt.*;
import java.io.*;
/**
 *
 * @author  Even Solbraa
 * @version
 */
public class TPflash extends Flash implements java.io.Serializable {
    
    
    //   SystemInterface clonedSystem;
    
    /** Creates new TPflash */
    public TPflash() {
    }
    
    public TPflash(SystemInterface system) {
        this.system = system;
        lnOldOldOldK = new double[system.getPhases()[0].getNumberOfComponents()];
        lnOldOldK = new double[system.getPhases()[0].getNumberOfComponents()];
        lnOldK = new double[system.getPhases()[0].getNumberOfComponents()];
        lnK = new double[system.getPhases()[0].getNumberOfComponents()];
        oldoldDeltalnK = new double[system.getPhases()[0].getNumberOfComponents()];
        oldDeltalnK = new double[system.getPhases()[0].getNumberOfComponents()];
        deltalnK = new double[system.getPhases()[0].getNumberOfComponents()];
    }
    
    public TPflash(SystemInterface system, boolean solCheck) {
        this(system);
        solidCheck = solCheck;
    }
    
    
    
    public void sucsSubs(){
        deviation = 0;
        
        for (i=0;i<system.getPhases()[0].getNumberOfComponents();i++){
            if(system.getPhases()[0].getComponents()[i].getIonicCharge()!=0){
                Kold = system.getPhases()[0].getComponents()[i].getK();
                system.getPhases()[0].getComponents()[i].setK(1.0e-40);
                system.getPhases()[1].getComponents()[i].setK(system.getPhases()[0].getComponents()[i].getK());
            }
            else{
                Kold = system.getPhases()[0].getComponents()[i].getK();
                system.getPhases()[0].getComponents()[i].setK(Math.exp(Math.log(system.getPhases()[1].getComponents()[i].getFugasityCoeffisient()) - Math.log(system.getPhases()[0].getComponents()[i].getFugasityCoeffisient()))*system.getPhase(1).getPressure()/system.getPhase(0).getPressure());
                system.getPhases()[1].getComponents()[i].setK(system.getPhases()[0].getComponents()[i].getK());
                deviation = deviation + Math.abs(Math.log(system.getPhases()[0].getComponents()[i].getK()) - Math.log(Kold));
            }
        }
        
        try{
            system.calcBeta();
        }
        catch(Exception e){
            e.printStackTrace(System.err);
            System.out.println("error in beta calc" + e.toString());
        }
        if((system.getBeta()>1.0-1e-9 || system.getBeta()<1e-9)) return;//stabilityCheck();
        system.calc_x_y();
        system.init(1);
        if(iterations == maxNumberOfIterations){System.out.println("for mange iterasjoner i TPflash....");}
        
        return;
    }
    
    
    
    
    public void accselerateSucsSubs(){
        double vec1=0, vec2=0;
        
        for (i=0;i<system.getPhases()[0].getNumberOfComponents();i++){
            vec1 = vec1 +  oldDeltalnK[i]*oldoldDeltalnK[i];
            vec2 = vec2 + Math.pow(oldoldDeltalnK[i],2);
        }
        
        double lambda = vec1/vec2;
        
        for (i=0;i<system.getPhases()[0].getNumberOfComponents();i++){
            lnK[i] = lnK[i] - lambda*lambda*oldoldDeltalnK[i]/(1-lambda);
            system.getPhases()[0].getComponents()[i].setK(Math.exp(lnK[i]));
            system.getPhases()[1].getComponents()[i].setK(Math.exp(lnK[i]));
        }
        try{
            system.calcBeta();
        }
        catch(Exception e){
            e.printStackTrace(System.err);
        }
        system.calc_x_y();
        system.init(1);
    }
    
    public void setNewK(){
        for (i=0;i<system.getPhases()[0].getNumberOfComponents();i++){
            lnOldOldOldK[i] = lnOldOldK[i];
            lnOldOldK[i] = lnOldK[i];
            lnOldK[i] =  lnK[i];
            lnK[i] =  Math.log(system.getPhases()[1].getComponents()[i].getFugasityCoeffisient()) - Math.log(system.getPhases()[0].getComponents()[i].getFugasityCoeffisient());
            
            
            oldoldDeltalnK[i] =  lnOldOldK[i] - lnOldOldOldK[i];
            oldDeltalnK[i] = lnOldK[i] - lnOldOldK[i];
            deltalnK[i] = lnK[i] - lnOldK[i];
        }
    }
    
    
    public void resetK(){
        for (i=0;i<system.getPhases()[0].getNumberOfComponents();i++){
            lnK[i] = lnOldK[i];
            system.getPhases()[0].getComponents()[i].setK(Math.exp(lnK[i]));
            system.getPhases()[1].getComponents()[i].setK(Math.exp(lnK[i]));
        }
        try{
            system.calcBeta();
        }
        catch(Exception e){
            e.printStackTrace(System.err);
        }
        system.calc_x_y();
        system.init(1);
    }
    
    
    public void run(){
        system.init(0);
        system.setNumberOfPhases(2);
        system.setPhaseType(0,1);
        system.setPhaseType(1,0);
        
        for (i=0;i<system.getPhases()[0].getNumberOfComponents();i++){
            system.getPhases()[0].getComponents()[i].setK(system.getPhases()[0].getComponents()[i].getK()*system.getPhase(1).getPressure()/system.getPhase(0).getPressure());
            system.getPhases()[1].getComponents()[i].setK(system.getPhases()[0].getComponents()[i].getK());
        }
        
        if(system.isChemicalSystem()){
            //system.getChemicalReactionOperations().solveChemEq(0);
            //   system.getChemicalReactionOperations().solveChemEq(1);
        }
        try{
            system.calcBeta();
        }
        catch(Exception e){
            e.printStackTrace(System.err);
        }
        
        if(system.getBeta()<1e-9){
            double err=0.0;
            double temp=0.0;
            int it=0;
            
            do{
                it++;
                temp = 0.0; err=0.0;
                for(int i=0;i<system.getPhases()[0].getNumberOfComponents();i++){
                    temp += system.getPhases()[0].getComponents()[i].getz()*system.getPhases()[0].getComponents()[i].getK();
                }
                for(int i=0;i<system.getPhases()[0].getNumberOfComponents();i++){
                    double old = system.getPhases()[0].getComponents()[i].getx();
                    system.getPhases()[1].getComponents()[i].setx(system.getPhases()[1].getComponents()[i].getz());
                    system.getPhases()[0].getComponents()[i].setx(system.getPhases()[0].getComponents()[i].getz()*system.getPhases()[0].getComponents()[i].getK()/temp);
                    err += system.getPhases()[0].getComponents()[i].getx() - old;
                }
                system.init(1);
                for(int i=0;i<system.getPhases()[0].getNumberOfComponents();i++){
                    system.getPhases()[0].getComponents()[i].setK(Math.exp(Math.log(system.getPhases()[1].getComponents()[i].getFugasityCoeffisient()) - Math.log(system.getPhases()[0].getComponents()[i].getFugasityCoeffisient()))*system.getPhase(1).getPressure()/system.getPhase(0).getPressure());
                    system.getPhases()[1].getComponents()[i].setK(system.getPhases()[0].getComponents()[i].getK());
                }
                
                try{
                    system.calcBeta();
                }
                catch(Exception e){
                    e.printStackTrace(System.err);
                }
            }
            while(Math.abs(err)>1e-9 && it<100);
        }
        
        int totiter=0;
        double tpdx = 1;
        double tpdy = 1;
        double dgonRT=1;
        
        if((system.getBeta()<1.0-1e-9 && system.getBeta()>1e-9)){
            lowestGibbsEnergyPhase = findLowestGibbsEnergyPhase();
            
            system.calc_x_y();
            system.init(1);
            for(int k=0;k<3;k++){
                sucsSubs();
                setNewK();
            }
            if((system.getBeta()>1.0-1e-9 || system.getBeta()<1e-9)){
                tpdx=1.0;tpdy=1.0;dgonRT=1.0;
            }
            else
                if(system.getGibbsEnergy()<minimumGibbsEnergySystem.getPhase(lowestGibbsEnergyPhase).getGibbsEnergy()){
                    tpdx=-1.0;tpdy=-1.0;dgonRT=-1.0;
                }
                else{
                    for(i=0;i<system.getPhases()[0].getNumberOfComponents();i++){
                        tpdy += system.getPhases()[0].getComponents()[i].getx()*(Math.log(system.getPhases()[0].getComponents()[i].getFugasityCoeffisient())+Math.log(system.getPhases()[0].getComponents()[i].getx())-Math.log(minimumGibbsEnergySystem.getPhases()[lowestGibbsEnergyPhase].getComponents()[i].getz())-Math.log(minimumGibbsEnergySystem.getPhases()[lowestGibbsEnergyPhase].getComponents()[i].getFugasityCoeffisient()));
                        tpdx += system.getPhases()[1].getComponents()[i].getx()*(Math.log(system.getPhases()[1].getComponents()[i].getFugasityCoeffisient())+Math.log(system.getPhases()[1].getComponents()[i].getx())-Math.log(minimumGibbsEnergySystem.getPhases()[lowestGibbsEnergyPhase].getComponents()[i].getz())-Math.log(minimumGibbsEnergySystem.getPhases()[lowestGibbsEnergyPhase].getComponents()[i].getFugasityCoeffisient()));
                    }
                    
                    dgonRT = system.getPhases()[0].getBeta()*tpdy + (1.0-system.getPhases()[0].getBeta())*tpdx;
                    
                    if(dgonRT>0){
                        if(tpdx<0){
                            for(i=0;i<system.getPhases()[0].getNumberOfComponents();i++){
                                system.getPhases()[0].getComponents()[i].setK(Math.exp(Math.log(system.getPhases()[1].getComponents()[i].getFugasityCoeffisient()) - Math.log(minimumGibbsEnergySystem.getPhases()[lowestGibbsEnergyPhase].getComponents()[i].getFugasityCoeffisient())));
                                system.getPhases()[1].getComponents()[i].setK(system.getPhases()[0].getComponents()[i].getK());
                            }
                        }
                        else if(tpdy<0){
                            for(i=0;i<system.getPhases()[0].getNumberOfComponents();i++){
                                system.getPhases()[0].getComponents()[i].setK(Math.exp(Math.log(minimumGibbsEnergySystem.getPhases()[lowestGibbsEnergyPhase].getComponents()[i].getFugasityCoeffisient())-Math.log(system.getPhases()[0].getComponents()[i].getFugasityCoeffisient()))*system.getPhase(1).getPressure()/system.getPhase(0).getPressure());
                                system.getPhases()[1].getComponents()[i].setK(system.getPhases()[0].getComponents()[i].getK());
                            }
                        }
                    }
                }
        }
        
        //        double gasgib = system.getGibbsEnergy();
        //        system.setPhaseType(0,0);
        //        system.init(1);
        //        double liqgib = system.getGibbsEnergy();
        //        if(liqgib>gasgib) system.setPhaseType(0,1);
        
        if((dgonRT>0 && tpdx>0 && tpdy>0) || (system.getBeta()>1.0-1e-9 || system.getBeta()<1e-9 || Double.isNaN(system.getBeta()))){
            if(system.checkStability()){
                if(stabilityCheck()){
                    return;
                }
            }
        }
        
        if(!system.doSolidPhaseCheck()){
            double gasgib = system.getGibbsEnergy();
            system.setPhaseType(0,0);
            system.init(1);
            double liqgib = system.getGibbsEnergy();
            if(liqgib>(gasgib-gasgib/1.0e5)) system.setPhaseType(0,1);
        }
        
        system.calc_x_y();
        system.init(1);
        gibbsEnergyOld = gibbsEnergy;
        gibbsEnergy=system.getGibbsEnergy();
        
        double chemdev=0;
        
        do{
            iterations=0;
            do{
                iterations++;
                if(iterations<55){
                    sucsSubs();
                }
                else if (iterations==55 && Math.abs(system.getPhase(0).getPressure()-system.getPhase(1).getPressure())<1e-5){
                    System.out.println("seccond order");
                    secondOrderSolver = new sysNewtonRhapsonTPflash(system, 2, system.getPhases()[0].getNumberOfComponents());
                    deviation = secondOrderSolver.solve();
                }
                else{
                    sucsSubs();
                    //deviation = secondOrderSolver.solve();
                }
                
                setNewK();
                
                if((iterations%7)==0){
                    accselerateSucsSubs();
                    deviation = 1.0;
                }
                
                gibbsEnergyOld = gibbsEnergy;
                gibbsEnergy=system.getGibbsEnergy();
                
                if((gibbsEnergy-gibbsEnergyOld)>1e-6){
                    // resetK();
                }
                
                //System.out.println("deviation: " + deviation);
            }
            while ((deviation>1e-10) && (iterations < maxNumberOfIterations));
            
            if(system.isChemicalSystem()){
                for(int phase=1;phase<system.getNumberOfPhases();phase++){
                    chemdev=0.0;
                    double xchem[] = new double[system.getPhases()[phase].getNumberOfComponents()];
                    
                    for (i=0;i<system.getPhases()[phase].getNumberOfComponents();i++){
                        xchem[i] = system.getPhases()[phase].getComponents()[i].getx();
                    }
                    
                    system.init(1);
                    system.getChemicalReactionOperations().solveChemEq(phase);
                    
                    for (i=0;i<system.getPhases()[phase].getNumberOfComponents();i++){
                        chemdev += Math.abs(xchem[i]-system.getPhases()[phase].getComponents()[i].getx());
                    }
                    //System.out.println("chemdev: " + chemdev + "  iter: " + totiter);
                }
            }
            totiter++;
        }
        while((Math.abs(chemdev)>1e-10  && totiter<100) || totiter<3);
        
        // System.out.println("iterations : " + iterations);
        // System.out.println("clonedSystem G : " +clonedSystem.calcGibbsEnergy());
        // System.out.println("system G : " + system.calcGibbsEnergy());
        
        system.init(1);
        if(system.doMultiPhaseCheck()){
            TPmultiflash operation = new TPmultiflash(system, true);
            operation.run();
        }
        if(system.doSolidPhaseCheck()){
            this.solidPhaseFlash();
        }
        return;
    }
    
    
    
    
    
}
