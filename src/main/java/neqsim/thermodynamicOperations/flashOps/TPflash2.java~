/*
 * TPflash.java
 *
 * Created on 2. oktober 2000, 22:26
 */

package thermodynamicOperations.flashOps;


import thermo.system.*;
import javax.swing.*;
import javax.swing.event.*;
import java.awt.*;
import java.io.*;
/**
 *
 * @author  Even Solbraa
 * @version
 */
public class TPflash2 extends Flash implements java.io.Serializable {
    
    //   SystemInterface clonedSystem;
    
    /** Creates new TPflash */
    public TPflash2() {
    }
    
    public TPflash2(SystemInterface system) {
        this.system = system;
        lnOldOldOldK = new double[system.getPhases()[0].getNumberOfComponents()];
        lnOldOldK = new double[system.getPhases()[0].getNumberOfComponents()];
        lnOldK = new double[system.getPhases()[0].getNumberOfComponents()];
        lnK = new double[system.getPhases()[0].getNumberOfComponents()];
        oldoldDeltalnK = new double[system.getPhases()[0].getNumberOfComponents()];
        oldDeltalnK = new double[system.getPhases()[0].getNumberOfComponents()];
        deltalnK = new double[system.getPhases()[0].getNumberOfComponents()];
    }
    
    
    
    public void sucsSubs(){
        
        deviation = 0;
        
        for (i=0;i<system.getPhases()[0].getNumberOfComponents();i++){
            Kold = system.getPhases()[0].getComponents()[i].getK();
            system.getPhases()[0].getComponents()[i].setK(Math.exp(Math.log(system.getPhases()[0].getComponents()[i].getFugasityCoeffisient()) - Math.log(system.getPhases()[1].getComponents()[i].getFugasityCoeffisient())));
            system.getPhases()[1].getComponents()[i].setK(system.getPhases()[0].getComponents()[i].getK());
            deviation = deviation + Math.abs(Math.log(system.getPhases()[0].getComponents()[i].getK()) - Math.log(Kold));
        }
        
        system.calcBeta();
        system.calc_x_y();
        system.init(1);
        if(iterations == maxNumberOfIterations){System.out.println("for mange iterasjoner i TPflash....");}
        
        return;
    }
    
    
    public void accselerateSucsSubs(){
        double vec1=0, vec2=0;
        
        for (i=0;i<system.getPhases()[0].getNumberOfComponents();i++){
            vec1 = vec1 +  oldDeltalnK[i]*oldoldDeltalnK[i];
            vec2 = vec2 + Math.pow(oldoldDeltalnK[i],2);
        }
        
        double lambda = vec1/vec2;
        
        for (i=0;i<system.getPhases()[0].getNumberOfComponents();i++){
            lnK[i] = lnK[i] - lambda*lambda*oldoldDeltalnK[i]/(1-lambda);
            system.getPhases()[0].getComponents()[i].setK(Math.exp(lnK[i]));
        }
        system.calcBeta();
        system.calc_x_y();
        system.init(1);
    }
    
    public void setNewK(){
        for (i=0;i<system.getPhases()[0].getNumberOfComponents();i++){
            lnOldOldOldK[i] = lnOldOldK[i];
            lnOldOldK[i] = lnOldK[i];
            lnOldK[i] =  lnK[i];
            lnK[i] =  Math.log(system.getPhases()[0].getComponents()[i].getFugasityCoeffisient()) - Math.log(system.getPhases()[1].getComponents()[i].getFugasityCoeffisient());
            
            oldoldDeltalnK[i] =  lnOldOldK[i] - lnOldOldOldK[i];
            oldDeltalnK[i] = lnOldK[i] - lnOldOldK[i];
            deltalnK[i] = lnK[i] - lnOldK[i];
        }
    }
    
    
    public void resetK(){
        for (i=0;i<system.getPhases()[0].getNumberOfComponents();i++){
            lnK[i] = lnOldK[i];
            system.getPhases()[0].getComponents()[i].setK(Math.exp(lnK[i]));
            system.getPhases()[1].getComponents()[i].setK(Math.exp(lnK[i]));
        }
        system.calcBeta();
        system.calc_x_y();
        system.init(1);
    }
    
    
    public void run(){
        system.setNumberOfPhases(2);
        system.setPhaseType(0,0);
        system.setPhaseType(1,1);
        
        if(system.isChemicalSystem()){
            system.getChemicalReactionOperations().solveChemEq();
        }
        
        system.init(0);
        system.init(1);
        system.calcBeta();
        
        double tpdx = 1;
        double tpdy = 1;
        double dgonRT=1;
        
        if(system.getBeta()<1 && system.getBeta()>0){
            
            SystemInterface minimumGibbsEnergySystem = (SystemInterface) system.clone();
            minimumGibbsEnergySystem.init(0);
            minimumGibbsEnergySystem.init(1);
            
            if(minimumGibbsEnergySystem.getPhases()[0].getGibbsEnergy() < minimumGibbsEnergySystem.getPhases()[1].getGibbsEnergy()){
                lowestGibbsEnergyPhase = 0;
            }
            else{
                lowestGibbsEnergyPhase=1;
            }
            system.calc_x_y();
            
            for(int k=0;k<3;k++){
                sucsSubs();
            }
            
            for(i=0;i<system.getPhases()[0].getNumberOfComponents();i++){
                tpdy += system.getPhases()[1].getComponents()[i].getx()*(Math.log(system.getPhases()[1].getComponents()[i].getFugasityCoeffisient())+Math.log(system.getPhases()[1].getComponents()[i].getx())-Math.log(minimumGibbsEnergySystem.getPhases()[lowestGibbsEnergyPhase].getComponents()[i].getz())-Math.log(minimumGibbsEnergySystem.getPhases()[lowestGibbsEnergyPhase].getComponents()[i].getFugasityCoeffisient()));
                tpdx += system.getPhases()[0].getComponents()[i].getx()*(Math.log(system.getPhases()[0].getComponents()[i].getFugasityCoeffisient())+Math.log(system.getPhases()[1].getComponents()[i].getx())-Math.log(minimumGibbsEnergySystem.getPhases()[lowestGibbsEnergyPhase].getComponents()[i].getz())-Math.log(minimumGibbsEnergySystem.getPhases()[lowestGibbsEnergyPhase].getComponents()[i].getFugasityCoeffisient()));
            }
            
            dgonRT = system.getPhases()[0].getBeta()*tpdx + system.getPhases()[1].getBeta()*tpdy;
            
            if(dgonRT>0){
                if(tpdx<0){
                    for(i=0;i<system.getPhases()[0].getNumberOfComponents();i++){
                        system.getPhases()[0].getComponents()[i].setK(Math.exp(Math.log(system.getPhases()[0].getComponents()[i].getFugasityCoeffisient()) - Math.log(minimumGibbsEnergySystem.getPhases()[lowestGibbsEnergyPhase].getComponents()[i].getFugasityCoeffisient())));
                        system.getPhases()[1].getComponents()[i].setK(system.getPhases()[0].getComponents()[i].getK());
                    }
                    
                }
                else if(tpdy<0){
                    system.getPhases()[0].getComponents()[i].setK(Math.log(minimumGibbsEnergySystem.getPhases()[lowestGibbsEnergyPhase].getComponents()[i].getFugasityCoeffisient())-Math.exp(Math.log(system.getPhases()[1].getComponents()[i].getFugasityCoeffisient())));
                    system.getPhases()[1].getComponents()[i].setK(system.getPhases()[0].getComponents()[i].getK());
                }
            }
        }
        
        if(dgonRT>0 && tpdx>0 && tpdy>0 && (system.getBeta()>1 || system.getBeta()<0)){
            System.out.println("starting stability analysis....");
            stabilityAnalysis();
            if(!(tm[0]<-1e-8) && !(tm[1]<-1e-8)){
                system.init(0);
                System.out.println("system is stable");
                System.out.println("Stable phase is : " + lowestGibbsEnergyPhase);
                system.setNumberOfPhases(1);
                system.setPhaseType(0,lowestGibbsEnergyPhase);
                system.init(1);
                return;
            }
        }
        
        gibbsEnergyOld = gibbsEnergy;
        gibbsEnergy=system.getGibbsEnergy();
        
        double chemdev=0;
        
        do{
            iterations=0;
            do{
                iterations++;
                gibbsEnergyOld = gibbsEnergy;
                
                if(iterations<115){
                    sucsSubs();
                }
                else if (iterations==115)
                {
                    secondOrderSolver = new sysNewtonRhapsonTPflash(system, 2, system.getPhases()[0].getNumberOfComponents());
                    deviation = secondOrderSolver.solve();
                }
                else{
                    deviation = secondOrderSolver.solve();
                }
                
                setNewK();
                
                if((iterations%5)==0){
                    //    accselerateSucsSubs();
                    deviation = 1.0;
                }
                
                gibbsEnergy=system.getGibbsEnergy();
                
                //  System.out.println("dG o : " + (gibbsEnergy-gibbsEnergyOld));
                //    System.out.println("S : " + system.getEntropy());
                //      System.out.println("G : " + gibbsEnergy);
                
                
                if((gibbsEnergy-gibbsEnergyOld)>1e-10){
                    resetK();
                }
                
                //  System.out.println("deviation: " + deviation);
            }
            while ((deviation>1e-10) && (iterations < maxNumberOfIterations));
            
            if(system.isChemicalSystem()){
                chemdev=0.0;
                double xchem[] = new double[system.getPhases()[0].getNumberOfComponents()];
                
                
                for (i=0;i<system.getPhases()[0].getNumberOfComponents();i++){
                    xchem[i] = system.getPhases()[0].getComponents()[i].getx();
                }
                
                system.getChemicalReactionOperations().solveChemEq();
                system.init(1);
                
                for (i=0;i<system.getPhases()[0].getNumberOfComponents();i++){
                    chemdev += Math.abs(xchem[i]-system.getPhases()[0].getComponents()[i].getx());
                }
                
                System.out.println("chemdev: " + chemdev);
            }
        }
        while(chemdev>1e-6);
        
        //  System.out.println("iterations : " + iterations);
        // System.out.println("clonedSystem G : " +clonedSystem.calcGibbsEnergy());
        // System.out.println("system G : " + system.calcGibbsEnergy());
        
        system.init(1);
        return;
    }
    
}
