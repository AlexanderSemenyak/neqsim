/*
 * PHflash.java
 *
 * Created on 8. mars 2001, 10:56
 */

package thermodynamicOperations.flashOps;

import thermo.system.*;
import javax.swing.*;
import javax.swing.event.*;
import java.awt.*;
import java.io.*;
/**
 *
 * @author  even solbraa
 * @version
 */
public class PSFlash extends QfuncFlash implements java.io.Serializable {
    
    double Sspec=0;
    Flash tpFlash;
    int type=0;
    /** Creates new PHflash */
    public PSFlash() {
    }
    
    public PSFlash(SystemInterface system, double Sspec, int type) {
        this.system = system;
        this.tpFlash = new TPflash(system);
        this.Sspec = Sspec;
        this.type = type;
    }
    
    public double calcdQdTT(){
        double cP1=0.0, cP2=0.0;
        
        if(system.getNumberOfPhases()==1) return -system.getPhases()[0].getCp()/system.getTemperature();
        
        double dQdTT =  (system.getPhases()[1].getCp() + system.getPhases()[0].getCp());
        for(int i=0;i<system.getPhases()[1].getNumberOfComponents();i++){
            dQdTT += (0.0);
        }
        return dQdTT;
    }
    
    public double calcdQdT(){
        double dQ = -system.getEntropy()+Sspec;
        return dQ;
    }
    
    public double solveQ(){
        double oldTemp=system.getTemperature(), nyTemp= system.getTemperature();
        double iterations=1;
        do{
            iterations++;
            oldTemp = nyTemp;
            system.init(3);
            nyTemp = oldTemp - 0.8*calcdQdT()/calcdQdTT();
            system.setTemperature(nyTemp);
            tpFlash.run();
        }
        while(Math.abs((nyTemp-oldTemp)/(nyTemp))>1e-6 && iterations<1000);
        return nyTemp;
    }
    
    public void onPhaseSolve(){
        
        
    }
    
    public void run(){
        tpFlash.run();
        System.out.println("Entropy: " + system.getEntropy());
        
        if(type==0){
            solveQ();
        }
        else{
            sysNewtonRhapsonPHflash secondOrderSolver = new sysNewtonRhapsonPHflash(system, 2, system.getPhases()[0].getNumberOfComponents(),1);
            secondOrderSolver.setSpec(Sspec);
            secondOrderSolver.solve(1);
        }
        System.out.println("Entropy: " + system.getEntropy());
        System.out.println("Temperature: " + system.getTemperature());
        return;
    }
}
