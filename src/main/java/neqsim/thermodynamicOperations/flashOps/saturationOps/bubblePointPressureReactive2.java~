/*
 * bubblePointFlash.java
 *
 * Created on 14. oktober 2000, 16:30
 */

package thermodynamicOperations.flashOps.saturationOps;


import thermodynamicOperations.*;
import thermo.system.*;

public class bubblePointPressureReactive2 extends constantDutyTemperatureFlash{
    
    /** Creates new bubblePointFlash */
    public bubblePointPressureReactive2() {
    }
    
    public bubblePointPressureReactive2(SystemInterface system) {
        super(system);
    }
    
    
    public void run() throws Exception{
        
        int iterations=0, maxNumberOfIterations = 10000;
        double yold=0, ytotal=1;
        double deriv=0, funk=0;
        //System.out.println("starting");
        system.init(0);
        
        double oldPres=0;
        
        for (int i=0;i<system.getPhases()[1].getNumberOfComponents();i++){
            system.getPhases()[1].getComponents()[i].setx(system.getPhases()[0].getComponents()[i].getz());
            if(system.getPhases()[0].getComponents()[i].getIonicCharge()!=0) system.getPhases()[0].getComponents()[i].setx(1e-30);
            else system.getPhases()[0].getComponents()[i].setx(system.getPhases()[0].getComponents()[i].getK()*system.getPhases()[1].getComponents()[i].getx());
        }
        
        do {
            system.init(1);
            oldPres =  system.getPressure();
            ytotal=0;
            for (int i=0;i<system.getPhases()[1].getNumberOfComponents();i++){
                iterations++;
                yold = system.getPhases()[0].getComponents()[i].getx();
                system.getPhases()[0].getComponents()[i].setK(Math.exp(Math.log(system.getPhases()[1].getComponents()[i].getFugasityCoeffisient()) - Math.log(system.getPhases()[0].getComponents()[i].getFugasityCoeffisient())));
                system.getPhases()[1].getComponents()[i].setK(system.getPhases()[0].getComponents()[i].getK());
                ytotal += system.getPhases()[0].getComponents()[i].getx();
            }
            
            if(ytotal>5.0) ytotal=5.0;
            
            system.setPressure(ytotal*system.getPressure());
            for (int i=0;i<system.getPhases()[1].getNumberOfComponents();i++){
                system.getPhases()[0].getComponents()[i].setx(system.getPhases()[0].getComponents()[i].getK()*system.getPhases()[1].getComponents()[i].getx()/ytotal);
            }
        }
        while(((Math.abs(ytotal-1.0) > 1e-10) || Math.abs(oldPres-system.getPressure())>1e-10) && (iterations < maxNumberOfIterations));
        
    }
    
    public void printToFile(String name) {}
    
    
    
}
