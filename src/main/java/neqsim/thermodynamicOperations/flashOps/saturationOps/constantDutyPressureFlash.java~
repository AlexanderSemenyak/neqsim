/*
 * bubblePointFlash.java
 *
 * Created on 14. oktober 2000, 16:30
 */

package thermodynamicOperations.flashOps.saturationOps;


import thermodynamicOperations.*;
import thermo.system.*;

public class constantDutyPressureFlash extends constantDutyFlash{
    
    
    /** Creates new bubblePointFlash */
    public constantDutyPressureFlash() {
    }
    
    public constantDutyPressureFlash(SystemInterface system) {
        super(system);
    }
    
    
   public void run() throws Exception{
        
     //   system.calc_x_y();
     //   system.init(2);
        
        if(system.isChemicalSystem()){
            system.getChemicalReactionOperations().solveChemEq(0);
        }
        
        int iterations=0, maxNumberOfIterations = 10000;
        double yold=0, ytotal=1,deriv=0, funk=0, dkidp=0, dyidp=0, dxidp=0, Pold=0;
        
        do{
            //  system.setBeta(beta+0.65);
            system.init(2);
            
            for(int i=0;i<system.getPhases()[0].getNumberOfComponents();i++){
                system.getPhases()[0].getComponents()[i].setK(system.getPhases()[1].getComponents()[i].getFugasityCoeffisient()/system.getPhases()[0].getComponents()[i].getFugasityCoeffisient());
                system.getPhases()[1].getComponents()[i].setK(system.getPhases()[0].getComponents()[i].getK());
            }
            
            system.calc_x_y();
           
            funk = 0.0;
            deriv = 0.0;
            
            for(int i=0;i<system.getPhases()[0].getNumberOfComponents();i++){
                dkidp = (system.getPhases()[1].getComponents()[i].getdfugdp()-system.getPhases()[0].getComponents()[i].getdfugdp())*system.getPhases()[1].getComponents()[i].getK();
                dxidp = - system.getPhases()[1].getComponents()[i].getz()*system.getBeta()*dkidp/Math.pow(1.0-system.getBeta()+system.getBeta()*system.getPhases()[1].getComponents()[i].getK(),2.0);
                dyidp = dkidp*system.getPhases()[1].getComponents()[i].getx()+system.getPhases()[1].getComponents()[i].getK()*dxidp;
                funk += system.getPhases()[0].getComponents()[i].getx()-system.getPhases()[1].getComponents()[i].getx();
                deriv += dyidp - dxidp;
            }
              
            // System.out.println("Pressure: " + system.getPressure());
          
            Pold = system.getPressure();
            system.setPressure(Pold - 0.5*funk/deriv);
        }
        while(Math.abs((system.getPressure()-Pold)/system.getPressure())>1e-10);
        
    }
    
    public void printToFile(String name) {}
    
}
