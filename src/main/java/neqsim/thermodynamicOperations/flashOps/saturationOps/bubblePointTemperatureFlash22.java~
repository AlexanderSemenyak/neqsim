/*
 * bubblePointFlash.java
 *
 * Created on 14. oktober 2000, 16:30
 */

package thermodynamicOperations.flashOps.saturationOps;


import thermodynamicOperations.*;
import thermo.system.*;

public class bubblePointTemperatureFlash22 extends constantDutyTemperatureFlash{
    
    /** Creates new bubblePointFlash */
    public bubblePointTemperatureFlash22() {
    }
    
    public bubblePointTemperatureFlash22(SystemInterface system) {
        super(system);
    }
    
    
    public void run(){
        int iterations=0, maxNumberOfIterations = 1000;
        double yold=0, ytotal=1;
        double deriv=0, funk=0;
        //System.out.println("starting");
        
        system.init(0);
        system.setBeta(1, 1.0-1e-10);
        system.setBeta(0, 1e-10);
        
        double oldPres=0;
        if(system.isChemicalSystem()){
            system.getChemicalReactionOperations().solveChemEq(0);
            system.getChemicalReactionOperations().solveChemEq(1);
        }
        
        for (int i=0;i<system.getPhases()[1].getNumberOfComponents();i++){
            system.getPhases()[1].getComponents()[i].setx(system.getPhases()[0].getComponents()[i].getz());
            if(system.getPhases()[0].getComponents()[i].getIonicCharge()!=0) system.getPhases()[0].getComponents()[i].setx(1e-40);
            else system.getPhases()[0].getComponents()[i].setx(system.getPhases()[0].getComponents()[i].getK()*system.getPhases()[1].getComponents()[i].getz());
        }
        ytotal = 0.0;
        for (int i=0;i<system.getPhases()[0].getNumberOfComponents();i++){
            ytotal += system.getPhases()[0].getComponents()[i].getx();
        }
        
        do {
            iterations++;
            for (int i=0;i<system.getPhases()[0].getNumberOfComponents();i++){
                system.getPhases()[0].getComponents()[i].setx(system.getPhases()[0].getComponents()[i].getx()/ytotal);
            }
            if(system.isChemicalSystem() && (iterations%2)==0){
                system.getChemicalReactionOperations().solveChemEq(1);
            }
            system.init(1);
            oldPres =  system.getPressure();
            for (int i=0;i<system.getPhases()[1].getNumberOfComponents();i++){
                do{
                    yold = system.getPhases()[0].getComponents()[i].getx();
                    if(system.getPhase(0).getComponent(i).getIonicCharge()!=0) system.getPhases()[0].getComponents()[i].setK(1e-40);
                    else system.getPhases()[0].getComponents()[i].setK(Math.exp(Math.log(system.getPhases()[1].getComponents()[i].getFugasityCoeffisient()) - Math.log(system.getPhases()[0].getComponents()[i].getFugasityCoeffisient())));
                    system.getPhases()[1].getComponents()[i].setK(system.getPhases()[0].getComponents()[i].getK());
                    system.getPhases()[0].getComponents()[i].setx(system.getPhases()[0].getComponents()[i].getK()*system.getPhases()[1].getComponents()[i].getz());
                    //System.out.println("y err " + Math.abs(system.getPhases()[0].getComponents()[i].getx()-yold));
                    
                }
                while(Math.abs(system.getPhases()[0].getComponents()[i].getx()-yold)>1e-4);
            }
            for (int i=0;i<system.getPhases()[0].getNumberOfComponents();i++){
                if(!Double.isNaN(system.getPhases()[0].getComponents()[i].getK())) system.getPhases()[0].getComponents()[i].setx(system.getPhases()[0].getComponents()[i].getK()*system.getPhases()[1].getComponents()[i].getz());
                else system.init(0);
            }
            ytotal = 0.0;
            ytotal = ytotal+system.getPhases()[0].getComponents()[i].getx();
            funk = funk + system.getPhases()[1].getComponents()[i].getx()*system.getPhases()[1].getComponents()[i].getK();
            deriv=deriv+system.getPhases()[1].getComponents()[i].getx()*system.getPhases()[1].getComponents()[i].getK()*(system.getPhases()[1].getComponents()[i].getdfugdt()-system.getPhases()[0].getComponents()[i].getdfugdt());
            
            
            //  System.out.println("FUNK: " + funk);
            // System.out.println("temp: " + system.getTemperature());
            // system.setPressure(-Math.log(funk)/(deriv/funk)+system.getPressure());
            system.setTemperature(-(funk-1)/deriv+system.getTemperature());
            
        }
        while((Math.abs(ytotal-1) > 1e-10)&& (iterations < maxNumberOfIterations));
        
    }
    
    public void printToFile(String name) {}
    
    
    
}
