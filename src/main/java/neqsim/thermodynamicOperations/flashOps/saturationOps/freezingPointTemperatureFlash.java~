/*
 * bubblePointFlash.java
 *
 * Created on 14. oktober 2000, 16:30
 */

package thermodynamicOperations.flashOps.saturationOps;


import thermodynamicOperations.*;
import thermo.system.*;
import thermo.component.*;

public class freezingPointTemperatureFlash extends constantDutyTemperatureFlash{
    
    /** Creates new bubblePointFlash */
    public freezingPointTemperatureFlash() {
    }
    
    public freezingPointTemperatureFlash(SystemInterface system) {
        super(system);
    }
    
    
    public void run(){
        ThermodynamicOperations ops = new ThermodynamicOperations(system);
        
        int iterations=0, maxNumberOfIterations = 15000;
        double yold=0, ytotal=1;
        double deriv=0, funk=0;
        double maxTemperature = 0, minTemperature= 1e6;
        for(int k=0;k<system.getPhases()[0].getNumberOfComponents();k++){
            if(system.getPhase(0).getComponent(k).getComponentName().equals("water") || system.getPhase(0).getComponent(k).getComponentName().equals("MEG")){
                system.setTemperature(system.getPhases()[0].getComponents()[k].getMeltingPointTemperature());
                system.init(0);
                system.init(1);
                iterations=0;
                do{
                    funk=0;
                    deriv = 0.0;
                    iterations++;
                    System.out.println("start flash");
                    ops.TPflash();
                    system.getPhase(3).getComponent(k).fugcoef(system.getPhase(3));
                    
                    funk =  system.getPhases()[0].getComponents()[k].getz();
                    System.out.println("phase " + system.getNumberOfPhases());
                    
                    for(int i=0;i<system.getNumberOfPhases();i++){
                        funk -= system.getPhases()[i].getBeta()*system.getPhases()[3].getComponents()[k].getFugasityCoeffisient()/system.getPhases()[i].getComponents()[k].getFugasityCoeffisient();
                        deriv -= system.getPhases()[i].getBeta()*(system.getPhases()[3].getComponents()[k].getFugasityCoeffisient()*Math.exp(system.getPhases()[i].getComponents()[k].getdfugdt())*-1.0/Math.pow(system.getPhases()[i].getComponents()[k].getFugasityCoeffisient(),2.0) + Math.exp(system.getPhases()[3].getComponents()[k].getdfugdt())/system.getPhases()[i].getComponents()[k].getFugasityCoeffisient());
                    }
                    System.out.println("funk " + funk);
                    if(((ComponentSolid) system.getPhases()[3].getComponents()[k]).getdpdt()<0){
                        if(Math.abs(funk)<1.0) system.setTemperature(system.getTemperature() - 100*funk);
                        else system.setTemperature(system.getTemperature() - funk/100.0);
                    }
                    else{
                        if(Math.abs(funk)<1.0) system.setTemperature(system.getTemperature() + 100*funk);
                        else system.setTemperature(system.getTemperature() + funk/100.0);
                    }
                    System.out.println("temp " + system.getTemperature());
                    //if(system.getPhase(0).getComponent(k).getComponentName().equals("MEG")) System.out.println("funk " + funk + " temp " + system.getTemperature());
                    
                }
                while(Math.abs(funk)>=0.0000001 && iterations<100000);
                
                //System.out.println("funk " + funk + k + " " + system.getTemperature());
                if(system.getTemperature()<minTemperature) minTemperature=system.getTemperature();
                if(system.getTemperature()>maxTemperature) maxTemperature=system.getTemperature();
            }
        }
        
        system.setTemperature(maxTemperature);
        //System.out.println("min freezing temp " + minTemperature);
        //System.out.println("max freezing temp " + maxTemperature);
    }
    
    public void printToFile(String name) {}
    
    
    
}
