/*
 * thermoOps.java
 *
 * Created on 2. oktober 2000, 20:27
 */

package thermodynamicOperations;

import thermo.system.*;
import thermodynamicOperations.chemicalEquilibrium.*;
import thermodynamicOperations.flashOps.*;
import thermodynamicOperations.flashOps.saturationOps.*;
import thermodynamicOperations.phaseEnvelopeOps.multicomponentEnvelopeOps.*;
import thermodynamicOperations.phaseEnvelopeOps.reactiveCurves.*;

/**
 *
 * @author  Even Solbraa
 * @version
 */
public class ThermodynamicOperations extends java.lang.Object implements java.io.Serializable{
    
    Thread thisThread;
    OperationInterface  operation;
    SystemInterface system;
    boolean writeFile=false;
    String fileName = null;
    
    /** Creates new thermoOps */
    public ThermodynamicOperations() {
        
    }
    
    public ThermodynamicOperations(SystemInterface system) {
        this.system = system;
    }
    
    public void setSystem(SystemInterface system){
        this.system = system;
    }
    
    public void TPflash(){
        operation = new TPflash(system, system.doSolidPhaseCheck());
        operation.run();
    }
    
    public void chemicalEquilibrium(){
        if(system.isChemicalSystem()){
            operation = new ChemicalEquilibrium(system);
            operation.run();
        }
    }
    
    public void PHflash(double Hspec, int type){
        operation = new PHflash(system, Hspec, type);
        operation.run();
    }
    
    public void PSflash(double Sspec){
        operation = new PSFlash(system, Sspec, 0);
        operation.run();
    }
    
    
    public void bubblePointTemperatureFlash() throws Exception{
        constantDutyFlashInterface operation = new bubblePointTemperatureNoDer(system);
        operation.run();
        if(Double.isNaN(system.getTemperature()) || operation.isSuperCritical()) throw new util.exception.IsNaNException("error in bubblePointTemperatureFlash() - could not find solution - possible no dew point exists");
        
    }
    
    public void freezingPointTemperatureFlash() throws Exception{
        operation = new freezingPointTemperatureFlash(system);
        operation.run();
        if(Double.isNaN(system.getTemperature())) throw new util.exception.IsNaNException("error in freezingPointTemperatureFlash() - could not find solution - possible no dew point exists");
    }
    
    public void calcSaltSaturation(String saltName) throws Exception{
        operation = new calcSaltSatauration(system, saltName);
        operation.run();
        if(Double.isNaN(system.getTemperature())) throw new util.exception.IsNaNException("error in freezingPointTemperatureFlash() - could not find solution - possible no dew point exists");
    }
    
    public void hydrateFormationPressure() throws Exception{
        operation = new HydrateFormationPressureFlash(system);
        operation.run();
        if(Double.isNaN(system.getTemperature())) throw new util.exception.IsNaNException("error in freezingPointTemperatureFlash() - could not find solution - possible no dew point exists");
    }
    
    public void hydrateFormationTemperature() throws Exception{
        operation = new HydrateFormationTemperatureFlash(system);
        operation.run();
        if(Double.isNaN(system.getTemperature())) throw new util.exception.IsNaNException("error in freezingPointTemperatureFlash() - could not find solution - possible no dew point exists");
    }
    
    public void bubblePointPressureFlash() throws Exception{
        system.init(0);
        constantDutyFlashInterface operation = new constantDutyPressureFlash(system);
        system.setBeta(1, 1.0-1e-10);
        system.setBeta(0, 1e-10);
        operation.run();
        if(Double.isNaN(system.getPressure()) || operation.isSuperCritical()) throw new util.exception.IsNaNException("error in bubblePointPressureFlash() - could not find solution - possible no dew point exists");
        
    }
    
    public void bubblePointPressureFlash(boolean derivatives) throws Exception{
        constantDutyFlashInterface operation = null;
        if(derivatives==true) bubblePointPressureFlash();
        else{
            operation = new bubblePointPressureFlash(system);
            operation.run();
        }
        if(Double.isNaN(system.getPressure()) || operation.isSuperCritical()) throw new util.exception.IsNaNException("error in bubblePointPressureFlash() - could not find solution - possible no dew point exists");
    }
    
    
    public void dewPointTemperatureFlash() throws Exception{
        constantDutyFlashInterface operation = new dewPointTemperatureFlash(system);
        operation.run();
        if(Double.isNaN(system.getTemperature()) || operation.isSuperCritical()) throw new util.exception.IsNaNException("error in dewPointTemperatureFlash() - could not find solution - possible no dew point exists");
        
    }
    
    public void dewPointPressureFlash() throws Exception{
        // try{
        system.init(0);
        constantDutyFlashInterface operation = new dewPointPressureFlash(system);
        operation.run();
        if(Double.isNaN(system.getPressure()) || operation.isSuperCritical()) throw new util.exception.IsNaNException("error in dewPointPressureFlash() - could not find solution - possible no dew point exists");
        //  }
    }
    
    //    public void dewPointPressureFlash(){
    //        constantDutyFlashInterface operation = new constantDutyPressureFlash(system);
    //        operation.setBeta((1-1e-7));
    //        operation.run();
    //    }
    
    public void calcPTphaseEnvelope(){
        operation = new pTphaseEnvelope(system, fileName);
        //thisThread = new Thread(operation);
        //thisThread.start();
        operation.run();
    }
    
    public void calcPloadingCurve(){
        operation = new pLoadingCurve2(system);
        // thisThread = new Thread(operation);
        // thisThread.start();
        operation.run();
    }
    
    public void calcHPTphaseEnvelope(){
        operation = new HPTphaseEnvelope(system);
        thisThread = new Thread(operation);
        thisThread.start();
        //  operation.run();
    }
    
    public void printToFile(String name){
        operation.printToFile(name);
    }
    
    public double[] get(String name){
        return operation.get(name);
    }
    
    public void displayResult(){
        try{
            thisThread.join();
        }
        catch(Exception e) {
            System.out.println("Thread did not finish");
        }
        operation.displayResult();
    }
    
    public void writeNetCDF(String name){
        fileName = name;
        operation.createNetCdfFile(name);
    }
    
}
