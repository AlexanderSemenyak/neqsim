/*
 * pTphaseEnvelope.java
 *
 * Created on 14. oktober 2000, 21:59
 */

package thermodynamicOperations.phaseEnvelopeOps.multicomponentEnvelopeOps;

import thermodynamicOperations.*;
import thermo.system.*;
import MathLib.nonLinearSolver.*;

import java.text.*;
import java.util.*;
import java.io.*;
import guiAuto.*;
import javax.swing.*;
import javax.swing.event.*;
import java.awt.*;
import dataPresentation.JFreeChart.*;
import com.jrefinery.chart.*;
import com.jrefinery.chart.data.*;
import com.jrefinery.chart.ui.*;
import com.jrefinery.util.ui.*;

/**
 *
 * @author  Even Solbraa
 * @version
 */
public class pTphaseEnvelope extends Object implements OperationInterface, java.io.Serializable{
    
    
    SystemInterface system;
    int i, j=0, nummer=0, iterations=0,maxNumberOfIterations=10000;
    double gibbsEnergy=0, gibbsEnergyOld=0;
    double Kold, deviation=0, g0 = 0, g1=0;
    double lnOldOldK[], lnK[];
    double lnOldK[];
    double oldDeltalnK[], deltalnK[];
    double tm[] = {1,1};
    double beta = 1e-5;
    int lowestGibbsEnergyPhase=0; // lowestGibbsEnergyPhase
    JProgressBar monitor;
    JFrame mainFrame;
    JPanel mainPanel;
    
    
    double temp=0, pres=0, startPres=0;
    double[][] points = new double[2][];
    double[] pointsH;
    double[][] pointsH2 = new double[4][];
    
    double[] pointsV;
    double[][] pointsV2 = new double[4][];
    
    double[] pointsS;
    double[][] pointsS2 = new double[4][];
    
    double[][] points2 = new double[4][];
    double[][] points3 = new double[8][];
    boolean moreLines=false;
    int np=0;
    //points[2] = new double[1000];
    int speceq=0;
    
    /** Creates new bubblePointFlash */
    public pTphaseEnvelope() {
    }
    
    public pTphaseEnvelope(SystemInterface system) {
        this.system = system;
        lnOldOldK = new double[system.getPhases()[0].getNumberOfComponents()];
        lnOldK = new double[system.getPhases()[0].getNumberOfComponents()];
        lnK = new double[system.getPhases()[0].getNumberOfComponents()];
        oldDeltalnK = new double[system.getPhases()[0].getNumberOfComponents()];
        deltalnK = new double[system.getPhases()[0].getNumberOfComponents()];
        mainFrame = new JFrame("Progress Bar");
        mainPanel = new JPanel();
        mainPanel.setSize(200,100);
        mainFrame.getContentPane().setLayout(new FlowLayout());
        mainPanel.setLayout(new FlowLayout());
        mainFrame.setSize(200,100);
        monitor = new JProgressBar(0,1000);
        monitor.setSize(200,100);
        monitor.setStringPainted(true);
        mainPanel.add(monitor);
        mainFrame.getContentPane().add(mainPanel);
        mainFrame.setVisible(true);
        
        
    }
    
    
    public void run(){
        points[0] = new double[10000];
        points[1] = new double[10000];
        
        pointsH = new double[10000];
        pointsV = new double[10000];
        pointsS = new double[10000];
    
        for(int i=0;i<system.getPhases()[0].getNumberOfComponents();i++)
        {
            if(system.getPhases()[0].getComponents()[i].getTC()<system.getPhases()[0].getComponents()[i].getTC()) {
                speceq = system.getPhases()[0].getComponents()[i].getComponentNumber();
            }
        }
        
        pres = 1;
        temp =  system.getPhases()[0].getComponents()[speceq].getAntoineVaporTemperature(pres);
        
        system.setPressure(pres);
        system.setBeta(1e-10);
        
        ThermodynamicOperations testOps = new ThermodynamicOperations(system);
        
        for(int i=0;i<1000;i++){
            temp = temp + i*4;
            system.setTemperature(temp);
            system.init(0);
            testOps.bubblePointTemperatureFlash();
            
            double tempNy = system.getTemperature();
            if(!Double.isNaN(tempNy)) temp=tempNy;
            if(!Double.isNaN(tempNy)) break;
        }
        
        system.setPressure(pres);
        system.setTemperature(temp);
        System.out.println("temp: " + system.getTemperature());
        system.setBeta(1e-10);
        
        sysNewtonRhapsonPhaseEnvelope nonLinSolver = new sysNewtonRhapsonPhaseEnvelope(system, 2, system.getPhases()[0].getNumberOfComponents());
        nonLinSolver.solve(1);
        nonLinSolver.calcInc(1);
        
        startPres = system.getPressure();
        
        
        startPres = system.getPressure();
        
        for (np=1;np<9500;np++){
            
            if(np%5==0){
                monitor.setValue(np);
                monitor.setString("Calculated points: " + np);
            }
            
            
            nonLinSolver.calcInc(np);
            nonLinSolver.solve(np);
            
            if(Double.isNaN(system.getTemperature()) || system.getPressure()<startPres){
                points[0][np-1] = points[0][np-3];
                points[1][np-1] = points[1][np-3];
                pointsH[np-1] = pointsH[np-3];
                pointsV[np-1] = pointsV[np-3];
                pointsS[np-1] = pointsS[np-3];
                
                //         System.out.println("avbryter" +  np);
                break;
            }
            //    System.out.println("Ideal pres: " + getPressure());
            // System.out.println("temp: " + system.getTemperature());
            points[0][np-1]=system.getTemperature();
            points[1][np-1]=system.getPressure();
            pointsH[np-1] = system.getPhases()[1].getEnthalpy()/system.getPhases()[1].getNumberOfMolesInPhase()/system.getPhases()[1].getMolarMass()/1e3;
            pointsV[np-1] = system.getPhases()[1].getDensity();
            pointsS[np-1] = system.getPhases()[1].getEntropy()/system.getPhases()[1].getNumberOfMolesInPhase()/system.getPhases()[1].getMolarMass()/1e3;
            
        }
        
        
        int ncr = nonLinSolver.getNpCrit();
        int ncr2 = np-ncr;
        
        System.out.println("ncr: " + ncr + "  ncr2 . " + ncr2);
        points2[0] = new double[ncr+1];
        points2[1] = new double[ncr+1];
        points2[2] = new double[ncr2-2];
        points2[3] = new double[ncr2-2];
        
        
        pointsH2[0] = new double[ncr+1];
        pointsH2[1] = new double[ncr+1];
        pointsH2[2] = new double[ncr2-2];
        pointsH2[3] = new double[ncr2-2];
        
        
        pointsS2[0] = new double[ncr+1];
        pointsS2[1] = new double[ncr+1];
        pointsS2[2] = new double[ncr2-2];
        pointsS2[3] = new double[ncr2-2];
        
        pointsV2[0] = new double[ncr+1];
        pointsV2[1] = new double[ncr+1];
        pointsV2[2] = new double[ncr2-2];
        pointsV2[3] = new double[ncr2-2];
        
        for (int i=0;i<ncr;i++){
            points2[0][i] = points[0][i];
            points2[1][i] = points[1][i];
            
            pointsH2[1][i] = points[1][i];
            pointsH2[0][i] = pointsH[i];
            
            pointsS2[1][i] = points[1][i];
            pointsS2[0][i] = pointsS[i];
            
            pointsV2[1][i] = points[1][i];
            pointsV2[0][i] = pointsV[i];
            
        }
        
        system.setTemperature(system.getTC());
        system.setPressure(system.getPC());
        system.init(1);
        
        
        points2[0][ncr] = system.getTC();
        points2[1][ncr] = system.getPC();
        points2[2][0] = system.getTC();
        points2[3][0] = system.getPC();
        
        pointsH2[1][ncr] = system.getPC();
        pointsH2[0][ncr] = system.getPhases()[1].getEnthalpy()/system.getPhases()[1].getNumberOfMolesInPhase()/system.getPhases()[1].getMolarMass()/1e3;
        pointsH2[3][0] = system.getPC();
        pointsH2[2][0] = system.getPhases()[1].getEnthalpy()/system.getPhases()[1].getNumberOfMolesInPhase()/system.getPhases()[1].getMolarMass()/1e3;
        
        pointsS2[1][ncr] = system.getPC();
        pointsS2[0][ncr] = system.getPhases()[1].getEntropy()/system.getPhases()[1].getNumberOfMolesInPhase()/system.getPhases()[1].getMolarMass()/1e3;
        pointsS2[3][0] = system.getPC();
        pointsS2[2][0] =  system.getPhases()[1].getEntropy()/system.getPhases()[1].getNumberOfMolesInPhase()/system.getPhases()[1].getMolarMass()/1e3;
        
        pointsV2[1][ncr] = system.getPC();
        pointsV2[0][ncr] =  system.getPhases()[1].getDensity();
        pointsV2[3][0] = system.getPC();
        pointsV2[2][0] = system.getPhases()[1].getDensity();
        
        for (int i=1;i<(ncr2-2);i++){
            points2[2][i] = points[0][i+ncr-1];
            points2[3][i] = points[1][i+ncr-1];
            
            pointsH2[3][i] = points[1][i+ncr-1];
            pointsH2[2][i] = pointsH[i+ncr-1];
            
            pointsS2[3][i] = points[1][i+ncr-1];
            pointsS2[2][i] = pointsS[i+ncr-1];
            
            pointsV2[3][i] = points[1][i+ncr-1];
            pointsV2[2][i] = pointsV[i+ncr-1];
            
        }
        //        monitor.close();
        mainFrame.setVisible(false);
        
    }
    
    public void displayResult(){
        
        DecimalFormat nf = new DecimalFormat();
        nf.setMaximumFractionDigits(1);
        nf.applyPattern("####.#");
        
        double TC = system.getTC();
        double PC = system.getPC();
        System.out.println("tc : " + TC + "  PC : " + PC);
        String[] navn= {"bubble point", "dew point","bubble point","dew point"};
        String title2= "";
        String title = "PT-graph  TC=" + title2.valueOf(nf.format(TC)) + " PC=" + title2.valueOf(nf.format(PC));
        String title3 = "PH-graph  TC=" + title2.valueOf(nf.format(TC)) + " PC=" + title2.valueOf(nf.format(PC));
        String title4 = "Density-graph  TC=" + title2.valueOf(nf.format(TC)) + " PC=" + title2.valueOf(nf.format(PC));
        String title5 = "PS-graph  TC=" + title2.valueOf(nf.format(TC)) + " PC=" + title2.valueOf(nf.format(PC));
       
        //    System.out.println("start flash");
        //    System.out.println("Tferdig..");
        
        
        
        graph2b graph2 = new graph2b(points2, navn, title, "Temperature [K]", "Pressure [bar]");
        graph2.show();
        
        graph2b graph3 = new graph2b(pointsH2, navn, title3, "Enthalpy [kJ/kg]", "Pressure [bar]");
        graph3.show();
        
        graph2b graph4 = new graph2b(pointsV2, navn, title4, "Density [kg/m^3]", "Pressure [bar]");
        graph4.show();
        
        graph2b graph5 = new graph2b(pointsS2, navn, title5, "Entropy [kJ/kg*K]", "Pressure [bar]");
        graph5.show();
        /*
        JDialog dialog = new JDialog();
        Container dialogContentPane = dialog.getContentPane();
        dialogContentPane.setLayout(new FlowLayout());
        JFreeChartPanel chartPanel =  graph4.getChartPanel();
        dialogContentPane.add(chartPanel);
        dialog.show();*/
    }
    
    
}
